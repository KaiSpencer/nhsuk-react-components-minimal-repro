import React, { HTMLProps, PureComponent, ChangeEvent } from 'react';
import { FormElementProps } from '../../util/types/FormTypes';
declare type DateInputValue = {
    day: string;
    month: string;
    year: string;
};
declare type DateInputChangeEvent = ChangeEvent<HTMLInputElement> & {
    target: HTMLInputElement & {
        value: DateInputValue;
    };
    currentTarget: HTMLInputElement & {
        value: DateInputValue;
    };
};
interface DateInputProps extends Omit<HTMLProps<HTMLDivElement>, 'value' | 'defaultValue'>, FormElementProps {
    autoSelectNext?: boolean;
    value?: Partial<DateInputValue>;
    defaultValue?: Partial<DateInputValue>;
    onChange?: (e: DateInputChangeEvent) => void;
}
interface DateInputState {
    values: {
        day: string;
        month: string;
        year: string;
    };
}
interface DateInput extends PureComponent<DateInputProps, DateInputState> {
    monthRef: null | HTMLInputElement;
    yearRef: null | HTMLInputElement;
}
declare class DateInput extends PureComponent<DateInputProps, DateInputState> {
    static Day: React.FC<Omit<import("./components/IndividualDateInputs").IndividualDateInputProps, "inputType">>;
    static Month: React.FC<Omit<import("./components/IndividualDateInputs").IndividualDateInputProps, "inputType">>;
    static Year: React.FC<Omit<import("./components/IndividualDateInputs").IndividualDateInputProps, "inputType">>;
    constructor(props: DateInputProps);
    componentDidUpdate(prevProps: DateInputProps): void;
    handleSelectNext: (inputType: 'day' | 'month' | 'year', value: string) => void;
    handleChange: (inputType: 'day' | 'month' | 'year', event: ChangeEvent<HTMLInputElement>) => void;
    registerRef: (inputType: 'day' | 'month' | 'year', ref: HTMLInputElement | null) => void;
    render(): JSX.Element;
}
export default DateInput;
