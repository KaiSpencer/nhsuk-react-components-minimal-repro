import React, { createContext, useEffect, isValidElement, useContext } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var classnames = {exports: {}};

/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

(function (module) {
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames() {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					if (arg.length) {
						var inner = classNames.apply(null, arg);
						if (inner) {
							classes.push(inner);
						}
					}
				} else if (argType === 'object') {
					if (arg.toString === Object.prototype.toString) {
						for (var key in arg) {
							if (hasOwn.call(arg, key) && arg[key]) {
								classes.push(key);
							}
						}
					} else {
						classes.push(arg.toString());
					}
				}
			}

			return classes.join(' ');
		}

		if (module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}()); 
} (classnames));

var classnamesExports = classnames.exports;
var classNames = /*@__PURE__*/getDefaultExportFromCjs(classnamesExports);

const Col = (_a) => {
    var { className, width } = _a, rest = __rest(_a, ["className", "width"]);
    return (React.createElement("div", Object.assign({ className: classNames(`nhsuk-grid-column-${width}`, className) }, rest)));
};

const Row = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-grid-row', className) }, rest)));
};

const PanelContext = createContext(null);

const development = !process.env.NODE_ENV
    || process.env.NODE_ENV === 'development'
    || process.env.NODE_ENV === 'test';
function isDev() {
    return development;
}

const useDevWarning = (warning, condition = () => true) => {
    useEffect(() => {
        if (isDev() && condition()) {
            // eslint-disable-next-line no-console
            console.warn(warning);
        }
    }, [warning]);
};

const PromoDeprecationWarning = 'The Promo component is deprecated, and will be removed in the next major version of nhsuk-react-components. The Card component is the intended replacement.';
const PanelDeprecationWarning = 'The Promo component is deprecated, and will be removed in the next major version of nhsuk-react-components. The Card component is the intended replacement.';

const BasePanel = (_a) => {
    var { label, grey, className, labelProps, children } = _a, rest = __rest(_a, ["label", "grey", "className", "labelProps", "children"]);
    useDevWarning(PanelDeprecationWarning);
    return (React.createElement("div", Object.assign({ className: classNames({ 'nhsuk-panel': !label }, { 'nhsuk-panel--grey': grey }, { 'nhsuk-panel-with-label': label }, className) }, rest),
        label ? (React.createElement("h3", Object.assign({ className: "nhsuk-panel-with-label__label" }, labelProps), label)) : null,
        children));
};
const Panel = (props) => {
    const PanelGroupContext = React.useContext(PanelContext);
    let panelWidth;
    if (PanelGroupContext !== null) {
        const { panelCount } = PanelGroupContext;
        switch (panelCount) {
            case 2:
                panelWidth = 'one-half';
                break;
            case 3:
                panelWidth = 'one-third';
                break;
            case 4:
                panelWidth = 'one-quarter';
                break;
            default:
                panelWidth = 'full';
                break;
        }
        return (React.createElement(Col, { width: panelWidth, className: "nhsuk-panel-group__item" },
            React.createElement(BasePanel, Object.assign({}, props))));
    }
    return React.createElement(BasePanel, Object.assign({}, props));
};
const PanelGroup = (_a) => {
    var { className, children } = _a, rest = __rest(_a, ["className", "children"]);
    let panelCount = 0;
    React.Children.forEach(children, (child) => {
        if (child && isValidElement(child) && child.type === Panel) {
            panelCount += 1;
        }
    });
    return (React.createElement(Row, Object.assign({ className: classNames('nhsuk-panel-group', className) }, rest),
        React.createElement(PanelContext.Provider, { value: { panelCount } }, children)));
};
Panel.Group = PanelGroup;

const PromoContext = createContext({ isGroup: false, promoCount: 0 });

const HeadingLevel = (_a) => {
    var { headingLevel = 'h3' } = _a, rest = __rest(_a, ["headingLevel"]);
    switch (headingLevel.toLowerCase()) {
        case 'h1':
            return React.createElement("h1", Object.assign({}, rest));
        case 'h2':
            return React.createElement("h2", Object.assign({}, rest));
        case 'h3':
            return React.createElement("h3", Object.assign({}, rest));
        case 'h4':
            return React.createElement("h4", Object.assign({}, rest));
        case 'h5':
            return React.createElement("h5", Object.assign({}, rest));
        case 'h6':
            return React.createElement("h6", Object.assign({}, rest));
        default:
            console.error(`HeadingLevel: Invalid headingLevel prop: ${headingLevel}`);
            return React.createElement("h3", Object.assign({}, rest));
    }
};

const BasePromo = (_a) => {
    var { className, children, imageSrc, imageProps, small, asElement: Component = 'a' } = _a, rest = __rest(_a, ["className", "children", "imageSrc", "imageProps", "small", "asElement"]);
    useDevWarning(PromoDeprecationWarning);
    const _b = imageProps || {}, { className: imageClassName } = _b, restImageProps = __rest(_b, ["className"]);
    return (React.createElement("div", { className: classNames('nhsuk-promo', { 'nhsuk-promo--small': small }, className) },
        React.createElement(Component, Object.assign({ className: "nhsuk-promo__link-wrapper" }, rest),
            imageSrc ? (React.createElement("img", Object.assign({ className: classNames('nhsuk-promo__img', imageClassName), src: imageSrc }, restImageProps))) : null,
            React.createElement("div", { className: "nhsuk-promo__content" }, children))));
};
BasePromo.defaultProps = {
    imageProps: {},
};
const PromoHeading = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement(HeadingLevel, Object.assign({ className: classNames('nhsuk-promo__heading', className) }, rest)));
};
PromoHeading.defaultProps = {
    headingLevel: 'h3',
};
const PromoDescription = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("p", Object.assign({ className: classNames('nhsuk-promo__description', className) }, rest)));
};
const PromoGroup = (_a) => {
    var { className, children } = _a, rest = __rest(_a, ["className", "children"]);
    let promoCount = 0;
    React.Children.forEach(children, (child) => {
        if (child && isValidElement(child) && child.type === Promo) {
            promoCount += 1;
        }
    });
    return (React.createElement(Row, Object.assign({ className: classNames('nhsuk-promo-group', className) }, rest),
        React.createElement(PromoContext.Provider, { value: { promoCount, isGroup: true } }, children)));
};
const Promo = (props) => {
    const { isGroup, promoCount } = useContext(PromoContext);
    let promoWidth;
    if (isGroup) {
        switch (promoCount) {
            case 2:
                promoWidth = 'one-half';
                break;
            case 3:
                promoWidth = 'one-third';
                break;
            case 4:
                promoWidth = 'one-quarter';
                break;
            default:
                promoWidth = 'full';
                break;
        }
        return (React.createElement(Col, { className: "nhsuk-promo-group__item", width: promoWidth },
            React.createElement(BasePromo, Object.assign({}, props))));
    }
    return React.createElement(BasePromo, Object.assign({}, props));
};
Promo.Group = PromoGroup;
Promo.Description = PromoDescription;
Promo.Heading = PromoHeading;

export { Panel, Promo };
//# sourceMappingURL=deprecated.es.js.map
