"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _layout = require("../../../components/layout");
var _PanelContext = _interopRequireDefault(require("./PanelContext"));
var _UseDevWarning = _interopRequireDefault(require("../../../util/hooks/UseDevWarning"));
var _warnings = require("../../warnings");
var _excluded = ["label", "grey", "className", "labelProps", "children"],
  _excluded2 = ["className", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var BasePanel = function BasePanel(_ref) {
  var label = _ref.label,
    grey = _ref.grey,
    className = _ref.className,
    labelProps = _ref.labelProps,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  (0, _UseDevWarning["default"])(_warnings.PanelDeprecationWarning);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])({
      'nhsuk-panel': !label
    }, {
      'nhsuk-panel--grey': grey
    }, {
      'nhsuk-panel-with-label': label
    }, className)
  }, rest), label ? /*#__PURE__*/_react["default"].createElement("h3", _extends({
    className: "nhsuk-panel-with-label__label"
  }, labelProps), label) : null, children);
};
var Panel = function Panel(props) {
  var PanelGroupContext = _react["default"].useContext(_PanelContext["default"]);
  var panelWidth;
  if (PanelGroupContext !== null) {
    var panelCount = PanelGroupContext.panelCount;
    switch (panelCount) {
      case 2:
        panelWidth = 'one-half';
        break;
      case 3:
        panelWidth = 'one-third';
        break;
      case 4:
        panelWidth = 'one-quarter';
        break;
      default:
        panelWidth = 'full';
        break;
    }
    return /*#__PURE__*/_react["default"].createElement(_layout.Col, {
      width: panelWidth,
      className: "nhsuk-panel-group__item"
    }, /*#__PURE__*/_react["default"].createElement(BasePanel, props));
  }
  return /*#__PURE__*/_react["default"].createElement(BasePanel, props);
};
var PanelGroup = function PanelGroup(_ref2) {
  var className = _ref2.className,
    children = _ref2.children,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  var panelCount = 0;
  _react["default"].Children.forEach(children, function (child) {
    if (child && /*#__PURE__*/(0, _react.isValidElement)(child) && child.type === Panel) {
      panelCount += 1;
    }
  });
  return /*#__PURE__*/_react["default"].createElement(_layout.Row, _extends({
    className: (0, _classnames["default"])('nhsuk-panel-group', className)
  }, rest), /*#__PURE__*/_react["default"].createElement(_PanelContext["default"].Provider, {
    value: {
      panelCount: panelCount
    }
  }, children));
};
Panel.Group = PanelGroup;
var _default = Panel;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,