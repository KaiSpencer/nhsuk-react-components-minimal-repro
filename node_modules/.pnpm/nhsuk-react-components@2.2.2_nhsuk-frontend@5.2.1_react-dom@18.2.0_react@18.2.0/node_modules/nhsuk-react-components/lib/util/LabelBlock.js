"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _Hint = _interopRequireDefault(require("../components/hint/Hint"));
var _Label = _interopRequireDefault(require("../components/label/Label"));
var _ErrorMessage = _interopRequireDefault(require("../components/error-message/ErrorMessage"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var LabelBlock = function LabelBlock(_ref) {
  var elementId = _ref.elementId,
    label = _ref.label,
    labelProps = _ref.labelProps,
    hint = _ref.hint,
    hintProps = _ref.hintProps,
    error = _ref.error,
    errorProps = _ref.errorProps;
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, label ? /*#__PURE__*/_react["default"].createElement(_Label["default"], _extends({
    id: elementId ? "".concat(elementId, "--label") : undefined,
    htmlFor: elementId
  }, labelProps), label) : null, hint ? /*#__PURE__*/_react["default"].createElement(_Hint["default"], _extends({
    id: elementId ? "".concat(elementId, "--hint") : undefined
  }, hintProps), hint) : null, error && typeof error === 'string' ? /*#__PURE__*/_react["default"].createElement(_ErrorMessage["default"], _extends({
    id: elementId ? "".concat(elementId, "--error-message") : undefined
  }, errorProps), error) : null);
};
var _default = LabelBlock;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9IaW50IiwiX0xhYmVsIiwiX0Vycm9yTWVzc2FnZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJMYWJlbEJsb2NrIiwiX3JlZiIsImVsZW1lbnRJZCIsImxhYmVsIiwibGFiZWxQcm9wcyIsImhpbnQiLCJoaW50UHJvcHMiLCJlcnJvciIsImVycm9yUHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJpZCIsImNvbmNhdCIsInVuZGVmaW5lZCIsImh0bWxGb3IiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC9MYWJlbEJsb2NrLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEhpbnQsIHsgSGludFByb3BzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9oaW50L0hpbnQnO1xuaW1wb3J0IExhYmVsLCB7IExhYmVsUHJvcHMgfSBmcm9tICcuLi9jb21wb25lbnRzL2xhYmVsL0xhYmVsJztcbmltcG9ydCBFcnJvck1lc3NhZ2UsIHsgRXJyb3JNZXNzYWdlUHJvcHMgfSBmcm9tICcuLi9jb21wb25lbnRzL2Vycm9yLW1lc3NhZ2UvRXJyb3JNZXNzYWdlJztcblxuaW50ZXJmYWNlIExhYmVsQmxvY2tQcm9wcyB7XG4gIGVsZW1lbnRJZD86IHN0cmluZztcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIGxhYmVsUHJvcHM/OiBMYWJlbFByb3BzO1xuICBoaW50Pzogc3RyaW5nO1xuICBoaW50UHJvcHM/OiBIaW50UHJvcHM7XG4gIGVycm9yPzogc3RyaW5nIHwgYm9vbGVhbjtcbiAgZXJyb3JQcm9wcz86IEVycm9yTWVzc2FnZVByb3BzO1xufVxuXG5jb25zdCBMYWJlbEJsb2NrOiBSZWFjdC5GQzxMYWJlbEJsb2NrUHJvcHM+ID0gKHtcbiAgZWxlbWVudElkLFxuICBsYWJlbCxcbiAgbGFiZWxQcm9wcyxcbiAgaGludCxcbiAgaGludFByb3BzLFxuICBlcnJvcixcbiAgZXJyb3JQcm9wcyxcbn0pID0+IChcbiAgPD5cbiAgICB7bGFiZWwgPyAoXG4gICAgICA8TGFiZWwgaWQ9e2VsZW1lbnRJZCA/IGAke2VsZW1lbnRJZH0tLWxhYmVsYCA6IHVuZGVmaW5lZH0gaHRtbEZvcj17ZWxlbWVudElkfSB7Li4ubGFiZWxQcm9wc30+XG4gICAgICAgIHtsYWJlbH1cbiAgICAgIDwvTGFiZWw+XG4gICAgKSA6IG51bGx9XG4gICAge2hpbnQgPyAoXG4gICAgICA8SGludCBpZD17ZWxlbWVudElkID8gYCR7ZWxlbWVudElkfS0taGludGAgOiB1bmRlZmluZWR9IHsuLi5oaW50UHJvcHN9PlxuICAgICAgICB7aGludH1cbiAgICAgIDwvSGludD5cbiAgICApIDogbnVsbH1cbiAgICB7ZXJyb3IgJiYgdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IChcbiAgICAgIDxFcnJvck1lc3NhZ2UgaWQ9e2VsZW1lbnRJZCA/IGAke2VsZW1lbnRJZH0tLWVycm9yLW1lc3NhZ2VgIDogdW5kZWZpbmVkfSB7Li4uZXJyb3JQcm9wc30+XG4gICAgICAgIHtlcnJvcn1cbiAgICAgIDwvRXJyb3JNZXNzYWdlPlxuICAgICkgOiBudWxsfVxuICA8Lz5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IExhYmVsQmxvY2s7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLE1BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUEyRixTQUFBRCx1QkFBQUssR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLEdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxZQUFBSSxHQUFBLElBQUFELE1BQUEsUUFBQVAsTUFBQSxDQUFBUyxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsS0FBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxnQkFBQUwsTUFBQSxZQUFBSixRQUFBLENBQUFhLEtBQUEsT0FBQVAsU0FBQTtBQVkzRixJQUFNUSxVQUFxQyxHQUFHLFNBQXhDQSxVQUFxQ0EsQ0FBQUMsSUFBQTtFQUFBLElBQ3pDQyxTQUFTLEdBQUFELElBQUEsQ0FBVEMsU0FBUztJQUNUQyxLQUFLLEdBQUFGLElBQUEsQ0FBTEUsS0FBSztJQUNMQyxVQUFVLEdBQUFILElBQUEsQ0FBVkcsVUFBVTtJQUNWQyxJQUFJLEdBQUFKLElBQUEsQ0FBSkksSUFBSTtJQUNKQyxTQUFTLEdBQUFMLElBQUEsQ0FBVEssU0FBUztJQUNUQyxLQUFLLEdBQUFOLElBQUEsQ0FBTE0sS0FBSztJQUNMQyxVQUFVLEdBQUFQLElBQUEsQ0FBVk8sVUFBVTtFQUFBLG9CQUVWOUIsTUFBQSxZQUFBK0IsYUFBQSxDQUFBL0IsTUFBQSxZQUFBZ0MsUUFBQSxRQUNHUCxLQUFLLGdCQUNKekIsTUFBQSxZQUFBK0IsYUFBQSxDQUFDM0IsTUFBQSxXQUFLLEVBQUFJLFFBQUE7SUFBQ3lCLEVBQUUsRUFBRVQsU0FBUyxNQUFBVSxNQUFBLENBQU1WLFNBQVMsZUFBWVcsU0FBVTtJQUFDQyxPQUFPLEVBQUVaO0VBQVUsR0FBS0UsVUFBVSxHQUN6RkQsS0FBSyxDQUNBLEdBQ04sSUFBSSxFQUNQRSxJQUFJLGdCQUNIM0IsTUFBQSxZQUFBK0IsYUFBQSxDQUFDNUIsS0FBQSxXQUFJLEVBQUFLLFFBQUE7SUFBQ3lCLEVBQUUsRUFBRVQsU0FBUyxNQUFBVSxNQUFBLENBQU1WLFNBQVMsY0FBV1c7RUFBVSxHQUFLUCxTQUFTLEdBQ2xFRCxJQUFJLENBQ0EsR0FDTCxJQUFJLEVBQ1BFLEtBQUssSUFBSSxPQUFPQSxLQUFLLEtBQUssUUFBUSxnQkFDakM3QixNQUFBLFlBQUErQixhQUFBLENBQUMxQixhQUFBLFdBQVksRUFBQUcsUUFBQTtJQUFDeUIsRUFBRSxFQUFFVCxTQUFTLE1BQUFVLE1BQUEsQ0FBTVYsU0FBUyx1QkFBb0JXO0VBQVUsR0FBS0wsVUFBVSxHQUNwRkQsS0FBSyxDQUNPLEdBQ2IsSUFBSSxDQUNQO0FBQUEsQ0FDSjtBQUFDLElBQUFRLFFBQUEsR0FFYWYsVUFBVTtBQUFBZ0IsT0FBQSxjQUFBRCxRQUFBIn0=