"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _UseDevWarning = _interopRequireDefault(require("../../util/hooks/UseDevWarning"));
var _warnings = require("../../deprecated/warnings");
var _excluded = ["className", "lastReviewed", "nextReview"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var ReviewDate = function ReviewDate(_ref) {
  var className = _ref.className,
    lastReviewed = _ref.lastReviewed,
    nextReview = _ref.nextReview,
    rest = _objectWithoutProperties(_ref, _excluded);
  (0, _UseDevWarning["default"])(_warnings.NHSUKFrontendV5UpgradeWarnings.ReviewDateMovedToPattern);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-review-date', className)
  }, rest), /*#__PURE__*/_react["default"].createElement("p", {
    className: "nhsuk-body-s"
  }, lastReviewed ? "Page last reviewed: ".concat(lastReviewed) : null, lastReviewed && nextReview ? /*#__PURE__*/_react["default"].createElement("br", null) : null, nextReview ? "Next review due: ".concat(nextReview) : null));
};
var _default = ReviewDate;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX1VzZURldldhcm5pbmciLCJfd2FybmluZ3MiLCJfZXhjbHVkZWQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsIlJldmlld0RhdGUiLCJfcmVmIiwiY2xhc3NOYW1lIiwibGFzdFJldmlld2VkIiwibmV4dFJldmlldyIsInJlc3QiLCJ1c2VEZXZXYXJuaW5nIiwiTkhTVUtGcm9udGVuZFY1VXBncmFkZVdhcm5pbmdzIiwiUmV2aWV3RGF0ZU1vdmVkVG9QYXR0ZXJuIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZXMiLCJjb25jYXQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9yZXZpZXctZGF0ZS9SZXZpZXdEYXRlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgSFRNTFByb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgdXNlRGV2V2FybmluZyBmcm9tICcuLi8uLi91dGlsL2hvb2tzL1VzZURldldhcm5pbmcnO1xuaW1wb3J0IHsgTkhTVUtGcm9udGVuZFY1VXBncmFkZVdhcm5pbmdzIH0gZnJvbSAnLi4vLi4vZGVwcmVjYXRlZC93YXJuaW5ncyc7XG5cbmludGVyZmFjZSBSZXZpZXdEYXRlUHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+IHtcbiAgbGFzdFJldmlld2VkPzogc3RyaW5nO1xuICBuZXh0UmV2aWV3Pzogc3RyaW5nO1xufVxuXG5jb25zdCBSZXZpZXdEYXRlOiBSZWFjdC5GQzxSZXZpZXdEYXRlUHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBsYXN0UmV2aWV3ZWQsXG4gIG5leHRSZXZpZXcsXG4gIC4uLnJlc3Rcbn0pID0+IHtcbiAgdXNlRGV2V2FybmluZyhOSFNVS0Zyb250ZW5kVjVVcGdyYWRlV2FybmluZ3MuUmV2aWV3RGF0ZU1vdmVkVG9QYXR0ZXJuKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbmhzdWstcmV2aWV3LWRhdGUnLCBjbGFzc05hbWUpfSB7Li4ucmVzdH0+XG4gICAgICA8cCBjbGFzc05hbWU9XCJuaHN1ay1ib2R5LXNcIj5cbiAgICAgICAge2xhc3RSZXZpZXdlZCA/IGBQYWdlIGxhc3QgcmV2aWV3ZWQ6ICR7bGFzdFJldmlld2VkfWAgOiBudWxsfVxuICAgICAgICB7bGFzdFJldmlld2VkICYmIG5leHRSZXZpZXcgPyA8YnIgLz4gOiBudWxsfVxuICAgICAgICB7bmV4dFJldmlldyA/IGBOZXh0IHJldmlldyBkdWU6ICR7bmV4dFJldmlld31gIDogbnVsbH1cbiAgICAgIDwvcD5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJldmlld0RhdGU7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLGNBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFNBQUEsR0FBQUgsT0FBQTtBQUEy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