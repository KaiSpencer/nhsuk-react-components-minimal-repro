"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _HeadingLevel = _interopRequireDefault(require("../../../util/HeadingLevel"));
var _CardContext = _interopRequireDefault(require("../CardContext"));
var _excluded = ["className"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var CardHeading = function CardHeading(_ref) {
  var className = _ref.className,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useContext = (0, _react.useContext)(_CardContext["default"]),
    feature = _useContext.feature;
  return /*#__PURE__*/_react["default"].createElement(_HeadingLevel["default"], _extends({
    className: (0, _classnames["default"])('nhsuk-card__heading', {
      'nhsuk-card__heading--feature': feature
    }, className)
  }, rest));
};
CardHeading.defaultProps = {
  headingLevel: 'h2'
};
var _default = CardHeading;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfY2xhc3NuYW1lcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfSGVhZGluZ0xldmVsIiwiX0NhcmRDb250ZXh0IiwiX2V4Y2x1ZGVkIiwib2JqIiwiX19lc01vZHVsZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIl90eXBlb2YiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic291cmNlS2V5cyIsImtleXMiLCJDYXJkSGVhZGluZyIsIl9yZWYiLCJjbGFzc05hbWUiLCJyZXN0IiwiX3VzZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwiQ2FyZENvbnRleHQiLCJmZWF0dXJlIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZXMiLCJkZWZhdWx0UHJvcHMiLCJoZWFkaW5nTGV2ZWwiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9jYXJkL2NvbXBvbmVudHMvQ2FyZEhlYWRpbmcudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBIVE1MUHJvcHMsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBIZWFkaW5nTGV2ZWwsIHsgSGVhZGluZ0xldmVsVHlwZSB9IGZyb20gJy4uLy4uLy4uL3V0aWwvSGVhZGluZ0xldmVsJztcbmltcG9ydCBDYXJkQ29udGV4dCBmcm9tICcuLi9DYXJkQ29udGV4dCc7XG5cbmludGVyZmFjZSBDYXJkSGVhZGluZ1Byb3BzIGV4dGVuZHMgSFRNTFByb3BzPEhUTUxIZWFkaW5nRWxlbWVudD4ge1xuICBoZWFkaW5nTGV2ZWw/OiBIZWFkaW5nTGV2ZWxUeXBlO1xufVxuXG5jb25zdCBDYXJkSGVhZGluZzogUmVhY3QuRkM8Q2FyZEhlYWRpbmdQcm9wcz4gPSAoeyBjbGFzc05hbWUsIC4uLnJlc3QgfSkgPT4ge1xuICBjb25zdCB7IGZlYXR1cmUgfSA9IHVzZUNvbnRleHQoQ2FyZENvbnRleHQpO1xuICByZXR1cm4gKFxuICAgIDxIZWFkaW5nTGV2ZWxcbiAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICAgJ25oc3VrLWNhcmRfX2hlYWRpbmcnLFxuICAgICAgICB7ICduaHN1ay1jYXJkX19oZWFkaW5nLS1mZWF0dXJlJzogZmVhdHVyZSB9LFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICApfVxuICAgICAgey4uLnJlc3R9XG4gICAgLz5cbiAgKTtcbn07XG5cbkNhcmRIZWFkaW5nLmRlZmF1bHRQcm9wcyA9IHtcbiAgaGVhZGluZ0xldmVsOiAnaDInLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FyZEhlYWRpbmc7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSSxZQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFBeUMsSUFBQUssU0FBQTtBQUFBLFNBQUFILHVCQUFBSSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFBQSxTQUFBRSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQVYsd0JBQUFPLEdBQUEsRUFBQUcsV0FBQSxTQUFBQSxXQUFBLElBQUFILEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxhQUFBTyxPQUFBLENBQUFQLEdBQUEseUJBQUFBLEdBQUEsdUNBQUFBLEdBQUEsVUFBQVEsS0FBQSxHQUFBTix3QkFBQSxDQUFBQyxXQUFBLE9BQUFLLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFULEdBQUEsWUFBQVEsS0FBQSxDQUFBRSxHQUFBLENBQUFWLEdBQUEsU0FBQVcsTUFBQSxXQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxHQUFBLElBQUFoQixHQUFBLFFBQUFnQixHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFuQixHQUFBLEVBQUFnQixHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBZixHQUFBLEVBQUFnQixHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFoQixHQUFBLENBQUFnQixHQUFBLFNBQUFMLE1BQUEsY0FBQVgsR0FBQSxNQUFBUSxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBckIsR0FBQSxFQUFBVyxNQUFBLFlBQUFBLE1BQUE7QUFBQSxTQUFBVyxTQUFBLElBQUFBLFFBQUEsR0FBQVQsTUFBQSxDQUFBVSxNQUFBLEdBQUFWLE1BQUEsQ0FBQVUsTUFBQSxDQUFBQyxJQUFBLGVBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBLFVBQUFHLE1BQUEsR0FBQUYsU0FBQSxDQUFBRCxDQUFBLFlBQUFWLEdBQUEsSUFBQWEsTUFBQSxRQUFBaEIsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBVSxNQUFBLEVBQUFiLEdBQUEsS0FBQVMsTUFBQSxDQUFBVCxHQUFBLElBQUFhLE1BQUEsQ0FBQWIsR0FBQSxnQkFBQVMsTUFBQSxZQUFBSCxRQUFBLENBQUFRLEtBQUEsT0FBQUgsU0FBQTtBQUFBLFNBQUFJLHlCQUFBRixNQUFBLEVBQUFHLFFBQUEsUUFBQUgsTUFBQSx5QkFBQUosTUFBQSxHQUFBUSw2QkFBQSxDQUFBSixNQUFBLEVBQUFHLFFBQUEsT0FBQWhCLEdBQUEsRUFBQVUsQ0FBQSxNQUFBYixNQUFBLENBQUFxQixxQkFBQSxRQUFBQyxnQkFBQSxHQUFBdEIsTUFBQSxDQUFBcUIscUJBQUEsQ0FBQUwsTUFBQSxRQUFBSCxDQUFBLE1BQUFBLENBQUEsR0FBQVMsZ0JBQUEsQ0FBQVAsTUFBQSxFQUFBRixDQUFBLE1BQUFWLEdBQUEsR0FBQW1CLGdCQUFBLENBQUFULENBQUEsT0FBQU0sUUFBQSxDQUFBSSxPQUFBLENBQUFwQixHQUFBLHVCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQW9CLG9CQUFBLENBQUFsQixJQUFBLENBQUFVLE1BQUEsRUFBQWIsR0FBQSxhQUFBUyxNQUFBLENBQUFULEdBQUEsSUFBQWEsTUFBQSxDQUFBYixHQUFBLGNBQUFTLE1BQUE7QUFBQSxTQUFBUSw4QkFBQUosTUFBQSxFQUFBRyxRQUFBLFFBQUFILE1BQUEseUJBQUFKLE1BQUEsV0FBQWEsVUFBQSxHQUFBekIsTUFBQSxDQUFBMEIsSUFBQSxDQUFBVixNQUFBLE9BQUFiLEdBQUEsRUFBQVUsQ0FBQSxPQUFBQSxDQUFBLE1BQUFBLENBQUEsR0FBQVksVUFBQSxDQUFBVixNQUFBLEVBQUFGLENBQUEsTUFBQVYsR0FBQSxHQUFBc0IsVUFBQSxDQUFBWixDQUFBLE9BQUFNLFFBQUEsQ0FBQUksT0FBQSxDQUFBcEIsR0FBQSxrQkFBQVMsTUFBQSxDQUFBVCxHQUFBLElBQUFhLE1BQUEsQ0FBQWIsR0FBQSxZQUFBUyxNQUFBO0FBTXpDLElBQU1lLFdBQXVDLEdBQUcsU0FBMUNBLFdBQXVDQSxDQUFBQyxJQUFBLEVBQStCO0VBQUEsSUFBekJDLFNBQVMsR0FBQUQsSUFBQSxDQUFUQyxTQUFTO0lBQUtDLElBQUksR0FBQVosd0JBQUEsQ0FBQVUsSUFBQSxFQUFBMUMsU0FBQTtFQUNuRSxJQUFBNkMsV0FBQSxHQUFvQixJQUFBQyxpQkFBVSxFQUFDQyx1QkFBVyxDQUFDO0lBQW5DQyxPQUFPLEdBQUFILFdBQUEsQ0FBUEcsT0FBTztFQUNmLG9CQUNFdkQsTUFBQSxZQUFBd0QsYUFBQSxDQUFDbkQsYUFBQSxXQUFZLEVBQUF5QixRQUFBO0lBQ1hvQixTQUFTLEVBQUUsSUFBQU8sc0JBQVUsRUFDbkIscUJBQXFCLEVBQ3JCO01BQUUsOEJBQThCLEVBQUVGO0lBQVEsQ0FBQyxFQUMzQ0wsU0FBUztFQUNULEdBQ0VDLElBQUksRUFDUjtBQUVOLENBQUM7QUFFREgsV0FBVyxDQUFDVSxZQUFZLEdBQUc7RUFDekJDLFlBQVksRUFBRTtBQUNoQixDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUVhWixXQUFXO0FBQUFhLE9BQUEsY0FBQUQsUUFBQSJ9