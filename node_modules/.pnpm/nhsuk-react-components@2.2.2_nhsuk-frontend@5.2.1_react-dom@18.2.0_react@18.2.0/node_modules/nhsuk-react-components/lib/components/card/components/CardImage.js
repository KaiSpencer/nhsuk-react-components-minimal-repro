"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className", "alt"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var CardImage = function CardImage(_ref) {
  var className = _ref.className,
    alt = _ref.alt,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("img", _extends({
    className: (0, _classnames["default"])('nhsuk-card__img', className),
    alt: alt
  }, rest));
};
var _default = CardImage;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2V4Y2x1ZGVkIiwib2JqIiwiX19lc01vZHVsZSIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic291cmNlS2V5cyIsImtleXMiLCJDYXJkSW1hZ2UiLCJfcmVmIiwiY2xhc3NOYW1lIiwiYWx0IiwicmVzdCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWVzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvY2FyZC9jb21wb25lbnRzL0NhcmRJbWFnZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEhUTUxQcm9wcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbnRlcmZhY2UgQ2FyZEltYWdlUHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTEltYWdlRWxlbWVudD4ge1xuICAvLyBPdmVycmlkaW5nIHRoZSBkZWZhdWx0IGNyb3NzT3JpZ2luIHRoZSBkZWZhdWx0IGlzIGNyb3NzT3JpZ2luOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgLy8gd2hpY2ggY2F1c2VzIGEgdHlwZXNjcmlwdCBcImluY29tcGF0aWJsZSB0eXBlc1wiIGVycm9yLlxuICBjcm9zc09yaWdpbj86ICdhbm9ueW1vdXMnIHwgJ3VzZS1jcmVkZW50aWFscycgfCB1bmRlZmluZWQ7XG59XG5cbmNvbnN0IENhcmRJbWFnZTogUmVhY3QuRkM8Q2FyZEltYWdlUHJvcHM+ID0gKHsgY2xhc3NOYW1lLCBhbHQsIC4uLnJlc3QgfSkgPT4gKFxuICA8aW1nIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbmhzdWstY2FyZF9faW1nJywgY2xhc3NOYW1lKX0gYWx0PXthbHR9IHsuLi5yZXN0fSAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FyZEltYWdlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBb0MsSUFBQUUsU0FBQTtBQUFBLFNBQUFILHVCQUFBSSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFBQSxTQUFBRSxTQUFBLElBQUFBLFFBQUEsR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEdBQUFELE1BQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBLGVBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBLFVBQUFHLE1BQUEsR0FBQUYsU0FBQSxDQUFBRCxDQUFBLFlBQUFJLEdBQUEsSUFBQUQsTUFBQSxRQUFBUCxNQUFBLENBQUFTLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFKLE1BQUEsRUFBQUMsR0FBQSxLQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLGdCQUFBTCxNQUFBLFlBQUFKLFFBQUEsQ0FBQWEsS0FBQSxPQUFBUCxTQUFBO0FBQUEsU0FBQVEseUJBQUFOLE1BQUEsRUFBQU8sUUFBQSxRQUFBUCxNQUFBLHlCQUFBSixNQUFBLEdBQUFZLDZCQUFBLENBQUFSLE1BQUEsRUFBQU8sUUFBQSxPQUFBTixHQUFBLEVBQUFKLENBQUEsTUFBQUosTUFBQSxDQUFBZ0IscUJBQUEsUUFBQUMsZ0JBQUEsR0FBQWpCLE1BQUEsQ0FBQWdCLHFCQUFBLENBQUFULE1BQUEsUUFBQUgsQ0FBQSxNQUFBQSxDQUFBLEdBQUFhLGdCQUFBLENBQUFYLE1BQUEsRUFBQUYsQ0FBQSxNQUFBSSxHQUFBLEdBQUFTLGdCQUFBLENBQUFiLENBQUEsT0FBQVUsUUFBQSxDQUFBSSxPQUFBLENBQUFWLEdBQUEsdUJBQUFSLE1BQUEsQ0FBQVMsU0FBQSxDQUFBVSxvQkFBQSxDQUFBUixJQUFBLENBQUFKLE1BQUEsRUFBQUMsR0FBQSxhQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLGNBQUFMLE1BQUE7QUFBQSxTQUFBWSw4QkFBQVIsTUFBQSxFQUFBTyxRQUFBLFFBQUFQLE1BQUEseUJBQUFKLE1BQUEsV0FBQWlCLFVBQUEsR0FBQXBCLE1BQUEsQ0FBQXFCLElBQUEsQ0FBQWQsTUFBQSxPQUFBQyxHQUFBLEVBQUFKLENBQUEsT0FBQUEsQ0FBQSxNQUFBQSxDQUFBLEdBQUFnQixVQUFBLENBQUFkLE1BQUEsRUFBQUYsQ0FBQSxNQUFBSSxHQUFBLEdBQUFZLFVBQUEsQ0FBQWhCLENBQUEsT0FBQVUsUUFBQSxDQUFBSSxPQUFBLENBQUFWLEdBQUEsa0JBQUFMLE1BQUEsQ0FBQUssR0FBQSxJQUFBRCxNQUFBLENBQUFDLEdBQUEsWUFBQUwsTUFBQTtBQVFwQyxJQUFNbUIsU0FBbUMsR0FBRyxTQUF0Q0EsU0FBbUNBLENBQUFDLElBQUE7RUFBQSxJQUFNQyxTQUFTLEdBQUFELElBQUEsQ0FBVEMsU0FBUztJQUFFQyxHQUFHLEdBQUFGLElBQUEsQ0FBSEUsR0FBRztJQUFLQyxJQUFJLEdBQUFiLHdCQUFBLENBQUFVLElBQUEsRUFBQTNCLFNBQUE7RUFBQSxvQkFDcEVKLE1BQUEsWUFBQW1DLGFBQUEsUUFBQTVCLFFBQUE7SUFBS3lCLFNBQVMsRUFBRSxJQUFBSSxzQkFBVSxFQUFDLGlCQUFpQixFQUFFSixTQUFTLENBQUU7SUFBQ0MsR0FBRyxFQUFFQTtFQUFJLEdBQUtDLElBQUksRUFBSTtBQUFBLENBQ2pGO0FBQUMsSUFBQUcsUUFBQSxHQUVhUCxTQUFTO0FBQUFRLE9BQUEsY0FBQUQsUUFBQSJ9