"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _CardContext = _interopRequireDefault(require("./CardContext"));
var _CardContent = _interopRequireDefault(require("./components/CardContent"));
var _CardDescription = _interopRequireDefault(require("./components/CardDescription"));
var _CardImage = _interopRequireDefault(require("./components/CardImage"));
var _CardLink = _interopRequireDefault(require("./components/CardLink"));
var _CardHeading = _interopRequireDefault(require("./components/CardHeading"));
var _CardGroup = _interopRequireDefault(require("./components/CardGroup"));
var _CardGroupItem = _interopRequireDefault(require("./components/CardGroupItem"));
var _excluded = ["className", "clickable", "children", "feature"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Card = function Card(_ref) {
  var className = _ref.className,
    clickable = _ref.clickable,
    children = _ref.children,
    feature = _ref.feature,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-card', {
      'nhsuk-card--clickable': clickable
    }, {
      'nhsuk-card--feature': feature
    }, className)
  }, rest), /*#__PURE__*/_react["default"].createElement(_CardContext["default"].Provider, {
    value: {
      feature: Boolean(feature)
    }
  }, children));
};
Card.defaultProps = {
  feature: false
};
Card.Heading = _CardHeading["default"];
Card.Description = _CardDescription["default"];
Card.Image = _CardImage["default"];
Card.Link = _CardLink["default"];
Card.Content = _CardContent["default"];
Card.Group = _CardGroup["default"];
Card.GroupItem = _CardGroupItem["default"];
var _default = Card;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX0NhcmRDb250ZXh0IiwiX0NhcmRDb250ZW50IiwiX0NhcmREZXNjcmlwdGlvbiIsIl9DYXJkSW1hZ2UiLCJfQ2FyZExpbmsiLCJfQ2FyZEhlYWRpbmciLCJfQ2FyZEdyb3VwIiwiX0NhcmRHcm91cEl0ZW0iLCJfZXhjbHVkZWQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsIkNhcmQiLCJfcmVmIiwiY2xhc3NOYW1lIiwiY2xpY2thYmxlIiwiY2hpbGRyZW4iLCJmZWF0dXJlIiwicmVzdCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWVzIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsIkJvb2xlYW4iLCJkZWZhdWx0UHJvcHMiLCJIZWFkaW5nIiwiQ2FyZEhlYWRpbmciLCJEZXNjcmlwdGlvbiIsIkNhcmREZXNjcmlwdGlvbiIsIkltYWdlIiwiQ2FyZEltYWdlIiwiTGluayIsIkNhcmRMaW5rIiwiQ29udGVudCIsIkNhcmRDb250ZW50IiwiR3JvdXAiLCJDYXJkR3JvdXAiLCJHcm91cEl0ZW0iLCJDYXJkR3JvdXBJdGVtIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvY2FyZC9DYXJkLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgSFRNTFByb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgQ2FyZENvbnRleHQgZnJvbSAnLi9DYXJkQ29udGV4dCc7XG5pbXBvcnQgQ2FyZENvbnRlbnQgZnJvbSAnLi9jb21wb25lbnRzL0NhcmRDb250ZW50JztcbmltcG9ydCBDYXJkRGVzY3JpcHRpb24gZnJvbSAnLi9jb21wb25lbnRzL0NhcmREZXNjcmlwdGlvbic7XG5pbXBvcnQgQ2FyZEltYWdlIGZyb20gJy4vY29tcG9uZW50cy9DYXJkSW1hZ2UnO1xuaW1wb3J0IENhcmRMaW5rIGZyb20gJy4vY29tcG9uZW50cy9DYXJkTGluayc7XG5pbXBvcnQgQ2FyZEhlYWRpbmcgZnJvbSAnLi9jb21wb25lbnRzL0NhcmRIZWFkaW5nJztcbmltcG9ydCBDYXJkR3JvdXAgZnJvbSAnLi9jb21wb25lbnRzL0NhcmRHcm91cCc7XG5pbXBvcnQgQ2FyZEdyb3VwSXRlbSBmcm9tICcuL2NvbXBvbmVudHMvQ2FyZEdyb3VwSXRlbSc7XG5cbmludGVyZmFjZSBDYXJkUHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+IHtcbiAgY2xpY2thYmxlPzogYm9vbGVhbjtcbiAgZmVhdHVyZT86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBJQ2FyZCBleHRlbmRzIFJlYWN0LkZDPENhcmRQcm9wcz4ge1xuICBDb250ZW50OiB0eXBlb2YgQ2FyZENvbnRlbnQ7XG4gIERlc2NyaXB0aW9uOiB0eXBlb2YgQ2FyZERlc2NyaXB0aW9uO1xuICBJbWFnZTogdHlwZW9mIENhcmRJbWFnZTtcbiAgTGluazogdHlwZW9mIENhcmRMaW5rO1xuICBIZWFkaW5nOiB0eXBlb2YgQ2FyZEhlYWRpbmc7XG4gIEdyb3VwOiB0eXBlb2YgQ2FyZEdyb3VwO1xuICBHcm91cEl0ZW06IHR5cGVvZiBDYXJkR3JvdXBJdGVtO1xufVxuXG5jb25zdCBDYXJkOiBJQ2FyZCA9ICh7XG4gIGNsYXNzTmFtZSwgY2xpY2thYmxlLCBjaGlsZHJlbiwgZmVhdHVyZSwgLi4ucmVzdFxufSkgPT4gKFxuICA8ZGl2XG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgJ25oc3VrLWNhcmQnLFxuICAgICAgeyAnbmhzdWstY2FyZC0tY2xpY2thYmxlJzogY2xpY2thYmxlIH0sXG4gICAgICB7ICduaHN1ay1jYXJkLS1mZWF0dXJlJzogZmVhdHVyZSB9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICl9XG4gICAgey4uLnJlc3R9XG4gID5cbiAgICA8Q2FyZENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgZmVhdHVyZTogQm9vbGVhbihmZWF0dXJlKSB9fT57Y2hpbGRyZW59PC9DYXJkQ29udGV4dC5Qcm92aWRlcj5cbiAgPC9kaXY+XG4pO1xuXG5DYXJkLmRlZmF1bHRQcm9wcyA9IHtcbiAgZmVhdHVyZTogZmFsc2UsXG59O1xuXG5DYXJkLkhlYWRpbmcgPSBDYXJkSGVhZGluZztcbkNhcmQuRGVzY3JpcHRpb24gPSBDYXJkRGVzY3JpcHRpb247XG5DYXJkLkltYWdlID0gQ2FyZEltYWdlO1xuQ2FyZC5MaW5rID0gQ2FyZExpbms7XG5DYXJkLkNvbnRlbnQgPSBDYXJkQ29udGVudDtcbkNhcmQuR3JvdXAgPSBDYXJkR3JvdXA7XG5DYXJkLkdyb3VwSXRlbSA9IENhcmRHcm91cEl0ZW07XG5cbmV4cG9ydCBkZWZhdWx0IENhcmQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLFlBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFJLGdCQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxVQUFBLEdB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