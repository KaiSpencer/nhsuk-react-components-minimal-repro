"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className", "visuallyHiddenText", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var ErrorMessage = function ErrorMessage(_ref) {
  var className = _ref.className,
    visuallyHiddenText = _ref.visuallyHiddenText,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("span", _extends({
    className: (0, _classnames["default"])('nhsuk-error-message', className)
  }, rest), visuallyHiddenText !== false ? /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-u-visually-hidden"
  }, visuallyHiddenText) : null, children);
};
ErrorMessage.defaultProps = {
  visuallyHiddenText: 'Error: ',
  role: 'alert'
};
var _default = ErrorMessage;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2V4Y2x1ZGVkIiwib2JqIiwiX19lc01vZHVsZSIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic291cmNlS2V5cyIsImtleXMiLCJFcnJvck1lc3NhZ2UiLCJfcmVmIiwiY2xhc3NOYW1lIiwidmlzdWFsbHlIaWRkZW5UZXh0IiwiY2hpbGRyZW4iLCJyZXN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZXMiLCJkZWZhdWx0UHJvcHMiLCJyb2xlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZXJyb3ItbWVzc2FnZS9FcnJvck1lc3NhZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBIVE1MUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvck1lc3NhZ2VQcm9wcyBleHRlbmRzIEhUTUxQcm9wczxIVE1MU3BhbkVsZW1lbnQ+IHtcbiAgdmlzdWFsbHlIaWRkZW5UZXh0PzogZmFsc2UgfCBzdHJpbmc7XG59XG5cbmNvbnN0IEVycm9yTWVzc2FnZTogUmVhY3QuRkM8RXJyb3JNZXNzYWdlUHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICB2aXN1YWxseUhpZGRlblRleHQsXG4gIGNoaWxkcmVuLFxuICAuLi5yZXN0XG59KSA9PiAoXG4gIDxzcGFuIGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbmhzdWstZXJyb3ItbWVzc2FnZScsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fT5cbiAgICB7dmlzdWFsbHlIaWRkZW5UZXh0ICE9PSBmYWxzZSA/IChcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5oc3VrLXUtdmlzdWFsbHktaGlkZGVuXCI+e3Zpc3VhbGx5SGlkZGVuVGV4dH08L3NwYW4+XG4gICAgKSA6IG51bGx9XG4gICAge2NoaWxkcmVufVxuICA8L3NwYW4+XG4pO1xuXG5FcnJvck1lc3NhZ2UuZGVmYXVsdFByb3BzID0ge1xuICB2aXN1YWxseUhpZGRlblRleHQ6ICdFcnJvcjogJyxcbiAgcm9sZTogJ2FsZXJ0Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEVycm9yTWVzc2FnZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQW9DLElBQUFFLFNBQUE7QUFBQSxTQUFBSCx1QkFBQUksR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLEdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxZQUFBSSxHQUFBLElBQUFELE1BQUEsUUFBQVAsTUFBQSxDQUFBUyxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsS0FBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxnQkFBQUwsTUFBQSxZQUFBSixRQUFBLENBQUFhLEtBQUEsT0FBQVAsU0FBQTtBQUFBLFNBQUFRLHlCQUFBTixNQUFBLEVBQUFPLFFBQUEsUUFBQVAsTUFBQSx5QkFBQUosTUFBQSxHQUFBWSw2QkFBQSxDQUFBUixNQUFBLEVBQUFPLFFBQUEsT0FBQU4sR0FBQSxFQUFBSixDQUFBLE1BQUFKLE1BQUEsQ0FBQWdCLHFCQUFBLFFBQUFDLGdCQUFBLEdBQUFqQixNQUFBLENBQUFnQixxQkFBQSxDQUFBVCxNQUFBLFFBQUFILENBQUEsTUFBQUEsQ0FBQSxHQUFBYSxnQkFBQSxDQUFBWCxNQUFBLEVBQUFGLENBQUEsTUFBQUksR0FBQSxHQUFBUyxnQkFBQSxDQUFBYixDQUFBLE9BQUFVLFFBQUEsQ0FBQUksT0FBQSxDQUFBVixHQUFBLHVCQUFBUixNQUFBLENBQUFTLFNBQUEsQ0FBQVUsb0JBQUEsQ0FBQVIsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsYUFBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxjQUFBTCxNQUFBO0FBQUEsU0FBQVksOEJBQUFSLE1BQUEsRUFBQU8sUUFBQSxRQUFBUCxNQUFBLHlCQUFBSixNQUFBLFdBQUFpQixVQUFBLEdBQUFwQixNQUFBLENBQUFxQixJQUFBLENBQUFkLE1BQUEsT0FBQUMsR0FBQSxFQUFBSixDQUFBLE9BQUFBLENBQUEsTUFBQUEsQ0FBQSxHQUFBZ0IsVUFBQSxDQUFBZCxNQUFBLEVBQUFGLENBQUEsTUFBQUksR0FBQSxHQUFBWSxVQUFBLENBQUFoQixDQUFBLE9BQUFVLFFBQUEsQ0FBQUksT0FBQSxDQUFBVixHQUFBLGtCQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLFlBQUFMLE1BQUE7QUFNcEMsSUFBTW1CLFlBQXlDLEdBQUcsU0FBNUNBLFlBQXlDQSxDQUFBQyxJQUFBO0VBQUEsSUFDN0NDLFNBQVMsR0FBQUQsSUFBQSxDQUFUQyxTQUFTO0lBQ1RDLGtCQUFrQixHQUFBRixJQUFBLENBQWxCRSxrQkFBa0I7SUFDbEJDLFFBQVEsR0FBQUgsSUFBQSxDQUFSRyxRQUFRO0lBQ0xDLElBQUksR0FBQWQsd0JBQUEsQ0FBQVUsSUFBQSxFQUFBM0IsU0FBQTtFQUFBLG9CQUVQSixNQUFBLFlBQUFvQyxhQUFBLFNBQUE3QixRQUFBO0lBQU15QixTQUFTLEVBQUUsSUFBQUssc0JBQVUsRUFBQyxxQkFBcUIsRUFBRUwsU0FBUztFQUFFLEdBQUtHLElBQUksR0FDcEVGLGtCQUFrQixLQUFLLEtBQUssZ0JBQzNCakMsTUFBQSxZQUFBb0MsYUFBQTtJQUFNSixTQUFTLEVBQUM7RUFBeUIsR0FBRUMsa0JBQWtCLENBQVEsR0FDbkUsSUFBSSxFQUNQQyxRQUFRLENBQ0o7QUFBQSxDQUNSO0FBRURKLFlBQVksQ0FBQ1EsWUFBWSxHQUFHO0VBQzFCTCxrQkFBa0IsRUFBRSxTQUFTO0VBQzdCTSxJQUFJLEVBQUU7QUFDUixDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUVhVixZQUFZO0FBQUFXLE9BQUEsY0FBQUQsUUFBQSJ9