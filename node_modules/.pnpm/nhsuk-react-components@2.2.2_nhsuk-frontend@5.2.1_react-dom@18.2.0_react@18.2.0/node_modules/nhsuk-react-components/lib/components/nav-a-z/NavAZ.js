"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className", "children", "fullAlphabet", "removedLetters", "disabledLetters", "letters"],
  _excluded2 = ["className", "asElement"],
  _excluded3 = ["className"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var processLetters = function processLetters(children, fullAlphabet, removedLetters, disabledLetters, letters) {
  var letterMap = function letterMap(letter) {
    if (removedLetters && removedLetters.includes(letter)) {
      return null;
    }
    if (disabledLetters && disabledLetters.includes(letter)) {
      return /*#__PURE__*/_react["default"].createElement(DisabledItem, {
        key: letter
      }, letter);
    }
    return /*#__PURE__*/_react["default"].createElement(LinkItem, {
      key: letter,
      href: "#".concat(letter)
    }, letter);
  };
  if (children) {
    return children;
  }
  if (fullAlphabet) {
    return alphabet.split('').map(letterMap);
  }
  if (letters) {
    return letters.map(letterMap);
  }
  return null;
};
var NavAZ = function NavAZ(_ref) {
  var className = _ref.className,
    children = _ref.children,
    fullAlphabet = _ref.fullAlphabet,
    removedLetters = _ref.removedLetters,
    disabledLetters = _ref.disabledLetters,
    letters = _ref.letters,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("nav", _extends({
    className: (0, _classnames["default"])('nhsuk-nav-a-z', className)
  }, rest), /*#__PURE__*/_react["default"].createElement("ol", {
    className: "nhsuk-nav-a-z__list"
  }, processLetters(children, fullAlphabet, removedLetters, disabledLetters, letters)));
};
var LinkItem = function LinkItem(_ref2) {
  var className = _ref2.className,
    _ref2$asElement = _ref2.asElement,
    Component = _ref2$asElement === void 0 ? 'a' : _ref2$asElement,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/_react["default"].createElement("li", {
    className: "nhsuk-nav-a-z__item"
  }, /*#__PURE__*/_react["default"].createElement(Component, _extends({
    className: (0, _classnames["default"])('nhsuk-nav-a-z__link', className)
  }, rest)));
};
var DisabledItem = function DisabledItem(_ref3) {
  var className = _ref3.className,
    rest = _objectWithoutProperties(_ref3, _excluded3);
  return /*#__PURE__*/_react["default"].createElement("li", {
    className: "nhsuk-nav-a-z__item"
  }, /*#__PURE__*/_react["default"].createElement("span", _extends({
    className: (0, _classnames["default"])('nhsuk-nav-a-z__link--disabled', className)
  }, rest)));
};
NavAZ.LinkItem = LinkItem;
NavAZ.DisabledItem = DisabledItem;
var _default = NavAZ;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,