"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _HeadingLevel = _interopRequireDefault(require("../../util/HeadingLevel"));
var _excluded = ["className"],
  _excluded2 = ["className", "children", "visuallyHiddenText", "headingLevel", "role"],
  _excluded3 = ["className", "type", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var CareCardContext = /*#__PURE__*/(0, _react.createContext)('non-urgent');
var genHiddenText = function genHiddenText(cardType) {
  switch (cardType) {
    case 'non-urgent':
      return 'Non-urgent advice: ';
    case 'urgent':
      return 'Urgent advice: ';
    case 'immediate':
      return 'Immediate action required: ';
    default:
      return '';
  }
};
var CareCardContent = function CareCardContent(_ref) {
  var className = _ref.className,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-care-card__content', className)
  }, rest));
};
var CareCardHeading = function CareCardHeading(_ref2) {
  var className = _ref2.className,
    children = _ref2.children,
    visuallyHiddenText = _ref2.visuallyHiddenText,
    headingLevel = _ref2.headingLevel,
    role = _ref2.role,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  var cardType = (0, _react.useContext)(CareCardContext);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "nhsuk-care-card__heading-container"
  }, /*#__PURE__*/_react["default"].createElement(_HeadingLevel["default"], _extends({
    className: (0, _classnames["default"])('nhsuk-care-card__heading', className),
    headingLevel: headingLevel
  }, rest), /*#__PURE__*/_react["default"].createElement("span", {
    role: role
  }, visuallyHiddenText !== false ? /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-u-visually-hidden"
  }, visuallyHiddenText || genHiddenText(cardType)) : null, children)), /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-care-card__arrow",
    "aria-hidden": "true"
  }));
};
CareCardHeading.defaultProps = {
  role: 'text'
};
var CareCard = function CareCard(_ref3) {
  var className = _ref3.className,
    type = _ref3.type,
    children = _ref3.children,
    rest = _objectWithoutProperties(_ref3, _excluded3);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-care-card', "nhsuk-care-card--".concat(type), className)
  }, rest), /*#__PURE__*/_react["default"].createElement(CareCardContext.Provider, {
    value: type
  }, children));
};
CareCard.Content = CareCardContent;
CareCard.Heading = CareCardHeading;
var _default = CareCard;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,