"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireWildcard(require("react"));
var _TableContext = _interopRequireDefault(require("../TableContext"));
var _TableHelpers = require("../TableHelpers");
var _TableSectionContext = _interopRequireWildcard(require("../TableSectionContext"));
var _excluded = ["className", "children"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var TableRow = function TableRow(_ref) {
  var className = _ref.className,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  var section = (0, _react.useContext)(_TableSectionContext["default"]);
  var _useContext = (0, _react.useContext)(_TableContext["default"]),
    isResponsive = _useContext.isResponsive,
    headings = _useContext.headings,
    setHeadings = _useContext.setHeadings;
  (0, _react.useEffect)(function () {
    if (isResponsive && section === _TableSectionContext.TableSection.HEAD) {
      setHeadings((0, _TableHelpers.getHeadingsFromChildren)(children));
    }
  }, [isResponsive, section, children]);
  if (isResponsive && section === _TableSectionContext.TableSection.BODY) {
    var tableCells = _react["default"].Children.map(children, function (child, index) {
      if ((0, _TableHelpers.isTableCell)(child)) {
        return /*#__PURE__*/_react["default"].cloneElement(child, {
          _responsive: isResponsive,
          _responsiveHeading: "".concat(headings[index] || '', " ")
        });
      }
      return child;
    });
    return /*#__PURE__*/_react["default"].createElement("tr", _extends({
      className: (0, _classnames["default"])('nhsuk-table__row', className)
    }, rest), tableCells);
  }
  return /*#__PURE__*/_react["default"].createElement("tr", _extends({
    className: (0, _classnames["default"])('nhsuk-table__row', className)
  }, rest), children);
};
TableRow.displayName = 'Table.Row';
var _default = TableRow;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,