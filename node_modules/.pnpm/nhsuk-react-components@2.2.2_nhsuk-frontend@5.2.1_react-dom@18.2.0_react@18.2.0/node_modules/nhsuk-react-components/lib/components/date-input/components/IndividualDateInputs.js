"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YearInput = exports.MonthInput = exports.DayInput = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _Label = _interopRequireDefault(require("../../label/Label"));
var _DateInputContext = _interopRequireDefault(require("../DateInputContext"));
var _excluded = ["label", "labelProps", "inputType", "className", "id", "name", "onChange", "inputRef", "error", "value", "defaultValue"],
  _excluded2 = ["className"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var labels = {
  day: 'Day',
  month: 'Month',
  year: 'Year'
};
var IndividualDateInput = function IndividualDateInput(_ref) {
  var label = _ref.label,
    labelProps = _ref.labelProps,
    inputType = _ref.inputType,
    className = _ref.className,
    id = _ref.id,
    name = _ref.name,
    onChange = _ref.onChange,
    inputRef = _ref.inputRef,
    error = _ref.error,
    value = _ref.value,
    defaultValue = _ref.defaultValue,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useContext = (0, _react.useContext)(_DateInputContext["default"]),
    ctxId = _useContext.id,
    ctxName = _useContext.name,
    ctxError = _useContext.error,
    ctxValue = _useContext.value,
    ctxDefaultValue = _useContext.defaultValue,
    ctxHandleChange = _useContext.handleChange,
    registerRef = _useContext.registerRef;
  var _ref2 = labelProps || {},
    labelClassName = _ref2.className,
    restLabelProps = _objectWithoutProperties(_ref2, _excluded2);
  var inputID = id || "".concat(ctxId, "-").concat(inputType);
  var inputName = name || "".concat(ctxName, "-").concat(inputType);
  var inputValue = value !== undefined ? value : ctxValue === null || ctxValue === void 0 ? void 0 : ctxValue[inputType];
  var inputDefaultValue = defaultValue !== undefined ? defaultValue : ctxDefaultValue === null || ctxDefaultValue === void 0 ? void 0 : ctxDefaultValue[inputType];
  var handleChange = function handleChange(e) {
    e.persist();
    if (onChange) onChange(e);
    if (!e.isPropagationStopped()) {
      ctxHandleChange(inputType, e);
    }
  };
  var refCallback = function refCallback(ref) {
    registerRef(inputType, ref);
    if (inputRef) inputRef(ref);
  };
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "nhsuk-date-input__item"
  }, /*#__PURE__*/_react["default"].createElement("div", {
    className: "nhsuk-form-group"
  }, /*#__PURE__*/_react["default"].createElement(_Label["default"], _extends({
    className: (0, _classnames["default"])('nhsuk-date-input__label', labelClassName),
    id: "".concat(inputID, "--label"),
    htmlFor: inputID
  }, restLabelProps), label || labels[inputType]), /*#__PURE__*/_react["default"].createElement("input", _extends({
    className: (0, _classnames["default"])('nhsuk-input nhsuk-date-input__input', {
      'nhsuk-input--width-2': inputType === 'day' || inputType === 'month'
    }, {
      'nhsuk-input--width-4': inputType === 'year'
    }, {
      'nhsuk-input--error': error === undefined ? ctxError : error
    }, className),
    value: inputValue,
    defaultValue: inputDefaultValue,
    id: inputID,
    "aria-labelledby": restLabelProps.id || "".concat(inputID, "--label"),
    name: inputName,
    onChange: handleChange,
    ref: refCallback
  }, rest))));
};
IndividualDateInput.defaultProps = {
  pattern: '[0-9]*',
  inputMode: 'numeric',
  type: 'text'
};
var DayInput = function DayInput(props) {
  return /*#__PURE__*/_react["default"].createElement(IndividualDateInput, _extends({
    inputType: "day"
  }, props));
};
exports.DayInput = DayInput;
var MonthInput = function MonthInput(props) {
  return /*#__PURE__*/_react["default"].createElement(IndividualDateInput, _extends({
    inputType: "month"
  }, props));
};
exports.MonthInput = MonthInput;
var YearInput = function YearInput(props) {
  return /*#__PURE__*/_react["default"].createElement(IndividualDateInput, _extends({
    inputType: "year"
  }, props));
};
exports.YearInput = YearInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,