"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _IndividualDateInputs = require("./components/IndividualDateInputs");
var _FormGroup = _interopRequireDefault(require("../../util/FormGroup"));
var _DateInputContext = _interopRequireDefault(require("./DateInputContext"));
var _excluded = ["children", "onChange", "value", "defaultValue"],
  _excluded2 = ["className", "name", "id", "error", "autoSelectNext"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var DateInput = /*#__PURE__*/function (_PureComponent) {
  _inherits(DateInput, _PureComponent);
  var _super = _createSuper(DateInput);
  function DateInput(props) {
    var _props$value, _props$value2, _props$value3;
    var _this;
    _classCallCheck(this, DateInput);
    _this = _super.call(this, props);
    _this.handleSelectNext = function (inputType, value) {
      if (!_this.props.autoSelectNext) return;
      if (inputType === 'day' && value.length === 2 && _this.monthRef) {
        _this.monthRef.focus();
      } else if (inputType === 'month' && value.length === 2 && _this.yearRef) {
        _this.yearRef.focus();
      }
    };
    _this.handleChange = function (inputType, event) {
      _this.handleSelectNext(inputType, event.target.value);
      event.stopPropagation();
      _this.setState(function (state) {
        var newEventValue = _objectSpread(_objectSpread({}, state.values), {}, _defineProperty({}, inputType, event.target.value));
        if (_this.props.onChange) {
          var newEvent = _objectSpread(_objectSpread({}, event), {}, {
            target: _objectSpread(_objectSpread({}, event.target), {}, {
              value: newEventValue
            }),
            currentTarget: _objectSpread(_objectSpread({}, event.currentTarget), {}, {
              value: newEventValue
            })
          });
          _this.props.onChange(newEvent);
        }
        return {
          values: newEventValue
        };
      });
    };
    _this.registerRef = function (inputType, ref) {
      if (inputType === 'month') _this.monthRef = ref;
      if (inputType === 'year') _this.yearRef = ref;
    };
    _this.state = {
      values: {
        day: ((_props$value = props.value) === null || _props$value === void 0 ? void 0 : _props$value.day) || '',
        month: ((_props$value2 = props.value) === null || _props$value2 === void 0 ? void 0 : _props$value2.month) || '',
        year: ((_props$value3 = props.value) === null || _props$value3 === void 0 ? void 0 : _props$value3.year) || ''
      }
    };
    _this.monthRef = null;
    _this.yearRef = null;
    return _this;
  }
  _createClass(DateInput, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;
      if (this.props.value && prevProps.value !== this.props.value) {
        // This is the only way that we can update our internal state
        // when the value updates. We check if the value has changed first,
        // preventing an infinite loop.
        //
        // eslint-disable-next-line react/no-did-update-set-state
        this.setState(function (state) {
          if (!_this2.props.value) return state;
          var newState = _objectSpread({}, state);
          var _this2$props$value = _this2.props.value,
            day = _this2$props$value.day,
            month = _this2$props$value.month,
            year = _this2$props$value.year;
          if (day && day !== state.values.day) newState.values.day = day;
          if (month && month !== state.values.month) newState.values.month = month;
          if (year && year !== state.values.year) newState.values.year = year;
          return newState;
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;
      var _this$props = this.props,
        children = _this$props.children,
        onChange = _this$props.onChange,
        value = _this$props.value,
        defaultValue = _this$props.defaultValue,
        rest = _objectWithoutProperties(_this$props, _excluded);
      return /*#__PURE__*/_react["default"].createElement(_FormGroup["default"], _extends({
        inputType: "dateinput"
      }, rest), function (_ref) {
        var className = _ref.className,
          name = _ref.name,
          id = _ref.id,
          error = _ref.error,
          autoSelectNext = _ref.autoSelectNext,
          restRenderProps = _objectWithoutProperties(_ref, _excluded2);
        var contextValue = {
          id: id,
          name: name,
          error: error,
          value: value,
          defaultValue: defaultValue,
          handleChange: _this3.handleChange,
          registerRef: _this3.registerRef
        };
        return /*#__PURE__*/_react["default"].createElement("div", _extends({
          className: (0, _classnames["default"])('nhsuk-date-input', className)
        }, restRenderProps, {
          id: id
        }), /*#__PURE__*/_react["default"].createElement(_DateInputContext["default"].Provider, {
          value: contextValue
        }, children || /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(DateInput.Day, null), /*#__PURE__*/_react["default"].createElement(DateInput.Month, null), /*#__PURE__*/_react["default"].createElement(DateInput.Year, null))));
      });
    }
  }]);
  return DateInput;
}(_react.PureComponent);
DateInput.Day = _IndividualDateInputs.DayInput;
DateInput.Month = _IndividualDateInputs.MonthInput;
DateInput.Year = _IndividualDateInputs.YearInput;
var _default = DateInput;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,