"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className", "color"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Tag = function Tag(_ref) {
  var className = _ref.className,
    color = _ref.color,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("strong", _extends({
    className: (0, _classnames["default"])('nhsuk-tag', _defineProperty({}, "nhsuk-tag--".concat(color), color), className)
  }, rest));
};
var _default = Tag;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2V4Y2x1ZGVkIiwib2JqIiwiX19lc01vZHVsZSIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9kZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiVGFnIiwiX3JlZiIsImNsYXNzTmFtZSIsImNvbG9yIiwicmVzdCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWVzIiwiY29uY2F0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdGFnL1RhZy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEhUTUxQcm9wcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbnRlcmZhY2UgVGFnUHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTFNwYW5FbGVtZW50PiB7XG4gIGNvbG9yPzpcbiAgfCAnd2hpdGUnXG4gIHwgJ2dyZXknXG4gIHwgJ2dyZWVuJ1xuICB8ICdhcXVhLWdyZWVuJ1xuICB8ICdibHVlJ1xuICB8ICdwdXJwbGUnXG4gIHwgJ3BpbmsnXG4gIHwgJ3JlZCdcbiAgfCAnb3JhbmdlJ1xuICB8ICd5ZWxsb3cnO1xufVxuXG5jb25zdCBUYWc6IFJlYWN0LkZDPFRhZ1Byb3BzPiA9ICh7IGNsYXNzTmFtZSwgY29sb3IsIC4uLnJlc3QgfSkgPT4gKFxuICA8c3Ryb25nXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCduaHN1ay10YWcnLCB7IFtgbmhzdWstdGFnLS0ke2NvbG9yfWBdOiBjb2xvciB9LCBjbGFzc05hbWUpfVxuICAgIHsuLi5yZXN0fVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgVGFnO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQW9DLElBQUFFLFNBQUE7QUFBQSxTQUFBSCx1QkFBQUksR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLEdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxZQUFBSSxHQUFBLElBQUFELE1BQUEsUUFBQVAsTUFBQSxDQUFBUyxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsS0FBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1B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