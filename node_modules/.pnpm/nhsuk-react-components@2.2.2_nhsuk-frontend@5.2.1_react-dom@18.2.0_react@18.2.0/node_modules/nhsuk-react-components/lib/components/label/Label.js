"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className", "bold", "size", "isPageHeading"],
  _excluded2 = ["isPageHeading"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var BaseLabel = function BaseLabel(_ref) {
  var className = _ref.className,
    bold = _ref.bold,
    size = _ref.size,
    isPageHeading = _ref.isPageHeading,
    rest = _objectWithoutProperties(_ref, _excluded);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line jsx-a11y/label-has-associated-control
    _react["default"].createElement("label", _extends({
      className: (0, _classnames["default"])('nhsuk-label', {
        'nhsuk-label--s': bold && !size
      }, {
        'nhsuk-label--xl': isPageHeading && !size
      }, _defineProperty({}, "nhsuk-label--".concat(size), size), className)
    }, rest))
  );
};
var Label = function Label(_ref2) {
  var isPageHeading = _ref2.isPageHeading,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  if (isPageHeading) {
    return /*#__PURE__*/_react["default"].createElement("h1", {
      className: "nhsuk-label-wrapper"
    }, /*#__PURE__*/_react["default"].createElement(BaseLabel, _extends({
      isPageHeading: true
    }, rest)));
  }
  return /*#__PURE__*/_react["default"].createElement(BaseLabel, rest);
};
var _default = Label;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsIkJhc2VMYWJlbCIsIl9yZWYiLCJjbGFzc05hbWUiLCJib2xkIiwic2l6ZSIsImlzUGFnZUhlYWRpbmciLCJyZXN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZXMiLCJjb25jYXQiLCJMYWJlbCIsIl9yZWYyIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvbGFiZWwvTGFiZWwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBIVE1MUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IE5IU1VLU2l6ZSB9IGZyb20gJy4uLy4uL3V0aWwvdHlwZXMvTkhTVUtUeXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFiZWxQcm9wcyBleHRlbmRzIE9taXQ8SFRNTFByb3BzPEhUTUxMYWJlbEVsZW1lbnQ+LCAnc2l6ZSc+IHtcbiAgYm9sZD86IGJvb2xlYW47XG4gIGlzUGFnZUhlYWRpbmc/OiBib29sZWFuO1xuICBzaXplPzogTkhTVUtTaXplO1xufVxuXG5jb25zdCBCYXNlTGFiZWw6IFJlYWN0LkZDPExhYmVsUHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLCBib2xkLCBzaXplLCBpc1BhZ2VIZWFkaW5nLCAuLi5yZXN0XG59KSA9PiAoXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9sYWJlbC1oYXMtYXNzb2NpYXRlZC1jb250cm9sXG4gIDxsYWJlbFxuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICduaHN1ay1sYWJlbCcsXG4gICAgICB7ICduaHN1ay1sYWJlbC0tcyc6IGJvbGQgJiYgIXNpemUgfSxcbiAgICAgIHsgJ25oc3VrLWxhYmVsLS14bCc6IGlzUGFnZUhlYWRpbmcgJiYgIXNpemUgfSxcbiAgICAgIHsgW2BuaHN1ay1sYWJlbC0tJHtzaXplfWBdOiBzaXplIH0sXG4gICAgICBjbGFzc05hbWUsXG4gICAgKX1cbiAgICB7Li4ucmVzdH1cbiAgLz5cbik7XG5cbmNvbnN0IExhYmVsOiBSZWFjdC5GQzxMYWJlbFByb3BzPiA9ICh7IGlzUGFnZUhlYWRpbmcsIC4uLnJlc3QgfSkgPT4ge1xuICBpZiAoaXNQYWdlSGVhZGluZykge1xuICAgIHJldHVybiAoXG4gICAgICA8aDEgY2xhc3NOYW1lPVwibmhzdWstbGFiZWwtd3JhcHBlclwiPlxuICAgICAgICA8QmFzZUxhYmVsIGlzUGFnZUhlYWRpbmcgey4uLnJlc3R9IC8+XG4gICAgICA8L2gxPlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIDxCYXNlTGFiZWwgey4uLnJlc3R9IC8+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGFiZWw7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBb0MsSUFBQUUsU0FBQTtFQUFBQyxVQUFBO0FBQUEsU0FBQUosdUJBQUFLLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQUFBLFNBQUFFLFNBQUEsSUFBQUEsUUFBQSxHQUFBQyxNQUFBLENBQUFDLE1BQUEsR0FBQUQsTUFBQSxDQUFBQyxNQUFBLENBQUFDLElBQUEsZUFBQUMsTUFBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQUFGLENBQUEsVUFBQUcsTUFBQSxHQUFBRixTQUFBLENBQUFELENBQUEsWUFBQUksR0FBQSxJQUFBRCxNQUFBLFFBQUFQLE1BQUEsQ0FBQVMsU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQUosTUFBQSxFQUFBQyxHQUFBLEtBQUFMLE1BQUEsQ0FBQUssR0FBQSxJQUFBRCxNQUFBLENBQUFDLEdBQUEsZ0JBQUFMLE1BQUEsWUFBQUosUUFBQSxDQUFBYSxLQUFBLE9BQUFQLFNBQUE7QUFBQSxTQUFBUSxnQkFBQWhCLEdBQUEsRUFBQVcsR0FBQSxFQUFBTSxLQUFBLElBQUFOLEdBQUEsR0FBQU8sY0FBQSxDQUFBUCxHQUFBLE9BQUFBLEdBQUEsSUFBQVgsR0FBQSxJQUFBRyxNQUFBLENBQUFnQixjQUFBLENBQUFuQixHQUFBLEVBQUFXLEdBQUEsSUFBQU0sS0FBQSxFQUFBQSxLQUFBLEVBQUFHLFVBQUEsUUFBQUMsWUFBQSxRQUFBQyxRQUFBLG9CQUFBdEIsR0FBQSxDQUFBVyxHQUFBLElBQUFNLEtBQUEsV0FBQWpCLEdBQUE7QUFBQSxTQUFBa0IsZUFB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