"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _FormGroup = _interopRequireDefault(require("../../util/FormGroup"));
var _excluded = ["width", "className", "error", "inputRef"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Input = function Input(props) {
  return /*#__PURE__*/_react["default"].createElement(_FormGroup["default"], _extends({}, props, {
    inputType: "input"
  }), function (_ref) {
    var width = _ref.width,
      className = _ref.className,
      error = _ref.error,
      inputRef = _ref.inputRef,
      rest = _objectWithoutProperties(_ref, _excluded);
    return /*#__PURE__*/_react["default"].createElement("input", _extends({
      className: (0, _classnames["default"])('nhsuk-input', _defineProperty({}, "nhsuk-input--width-".concat(width), width), {
        'nhsuk-input--error': error
      }, className),
      ref: inputRef
    }, rest));
  });
};
Input.defaultProps = {
  type: 'text'
};
var _default = Input;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX0Zvcm1Hcm91cCIsIl9leGNsdWRlZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJfdHlwZW9mIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsIklucHV0IiwicHJvcHMiLCJjcmVhdGVFbGVtZW50IiwiaW5wdXRUeXBlIiwiX3JlZiIsIndpZHRoIiwiY2xhc3NOYW1lIiwiZXJyb3IiLCJpbnB1dFJlZiIsInJlc3QiLCJjbGFzc05hbWVzIiwiY29uY2F0IiwicmVmIiwiZGVmYXVsdFByb3BzIiwidHlwZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL2lucHV0L0lucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgSFRNTFByb3BzLCBNdXRhYmxlUmVmT2JqZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJy4uLy4uL3V0aWwvRm9ybUdyb3VwJztcbmltcG9ydCB7IElucHV0V2lkdGggfSBmcm9tICcuLi8uLi91dGlsL3R5cGVzL05IU1VLVHlwZXMnO1xuaW1wb3J0IHsgRm9ybUVsZW1lbnRQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWwvdHlwZXMvRm9ybVR5cGVzJztcblxuaW50ZXJmYWNlIElucHV0UHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTElucHV0RWxlbWVudD4sIEZvcm1FbGVtZW50UHJvcHMge1xuICBpbnB1dFJlZj86IE11dGFibGVSZWZPYmplY3Q8SFRNTElucHV0RWxlbWVudCB8IG51bGw+O1xuICB3aWR0aD86IElucHV0V2lkdGg7XG4gIGRpc2FibGVFcnJvckxpbmU/OiBib29sZWFuO1xufVxuXG5jb25zdCBJbnB1dDogUmVhY3QuRkM8SW5wdXRQcm9wcz4gPSAocHJvcHMpID0+IChcbiAgPEZvcm1Hcm91cDxJbnB1dFByb3BzPiB7Li4ucHJvcHN9IGlucHV0VHlwZT1cImlucHV0XCI+XG4gICAgeyh7XG4gICAgICB3aWR0aCwgY2xhc3NOYW1lLCBlcnJvciwgaW5wdXRSZWYsIC4uLnJlc3RcbiAgICB9KSA9PiAoXG4gICAgICA8aW5wdXRcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgICAgICduaHN1ay1pbnB1dCcsXG4gICAgICAgICAgeyBbYG5oc3VrLWlucHV0LS13aWR0aC0ke3dpZHRofWBdOiB3aWR0aCB9LFxuICAgICAgICAgIHsgJ25oc3VrLWlucHV0LS1lcnJvcic6IGVycm9yIH0sXG4gICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICApfVxuICAgICAgICByZWY9e2lucHV0UmVmfVxuICAgICAgICB7Li4ucmVzdH1cbiAgICAgIC8+XG4gICAgKX1cbiAgPC9Gb3JtR3JvdXA+XG4pO1xuXG5JbnB1dC5kZWZhdWx0UHJvcHMgPSB7XG4gIHR5cGU6ICd0ZXh0Jyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IElucHV0O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQTZDLElBQUFHLFNBQUE7QUFBQSxTQUFBSix1QkFBQUssR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLEdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxZQUFBSSxHQUFBLElBQUFELE1BQUEsUUFBQVAsTUFBQSxDQUFBUyxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsS0FBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxnQkFBQUwsTUFBQSxZQUFBSixRQUFBLENBQUFhLEtBQUEsT0FBQVAsU0FBQTtBQUFBLFNBQUFRLGdCQUFBaEIsR0FBQSxFQUFBVyxHQUFBLEVBQUFNLEtBQUEsSUFBQU4sR0FBQSxHQUFBTyxjQUFBLENBQUFQLEdBQUEsT0FBQUEsR0FBQSxJQUFBWCxHQUFBLElBQUFHLE1BQUEsQ0FBQWdCLGNBQUEsQ0FBQW5CLEdBQUEsRUFBQVcsR0FBQSxJQUFBTSxLQUFBLEVBQUFBLEtBQUEsRUFBQUcsVUFBQSxRQUFBQyxZQUFBLFFBQUFDLFFBQUEsb0JBQUF0QixHQUFBLENBQUFX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