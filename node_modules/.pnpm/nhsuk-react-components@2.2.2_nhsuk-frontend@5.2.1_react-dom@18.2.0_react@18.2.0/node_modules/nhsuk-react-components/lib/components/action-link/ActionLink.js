"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _icons = require("../icons");
var _excluded = ["children", "asElement", "className"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var ActionLink = function ActionLink(_ref) {
  var children = _ref.children,
    _ref$asElement = _ref.asElement,
    Component = _ref$asElement === void 0 ? 'a' : _ref$asElement,
    className = _ref.className,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "nhsuk-action-link"
  }, /*#__PURE__*/_react["default"].createElement(Component, _extends({
    className: (0, _classnames["default"])('nhsuk-action-link__link', className)
  }, rest), /*#__PURE__*/_react["default"].createElement(_icons.ArrowRightCircle, null), /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-action-link__text"
  }, children)));
};
var _default = ActionLink;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2ljb25zIiwiX2V4Y2x1ZGVkIiwib2JqIiwiX19lc01vZHVsZSIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic291cmNlS2V5cyIsImtleXMiLCJBY3Rpb25MaW5rIiwiX3JlZiIsImNoaWxkcmVuIiwiX3JlZiRhc0VsZW1lbnQiLCJhc0VsZW1lbnQiLCJDb21wb25lbnQiLCJjbGFzc05hbWUiLCJyZXN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZXMiLCJBcnJvd1JpZ2h0Q2lyY2xlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvYWN0aW9uLWxpbmsvQWN0aW9uTGluay50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgQXJyb3dSaWdodENpcmNsZSB9IGZyb20gJy4uL2ljb25zJztcbmltcG9ydCB0eXBlIHsgQXNFbGVtZW50TGluayB9IGZyb20gJy4uLy4uL3V0aWwvdHlwZXMvTGlua1R5cGVzJztcblxuY29uc3QgQWN0aW9uTGluazogUmVhY3QuRkM8QXNFbGVtZW50TGluazxIVE1MQW5jaG9yRWxlbWVudD4+ID0gKHtcbiAgY2hpbGRyZW4sXG4gIGFzRWxlbWVudDogQ29tcG9uZW50ID0gJ2EnLFxuICBjbGFzc05hbWUsXG4gIC4uLnJlc3Rcbn0pID0+IChcbiAgPGRpdiBjbGFzc05hbWU9XCJuaHN1ay1hY3Rpb24tbGlua1wiPlxuICAgIDxDb21wb25lbnQgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCduaHN1ay1hY3Rpb24tbGlua19fbGluaycsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fT5cbiAgICAgIDxBcnJvd1JpZ2h0Q2lyY2xlIC8+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJuaHN1ay1hY3Rpb24tbGlua19fdGV4dFwiPntjaGlsZHJlbn08L3NwYW4+XG4gICAgPC9Db21wb25lbnQ+XG4gIDwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQWN0aW9uTGluaztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQTRDLElBQUFHLFNBQUE7QUFBQSxTQUFBSix1QkFBQUssR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLEdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxZQUFBSSxHQUFBLElBQUFELE1BQUEsUUFBQVAsTUFBQSxDQUFBUyxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsS0FBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxnQkFBQUwsTUFBQSxZQUFBSixRQUFBLENBQUFhLEtBQUEsT0FBQVAsU0FBQTtBQUFBLFNBQUFRLHlCQUFBTixNQUFBLEVBQUFPLFFBQUEsUUFBQVAsTUFBQSx5QkFBQUosTUFBQSxHQUFBWSw2QkFBQSxDQUFBUixNQUFBLEVBQUFPLFFBQUEsT0FBQU4sR0FBQSxFQUFBSixDQUFBLE1BQUFKLE1BQUEsQ0FBQWdCLHFCQUFBLFFBQUFDLGdCQUFBLEdBQUFqQixNQUFBLENBQUFnQixxQkFBQSxDQUFBVCxNQUFBLFFBQUFILENBQUEsTUFBQUEsQ0FBQSxHQUFBYSxnQkFBQSxDQUFBWCxNQUFBLEVBQUFGLENBQUEsTUFBQUksR0FBQSxHQUFBUyxnQkFBQSxDQUFBYixDQUFBLE9BQUFVLFFBQUEsQ0FBQUksT0FBQSxDQUFBVixHQUFBLHVCQUFBUixNQUFBLENBQUFTLFNBQUEsQ0FBQVUsb0JBQUEsQ0FBQVIsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsYUFBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxjQUFBTCxNQUFBO0FBQUEsU0FBQVksOEJBQUFSLE1BQUEsRUFBQU8sUUFBQSxRQUFBUCxNQUFBLHlCQUFBSixNQUFBLFdBQUFpQixVQUFBLEdBQUFwQixNQUFBLENBQUFxQixJQUFBLENBQUFkLE1BQUEsT0FBQUMsR0FBQSxFQUFBSixDQUFBLE9BQUFBLENBQUEsTUFBQUEsQ0FBQSxHQUFBZ0IsVUFBQSxDQUFBZCxNQUFBLEVBQUFGLENBQUEsTUFBQUksR0FBQSxHQUFBWSxVQUFBLENBQUFoQixDQUFBLE9BQUFVLFFBQUEsQ0FBQUksT0FBQSxDQUFBVixHQUFBLGtCQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLFlBQUFMLE1BQUE7QUFHNUMsSUFBTW1CLFVBQXNELEdBQUcsU0FBekRBLFVBQXNEQSxDQUFBQyxJQUFBO0VBQUEsSUFDMURDLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQUFDLGNBQUEsR0FBQUYsSUFBQSxDQUNSRyxTQUFTO0lBQUVDLFNBQVMsR0FBQUYsY0FBQSxjQUFHLEdBQUcsR0FBQUEsY0FBQTtJQUMxQkcsU0FBUyxHQUFBTCxJQUFBLENBQVRLLFNBQVM7SUFDTkMsSUFBSSxHQUFBaEIsd0JBQUEsQ0FBQVUsSUFBQSxFQUFBM0IsU0FBQTtFQUFBLG9CQUVQTCxNQUFBLFlBQUF1QyxhQUFBO0lBQUtGLFNBQVMsRUFBQztFQUFtQixnQkFDaENyQyxNQUFBLFlBQUF1QyxhQUFBLENBQUNILFNBQVMsRUFBQTVCLFFBQUE7SUFBQzZCLFNBQVMsRUFBRSxJQUFBRyxzQkFBVSxFQUFDLHlCQUF5QixFQUFFSCxTQUFTO0VBQUUsR0FBS0MsSUFBSSxnQkFDOUV0QyxNQUFBLFlBQUF1QyxhQUFBLENBQUNuQyxNQUFBLENBQUFxQyxnQkFBZ0IsT0FBRyxlQUNwQnpDLE1BQUEsWUFBQXVDLGFBQUE7SUFBTUYsU0FBUyxFQUFDO0VBQXlCLEdBQUVKLFFBQVEsQ0FBUSxDQUNqRCxDQUNSO0FBQUEsQ0FDUDtBQUFDLElBQUFTLFFBQUEsR0FFYVgsVUFBVTtBQUFBWSxPQUFBLGNBQUFELFFBQUEifQ==