"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _RadioContext = require("./RadioContext");
var _FormGroup = _interopRequireDefault(require("../../util/FormGroup"));
var _Divider = _interopRequireDefault(require("./components/Divider"));
var _Radio = _interopRequireDefault(require("./components/Radio"));
var _RandomID = require("../../util/RandomID");
var _excluded = ["children"],
  _excluded2 = ["className", "inline", "name", "id", "error"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Radios = /*#__PURE__*/function (_PureComponent) {
  _inherits(Radios, _PureComponent);
  var _super = _createSuper(Radios);
  function Radios(props) {
    var _this;
    _classCallCheck(this, Radios);
    _this = _super.call(this, props);
    _this.radioCount = 0;
    _this.radioReferences = [];
    _this.radioIds = {};
    _this.getRadioId = function (id, reference) {
      var idPrefix = _this.props.idPrefix;
      if (reference in _this.radioIds) {
        return _this.radioIds[reference];
      }
      _this.radioCount += 1;
      _this.radioIds[reference] = "".concat(idPrefix || id, "-").concat(_this.radioCount);
      return _this.radioIds[reference];
    };
    _this.leaseReference = function () {
      var reference = (0, _RandomID.generateRandomName)();
      if (_this.radioReferences.includes(reference)) {
        return _this.leaseReference();
      }
      _this.radioReferences.push(reference);
      return reference;
    };
    _this.unleaseReference = function (reference) {
      _this.radioReferences = _this.radioReferences.filter(function (ref) {
        return ref !== reference;
      });
    };
    _this.setConditional = function (radioReference, hasConditional) {
      _this.setState(function (state) {
        var currentHasConditional = state.conditionalRadios.includes(radioReference);
        if (currentHasConditional && hasConditional === false) {
          return _objectSpread(_objectSpread({}, state), {}, {
            conditionalRadios: state.conditionalRadios.filter(function (ref) {
              return ref !== radioReference;
            })
          });
        }
        if (!currentHasConditional && hasConditional === true) {
          return _objectSpread(_objectSpread({}, state), {}, {
            conditionalRadios: [].concat(_toConsumableArray(state.conditionalRadios), [radioReference])
          });
        }
        return state;
      });
    };
    _this.setSelected = function (radioReference) {
      _this.setState({
        selectedRadio: radioReference
      });
    };
    _this.resetRadioIds = function () {
      _this.radioCount = 0;
      _this.radioIds = {};
    };
    _this.state = {
      conditionalRadios: [],
      selectedRadio: ''
    };
    return _this;
  }
  _createClass(Radios, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props = this.props,
        children = _this$props.children,
        rest = _objectWithoutProperties(_this$props, _excluded);
      return /*#__PURE__*/_react["default"].createElement(_FormGroup["default"], _extends({
        inputType: "radios"
      }, rest), function (_ref) {
        var className = _ref.className,
          inline = _ref.inline,
          name = _ref.name,
          id = _ref.id,
          error = _ref.error,
          restRenderProps = _objectWithoutProperties(_ref, _excluded2);
        _this2.resetRadioIds();
        var contextValue = {
          getRadioId: function getRadioId(reference) {
            return _this2.getRadioId(id, reference);
          },
          selectedRadio: _this2.state.selectedRadio,
          setConditional: _this2.setConditional,
          setSelected: _this2.setSelected,
          leaseReference: _this2.leaseReference,
          unleaseReference: _this2.unleaseReference,
          name: name
        };
        var containsConditional = _this2.state.conditionalRadios.length > 0;
        return /*#__PURE__*/_react["default"].createElement("div", _extends({
          className: (0, _classnames["default"])('nhsuk-radios', {
            'nhsuk-radios--inline': inline
          }, {
            'nhsuk-radios--conditional': containsConditional
          }, className),
          id: id
        }, restRenderProps), /*#__PURE__*/_react["default"].createElement(_RadioContext.RadiosContext.Provider, {
          value: contextValue
        }, children));
      });
    }
  }]);
  return Radios;
}(_react.PureComponent);
Radios.Divider = _Divider["default"];
Radios.Radio = _Radio["default"];
var _default = Radios;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,