"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className", "expander"],
  _excluded2 = ["className", "children"],
  _excluded3 = ["className"],
  _excluded4 = ["className"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
// TODO: Check if standard NHS.UK polyfill "details.polyfill.js" is required
var Details = function Details(_ref) {
  var className = _ref.className,
    expander = _ref.expander,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("details", _extends({
    className: (0, _classnames["default"])('nhsuk-details', {
      'nhsuk-expander': expander
    }, className)
  }, rest));
};
var DetailsSummary = function DetailsSummary(_ref2) {
  var className = _ref2.className,
    children = _ref2.children,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/_react["default"].createElement("summary", _extends({
    className: (0, _classnames["default"])('nhsuk-details__summary', className)
  }, rest), /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-details__summary-text"
  }, children));
};
var DetailsText = function DetailsText(_ref3) {
  var className = _ref3.className,
    rest = _objectWithoutProperties(_ref3, _excluded3);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-details__text', className)
  }, rest));
};
var ExpanderGroup = function ExpanderGroup(_ref4) {
  var className = _ref4.className,
    rest = _objectWithoutProperties(_ref4, _excluded4);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-expander-group', className)
  }, rest));
};
Details.Summary = DetailsSummary;
Details.Text = DetailsText;
Details.ExpanderGroup = ExpanderGroup;
var _default = Details;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIl9leGNsdWRlZDMiLCJfZXhjbHVkZWQ0Iiwib2JqIiwiX19lc01vZHVsZSIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic291cmNlS2V5cyIsImtleXMiLCJEZXRhaWxzIiwiX3JlZiIsImNsYXNzTmFtZSIsImV4cGFuZGVyIiwicmVzdCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWVzIiwiRGV0YWlsc1N1bW1hcnkiLCJfcmVmMiIsImNoaWxkcmVuIiwiRGV0YWlsc1RleHQiLCJfcmVmMyIsIkV4cGFuZGVyR3JvdXAiLCJfcmVmNCIsIlN1bW1hcnkiLCJUZXh0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvZGV0YWlscy9EZXRhaWxzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgSFRNTFByb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmludGVyZmFjZSBEZXRhaWxzUHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTERldGFpbHNFbGVtZW50PiB7XG4gIGV4cGFuZGVyPzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIERldGFpbHMgZXh0ZW5kcyBSZWFjdC5GQzxEZXRhaWxzUHJvcHM+IHtcbiAgU3VtbWFyeTogUmVhY3QuRkM8SFRNTFByb3BzPEhUTUxEaXZFbGVtZW50Pj47XG4gIFRleHQ6IFJlYWN0LkZDPEhUTUxQcm9wczxIVE1MRGl2RWxlbWVudD4+O1xuICBFeHBhbmRlckdyb3VwOiBSZWFjdC5GQzxIVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+Pjtcbn1cblxuLy8gVE9ETzogQ2hlY2sgaWYgc3RhbmRhcmQgTkhTLlVLIHBvbHlmaWxsIFwiZGV0YWlscy5wb2x5ZmlsbC5qc1wiIGlzIHJlcXVpcmVkXG5jb25zdCBEZXRhaWxzOiBEZXRhaWxzID0gKHsgY2xhc3NOYW1lLCBleHBhbmRlciwgLi4ucmVzdCB9KSA9PiAoXG4gIDxkZXRhaWxzXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCduaHN1ay1kZXRhaWxzJywgeyAnbmhzdWstZXhwYW5kZXInOiBleHBhbmRlciB9LCBjbGFzc05hbWUpfVxuICAgIHsuLi5yZXN0fVxuICAvPlxuKTtcblxuY29uc3QgRGV0YWlsc1N1bW1hcnk6IFJlYWN0LkZDPEhUTUxQcm9wczxIVE1MRGl2RWxlbWVudD4+ID0gKHsgY2xhc3NOYW1lLCBjaGlsZHJlbiwgLi4ucmVzdCB9KSA9PiAoXG4gIDxzdW1tYXJ5IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbmhzdWstZGV0YWlsc19fc3VtbWFyeScsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fT5cbiAgICA8c3BhbiBjbGFzc05hbWU9XCJuaHN1ay1kZXRhaWxzX19zdW1tYXJ5LXRleHRcIj57Y2hpbGRyZW59PC9zcGFuPlxuICA8L3N1bW1hcnk+XG4pO1xuXG5jb25zdCBEZXRhaWxzVGV4dDogUmVhY3QuRkM8SFRNTFByb3BzPEhUTUxEaXZFbGVtZW50Pj4gPSAoeyBjbGFzc05hbWUsIC4uLnJlc3QgfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbmhzdWstZGV0YWlsc19fdGV4dCcsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fSAvPlxuKTtcblxuY29uc3QgRXhwYW5kZXJHcm91cDogUmVhY3QuRkM8SFRNTFByb3BzPEhUTUxEaXZFbGVtZW50Pj4gPSAoeyBjbGFzc05hbWUsIC4uLnJlc3QgfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbmhzdWstZXhwYW5kZXItZ3JvdXAnLCBjbGFzc05hbWUpfSB7Li4ucmVzdH0gLz5cbik7XG5cbkRldGFpbHMuU3VtbWFyeSA9IERldGFpbHNTdW1tYXJ5O1xuRGV0YWlscy5UZXh0ID0gRGV0YWlsc1RleHQ7XG5EZXRhaWxzLkV4cGFuZGVyR3JvdXAgPSBFeHBhbmRlckdyb3VwO1xuXG5leHBvcnQgZGVmYXVsdCBEZXRhaWxzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBb0MsSUFBQUUsU0FBQTtFQUFBQyxVQUFBO0VBQUFDLFVBQUE7RUFBQUMsVUFBQTtBQUFBLFNBQUFOLHVCQUFBTyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFBQSxTQUFBRSxTQUFBLElBQUFBLFFBQUEsR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEdBQUFELE1BQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBLGVBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxFQUFBRixDQUFBLFVBQUFHLE1BQUEsR0FBQUYsU0FBQSxDQUFBRCxDQUFBLFlBQUFJLEdBQUEsSUFBQUQsTUFBQSxRQUFBUCxNQUFBLENBQUFTLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFKLE1BQUEsRUFBQUMsR0FBQSxLQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLGdCQUFBTCxNQUFBLFlBQUFKLFFBQUEsQ0FBQWEsS0FB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