"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className"],
  _excluded2 = ["className"],
  _excluded3 = ["className"],
  _excluded4 = ["className"],
  _excluded5 = ["className", "noBorder"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var SummaryListRow = function SummaryListRow(_ref) {
  var className = _ref.className,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-summary-list__row', className)
  }, rest));
};
var SummaryListKey = function SummaryListKey(_ref2) {
  var className = _ref2.className,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/_react["default"].createElement("dt", _extends({
    className: (0, _classnames["default"])('nhsuk-summary-list__key', className)
  }, rest));
};
var SummaryListValue = function SummaryListValue(_ref3) {
  var className = _ref3.className,
    rest = _objectWithoutProperties(_ref3, _excluded3);
  return /*#__PURE__*/_react["default"].createElement("dd", _extends({
    className: (0, _classnames["default"])('nhsuk-summary-list__value', className)
  }, rest));
};
var SummaryListActions = function SummaryListActions(_ref4) {
  var className = _ref4.className,
    rest = _objectWithoutProperties(_ref4, _excluded4);
  return /*#__PURE__*/_react["default"].createElement("dd", _extends({
    className: (0, _classnames["default"])('nhsuk-summary-list__actions', className)
  }, rest));
};
var SummaryList = function SummaryList(_ref5) {
  var className = _ref5.className,
    noBorder = _ref5.noBorder,
    rest = _objectWithoutProperties(_ref5, _excluded5);
  return /*#__PURE__*/_react["default"].createElement("dl", _extends({
    className: (0, _classnames["default"])('nhsuk-summary-list', {
      'nhsuk-summary-list--no-border': noBorder
    }, className)
  }, rest));
};
SummaryList.Row = SummaryListRow;
SummaryList.Key = SummaryListKey;
SummaryList.Value = SummaryListValue;
SummaryList.Actions = SummaryListActions;
var _default = SummaryList;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIl9leGNsdWRlZDMiLCJfZXhjbHVkZWQ0IiwiX2V4Y2x1ZGVkNSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiU3VtbWFyeUxpc3RSb3ciLCJfcmVmIiwiY2xhc3NOYW1lIiwicmVzdCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWVzIiwiU3VtbWFyeUxpc3RLZXkiLCJfcmVmMiIsIlN1bW1hcnlMaXN0VmFsdWUiLCJfcmVmMyIsIlN1bW1hcnlMaXN0QWN0aW9ucyIsIl9yZWY0IiwiU3VtbWFyeUxpc3QiLCJfcmVmNSIsIm5vQm9yZGVyIiwiUm93IiwiS2V5IiwiVmFsdWUiLCJBY3Rpb25zIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvc3VtbWFyeS1saXN0L1N1bW1hcnlMaXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgSFRNTFByb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmNvbnN0IFN1bW1hcnlMaXN0Um93OiBSZWFjdC5GQzxIVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+PiA9ICh7IGNsYXNzTmFtZSwgLi4ucmVzdCB9KSA9PiAoXG4gIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCduaHN1ay1zdW1tYXJ5LWxpc3RfX3JvdycsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fSAvPlxuKTtcblxuY29uc3QgU3VtbWFyeUxpc3RLZXk6IFJlYWN0LkZDPEhUTUxQcm9wczxIVE1MRExpc3RFbGVtZW50Pj4gPSAoeyBjbGFzc05hbWUsIC4uLnJlc3QgfSkgPT4gKFxuICA8ZHQgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCduaHN1ay1zdW1tYXJ5LWxpc3RfX2tleScsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fSAvPlxuKTtcblxuY29uc3QgU3VtbWFyeUxpc3RWYWx1ZTogUmVhY3QuRkM8SFRNTFByb3BzPEhUTUxETGlzdEVsZW1lbnQ+PiA9ICh7IGNsYXNzTmFtZSwgLi4ucmVzdCB9KSA9PiAoXG4gIDxkZCBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ25oc3VrLXN1bW1hcnktbGlzdF9fdmFsdWUnLCBjbGFzc05hbWUpfSB7Li4ucmVzdH0gLz5cbik7XG5cbmNvbnN0IFN1bW1hcnlMaXN0QWN0aW9uczogUmVhY3QuRkM8SFRNTFByb3BzPEhUTUxETGlzdEVsZW1lbnQ+PiA9ICh7IGNsYXNzTmFtZSwgLi4ucmVzdCB9KSA9PiAoXG4gIDxkZCBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ25oc3VrLXN1bW1hcnktbGlzdF9fYWN0aW9ucycsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fSAvPlxuKTtcblxuaW50ZXJmYWNlIFN1bW1hcnlMaXN0UHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTERMaXN0RWxlbWVudD4ge1xuICBub0JvcmRlcj86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBTdW1tYXJ5TGlzdCBleHRlbmRzIFJlYWN0LkZDPFN1bW1hcnlMaXN0UHJvcHM+IHtcbiAgUm93OiBSZWFjdC5GQzxIVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+PjtcbiAgS2V5OiBSZWFjdC5GQzxIVE1MUHJvcHM8SFRNTERMaXN0RWxlbWVudD4+O1xuICBWYWx1ZTogUmVhY3QuRkM8SFRNTFByb3BzPEhUTUxETGlzdEVsZW1lbnQ+PjtcbiAgQWN0aW9uczogUmVhY3QuRkM8SFRNTFByb3BzPEhUTUxETGlzdEVsZW1lbnQ+Pjtcbn1cblxuY29uc3QgU3VtbWFyeUxpc3Q6IFN1bW1hcnlMaXN0ID0gKHsgY2xhc3NOYW1lLCBub0JvcmRlciwgLi4ucmVzdCB9KSA9PiAoXG4gIDxkbFxuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICduaHN1ay1zdW1tYXJ5LWxpc3QnLFxuICAgICAgeyAnbmhzdWstc3VtbWFyeS1saXN0LS1uby1ib3JkZXInOiBub0JvcmRlciB9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICl9XG4gICAgey4uLnJlc3R9XG4gIC8+XG4pO1xuXG5TdW1tYXJ5TGlzdC5Sb3cgPSBTdW1tYXJ5TGlzdFJvdztcblN1bW1hcnlMaXN0LktleSA9IFN1bW1hcnlMaXN0S2V5O1xuU3VtbWFyeUxpc3QuVmFsdWUgPSBTdW1tYXJ5TGlzdFZhbHVlO1xuU3VtbWFyeUxpc3QuQWN0aW9ucyA9IFN1bW1hcnlMaXN0QWN0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgU3VtbWFyeUxpc3Q7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFvQyxJQUFBRSxTQUFBO0VBQUFDLFVBQUE7RUFBQUMsVUFBQTtFQUFBQyxVQUFBO0VBQUFDLFVBQUE7QUFBQSxTQUFBUCx1QkFBQVEsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFB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