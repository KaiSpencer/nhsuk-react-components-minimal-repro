"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _icons = require("../icons");
var _HeadingLevel = _interopRequireDefault(require("../../util/HeadingLevel"));
var _UseDevWarning = _interopRequireDefault(require("../../util/hooks/UseDevWarning"));
var _warnings = require("../../deprecated/warnings");
var _excluded = ["className", "listType", "children", "heading", "headingLevel"],
  _excluded2 = ["children", "listItemType"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var DoDontListContext = /*#__PURE__*/(0, _react.createContext)('do');
var DoDontList = function DoDontList(_ref) {
  var className = _ref.className,
    listType = _ref.listType,
    children = _ref.children,
    heading = _ref.heading,
    headingLevel = _ref.headingLevel,
    rest = _objectWithoutProperties(_ref, _excluded);
  (0, _UseDevWarning["default"])(_warnings.NHSUKFrontendV5UpgradeWarnings.DoDontListPrefix, function () {
    return listType === 'dont';
  });
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-do-dont-list', className)
  }, rest), /*#__PURE__*/_react["default"].createElement(_HeadingLevel["default"], {
    className: "nhsuk-do-dont-list__label",
    headingLevel: headingLevel
  }, heading || (listType === 'do' ? 'Do' : "Don't")), /*#__PURE__*/_react["default"].createElement("ul", {
    className: (0, _classnames["default"])('nhsuk-list', {
      'nhsuk-list--tick': listType === 'do'
    }, {
      'nhsuk-list--cross': listType === 'dont'
    })
  }, /*#__PURE__*/_react["default"].createElement(DoDontListContext.Provider, {
    value: listType
  }, children)));
};
var DoDontItem = function DoDontItem(_ref2) {
  var children = _ref2.children,
    listItemType = _ref2.listItemType,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  var listItem = (0, _react.useContext)(DoDontListContext);
  return /*#__PURE__*/_react["default"].createElement("li", rest, (listItemType || listItem) === 'do' ? /*#__PURE__*/_react["default"].createElement(_icons.Tick, null) : /*#__PURE__*/_react["default"].createElement(_icons.Cross, null), children);
};
DoDontList.Item = DoDontItem;
var _default = DoDontList;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,