"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _TableBody = _interopRequireDefault(require("./components/TableBody"));
var _TableCaption = _interopRequireDefault(require("./components/TableCaption"));
var _TableCell = _interopRequireDefault(require("./components/TableCell"));
var _TableContainer = _interopRequireDefault(require("./components/TableContainer"));
var _TableHead = _interopRequireDefault(require("./components/TableHead"));
var _TableRow = _interopRequireDefault(require("./components/TableRow"));
var _TablePanel = _interopRequireDefault(require("./components/TablePanel"));
var _TableContext = _interopRequireDefault(require("./TableContext"));
var _excluded = ["className", "responsive", "children", "caption", "captionProps"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Table = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(Table, _React$PureComponent);
  var _super = _createSuper(Table);
  function Table(props) {
    var _this;
    _classCallCheck(this, Table);
    _this = _super.call(this, props);
    _this.setHeadings = function (headings) {
      var isEqual = headings.reduce(function (prevValue, heading, index) {
        return prevValue && heading === _this.state.headings[index];
      }, true);
      if (!isEqual) _this.setState({
        headings: headings
      });
    };
    _this.state = {
      headings: []
    };
    return _this;
  }
  _createClass(Table, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        className = _this$props.className,
        responsive = _this$props.responsive,
        children = _this$props.children,
        caption = _this$props.caption,
        captionProps = _this$props.captionProps,
        rest = _objectWithoutProperties(_this$props, _excluded);
      var contextValue = {
        isResponsive: Boolean(responsive),
        headings: this.state.headings,
        setHeadings: this.setHeadings
      };
      return /*#__PURE__*/_react["default"].createElement(_TableContext["default"].Provider, {
        value: contextValue
      }, /*#__PURE__*/_react["default"].createElement("table", _extends({
        className: (0, _classnames["default"])({
          'nhsuk-table': !responsive
        }, {
          'nhsuk-table-responsive': responsive
        }, className)
      }, rest), caption && /*#__PURE__*/_react["default"].createElement(_TableCaption["default"], captionProps, caption), children));
    }
  }]);
  return Table;
}(_react["default"].PureComponent);
Table.defaultProps = {
  responsive: false
};
Table.Container = _TableContainer["default"];
Table.Head = _TableHead["default"];
Table.Row = _TableRow["default"];
Table.Cell = _TableCell["default"];
Table.Body = _TableBody["default"];
Table.Panel = _TablePanel["default"];
var _default = Table;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX1RhYmxlQm9keSIsIl9UYWJsZUNhcHRpb24iLCJfVGFibGVDZWxsIiwiX1RhYmxlQ29udGFpbmVyIiwiX1RhYmxlSGVhZCIsIl9UYWJsZVJvdyIsIl9UYWJsZVBhbmVsIiwiX1RhYmxlQ29udGV4dCIsIl9leGNsdWRlZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJOdW1iZXIiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiZ2V0UHJvdG90eXBlT2YiLCJUYWJsZSIsIl9SZWFjdCRQdXJlQ29tcG9uZW50IiwiX3N1cGVyIiwiX3RoaXMiLCJzZXRIZWFkaW5ncyIsImhlYWRpbmdzIiwiaXNFcXVhbCIsInJlZHVjZSIsInByZXZWYWx1ZSIsImhlYWRpbmciLCJpbmRleCIsInN0YXRlIiwic2V0U3RhdGUiLCJyZW5kZXIiLCJfdGhpcyRwcm9wcyIsImNsYXNzTmFtZSIsInJlc3BvbnNpdmUiLCJjaGlsZHJlbiIsImNhcHRpb24iLCJjYXB0aW9uUHJvcHMiLCJyZXN0IiwiY29udGV4dFZhbHVlIiwiaXNSZXNwb25zaXZlIiwiY3JlYXRlRWxlbWVudCIsIlByb3ZpZGVyIiwiY2xhc3NOYW1lcyIsIlJlYWN0IiwiUHVyZUNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsIkNvbnRhaW5lciIsIlRhYmxlQ29udGFpbmVyIiwiSGVhZCIsIlRhYmxlSGVhZCIsIlJvdyIsIlRhYmxlUm93IiwiQ2VsbCIsIlRhYmxlQ2VsbCIsIkJvZHkiLCJUYWJsZUJvZHkiLCJQYW5lbCIsIlRhYmxlUGFuZWwiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy90YWJsZS9UYWJsZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudFByb3BzLCBIVE1MUHJvcHMsIFJlYWN0Tm9kZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFRhYmxlQm9keSBmcm9tICcuL2NvbXBvbmVudHMvVGFibGVCb2R5JztcbmltcG9ydCBUYWJsZUNhcHRpb24gZnJvbSAnLi9jb21wb25lbnRzL1RhYmxlQ2FwdGlvbic7XG5pbXBvcnQgVGFibGVDZWxsIGZyb20gJy4vY29tcG9uZW50cy9UYWJsZUNlbGwnO1xuaW1wb3J0IFRhYmxlQ29udGFpbmVyIGZyb20gJy4vY29tcG9uZW50cy9UYWJsZUNvbnRhaW5lcic7XG5pbXBvcnQgVGFibGVIZWFkIGZyb20gJy4vY29tcG9uZW50cy9UYWJsZUhlYWQnO1xuaW1wb3J0IFRhYmxlUm93IGZyb20gJy4vY29tcG9uZW50cy9UYWJsZVJvdyc7XG5pbXBvcnQgVGFibGVQYW5lbCBmcm9tICcuL2NvbXBvbmVudHMvVGFibGVQYW5lbCc7XG5pbXBvcnQgVGFibGVDb250ZXh0LCB7IElUYWJsZUNvbnRleHQgfSBmcm9tICcuL1RhYmxlQ29udGV4dCc7XG5cbmludGVyZmFjZSBUYWJsZVByb3BzIGV4dGVuZHMgSFRNTFByb3BzPEhUTUxUYWJsZUVsZW1lbnQ+IHtcbiAgcmVzcG9uc2l2ZT86IGJvb2xlYW47XG4gIGNhcHRpb24/OiBSZWFjdE5vZGU7XG4gIGNhcHRpb25Qcm9wcz86IENvbXBvbmVudFByb3BzPHR5cGVvZiBUYWJsZUNhcHRpb24+O1xufVxuXG5pbnRlcmZhY2UgVGFibGVTdGF0ZSB7XG4gIGhlYWRpbmdzOiBzdHJpbmdbXTtcbn1cblxuY2xhc3MgVGFibGUgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFRhYmxlUHJvcHMsIFRhYmxlU3RhdGU+IHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICByZXNwb25zaXZlOiBmYWxzZSxcbiAgfTtcblxuICBzdGF0aWMgQ29udGFpbmVyID0gVGFibGVDb250YWluZXI7XG5cbiAgc3RhdGljIEhlYWQgPSBUYWJsZUhlYWQ7XG5cbiAgc3RhdGljIFJvdyA9IFRhYmxlUm93O1xuXG4gIHN0YXRpYyBDZWxsID0gVGFibGVDZWxsO1xuXG4gIHN0YXRpYyBCb2R5ID0gVGFibGVCb2R5O1xuXG4gIHN0YXRpYyBQYW5lbCA9IFRhYmxlUGFuZWw7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFRhYmxlUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhlYWRpbmdzOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgc2V0SGVhZGluZ3MgPSAoaGVhZGluZ3M6IHN0cmluZ1tdKTogdm9pZCA9PiB7XG4gICAgY29uc3QgaXNFcXVhbCA9IGhlYWRpbmdzLnJlZHVjZShcbiAgICAgIChwcmV2VmFsdWUsIGhlYWRpbmcsIGluZGV4KSA9PiBwcmV2VmFsdWUgJiYgaGVhZGluZyA9PT0gdGhpcy5zdGF0ZS5oZWFkaW5nc1tpbmRleF0sXG4gICAgICB0cnVlLFxuICAgICk7XG5cbiAgICBpZiAoIWlzRXF1YWwpIHRoaXMuc2V0U3RhdGUoeyBoZWFkaW5ncyB9KTtcbiAgfTtcblxuICByZW5kZXIoKTogSlNYLkVsZW1lbnQge1xuICAgIGNvbnN0IHsgY2xhc3NOYW1lLCByZXNwb25zaXZlLCBjaGlsZHJlbiwgY2FwdGlvbiwgY2FwdGlvblByb3BzLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgY29udGV4dFZhbHVlOiBJVGFibGVDb250ZXh0ID0ge1xuICAgICAgaXNSZXNwb25zaXZlOiBCb29sZWFuKHJlc3BvbnNpdmUpLFxuICAgICAgaGVhZGluZ3M6IHRoaXMuc3RhdGUuaGVhZGluZ3MsXG4gICAgICBzZXRIZWFkaW5nczogdGhpcy5zZXRIZWFkaW5ncyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUYWJsZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAgICAgIDx0YWJsZVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICAgICAgIHsgJ25oc3VrLXRhYmxlJzogIXJlc3BvbnNpdmUgfSxcbiAgICAgICAgICAgIHsgJ25oc3VrLXRhYmxlLXJlc3BvbnNpdmUnOiByZXNwb25zaXZlIH0sXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgKX1cbiAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgPlxuICAgICAgICAgIHtjYXB0aW9uICYmIDxUYWJsZUNhcHRpb24gey4uLmNhcHRpb25Qcm9wc30+e2NhcHRpb259PC9UYWJsZUNhcHRpb24+fVxuICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvVGFibGVDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFibGU7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFKLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSSxVQUFBLEdBQUFMLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBSyxlQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTSxVQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTyxTQUFBLEdBQUFSLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBUSxXQUFBLEdBQUFULHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBUyxhQUFBLEdBQUFWLHNCQUFBLENBQUFDLE9BQUE7QUFBNkQsSUFBQVUsU0FBQTtBQUFBLFNBQUFYLHVCQUFBWSxHQUFBLFdBQUFB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