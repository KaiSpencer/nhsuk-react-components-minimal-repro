"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _react = _interopRequireWildcard(require("react"));
var _UseDevWarning = _interopRequireDefault(require("../../../util/hooks/UseDevWarning"));
var _TableSectionContext = _interopRequireWildcard(require("../TableSectionContext"));
var _excluded = ["className", "_responsive", "_responsiveHeading", "isNumeric", "children"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var CellOutsideOfSectionWarning = 'Table.Cell used outside of a Table.Head or Table.Body component. Unable to determine section type from context.';
var TableCell = function TableCell(_ref) {
  var className = _ref.className,
    _responsive = _ref._responsive,
    _responsiveHeading = _ref._responsiveHeading,
    isNumeric = _ref.isNumeric,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  var section = (0, _react.useContext)(_TableSectionContext["default"]);
  (0, _UseDevWarning["default"])(CellOutsideOfSectionWarning, function () {
    return section === _TableSectionContext.TableSection.NONE;
  });
  var cellClass = section === _TableSectionContext.TableSection.HEAD ? 'nhsuk-table__header' : 'nhsuk-table__cell';
  var classes = (0, _classnames["default"])(cellClass, _defineProperty({}, "".concat(cellClass, "--numeric"), isNumeric), className);
  switch (section) {
    case _TableSectionContext.TableSection.HEAD:
      return /*#__PURE__*/_react["default"].createElement("th", _extends({
        className: classes,
        scope: "col"
      }, rest), children);
    case _TableSectionContext.TableSection.BODY:
    case _TableSectionContext.TableSection.NONE:
    default:
      return /*#__PURE__*/_react["default"].createElement("td", _extends({
        className: classes,
        role: _responsive ? 'cell' : undefined
      }, rest), _responsive && /*#__PURE__*/_react["default"].createElement("span", {
        className: "nhsuk-table-responsive__heading"
      }, _responsiveHeading), children);
  }
};
TableCell.displayName = 'Table.Cell';
TableCell.defaultProps = {
  _responsive: false,
  _responsiveHeading: ''
};
var _default = TableCell;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2xhc3NuYW1lcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfVXNlRGV2V2FybmluZyIsIl9UYWJsZVNlY3Rpb25Db250ZXh0IiwiX2V4Y2x1ZGVkIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIl9kZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiQ2VsbE91dHNpZGVPZlNlY3Rpb25XYXJuaW5nIiwiVGFibGVDZWxsIiwiX3JlZiIsImNsYXNzTmFtZSIsIl9yZXNwb25zaXZlIiwiX3Jlc3BvbnNpdmVIZWFkaW5nIiwiaXNOdW1lcmljIiwiY2hpbGRyZW4iLCJyZXN0Iiwic2VjdGlvbiIsInVzZUNvbnRleHQiLCJUYWJsZVNlY3Rpb25Db250ZXh0IiwidXNlRGV2V2FybmluZyIsIlRhYmxlU2VjdGlvbiIsIk5PTkUiLCJjZWxsQ2xhc3MiLCJIRUFEIiwiY2xhc3NlcyIsImNsYXNzTmFtZXMiLCJjb25jYXQiLCJjcmVhdGVFbGVtZW50Iiwic2NvcGUiLCJCT0RZIiwicm9sZSIsImRpc3BsYXlOYW1lIiwiZGVmYXVsdFByb3BzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdGFibGUvY29tcG9uZW50cy9UYWJsZUNlbGwudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0LCB7IEhUTUxQcm9wcywgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1c2VEZXZXYXJuaW5nIGZyb20gJy4uLy4uLy4uL3V0aWwvaG9va3MvVXNlRGV2V2FybmluZyc7XG5pbXBvcnQgVGFibGVTZWN0aW9uQ29udGV4dCwgeyBUYWJsZVNlY3Rpb24gfSBmcm9tICcuLi9UYWJsZVNlY3Rpb25Db250ZXh0JztcblxuY29uc3QgQ2VsbE91dHNpZGVPZlNlY3Rpb25XYXJuaW5nID1cbiAgJ1RhYmxlLkNlbGwgdXNlZCBvdXRzaWRlIG9mIGEgVGFibGUuSGVhZCBvciBUYWJsZS5Cb2R5IGNvbXBvbmVudC4gVW5hYmxlIHRvIGRldGVybWluZSBzZWN0aW9uIHR5cGUgZnJvbSBjb250ZXh0Lic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFibGVDZWxsUHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+IHtcbiAgX3Jlc3BvbnNpdmU/OiBib29sZWFuO1xuICBfcmVzcG9uc2l2ZUhlYWRpbmc/OiBzdHJpbmc7XG4gIGlzTnVtZXJpYz86IGJvb2xlYW47XG59XG5cbmNvbnN0IFRhYmxlQ2VsbDogUmVhY3QuRkM8VGFibGVDZWxsUHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBfcmVzcG9uc2l2ZSxcbiAgX3Jlc3BvbnNpdmVIZWFkaW5nLFxuICBpc051bWVyaWMsXG4gIGNoaWxkcmVuLFxuICAuLi5yZXN0XG59KSA9PiB7XG4gIGNvbnN0IHNlY3Rpb24gPSB1c2VDb250ZXh0KFRhYmxlU2VjdGlvbkNvbnRleHQpO1xuICB1c2VEZXZXYXJuaW5nKENlbGxPdXRzaWRlT2ZTZWN0aW9uV2FybmluZywgKCkgPT4gc2VjdGlvbiA9PT0gVGFibGVTZWN0aW9uLk5PTkUpO1xuXG4gIGNvbnN0IGNlbGxDbGFzcyA9IHNlY3Rpb24gPT09IFRhYmxlU2VjdGlvbi5IRUFEID8gJ25oc3VrLXRhYmxlX19oZWFkZXInIDogJ25oc3VrLXRhYmxlX19jZWxsJztcbiAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoY2VsbENsYXNzLCB7IFtgJHtjZWxsQ2xhc3N9LS1udW1lcmljYF06IGlzTnVtZXJpYyB9LCBjbGFzc05hbWUpO1xuXG4gIHN3aXRjaCAoc2VjdGlvbikge1xuICAgIGNhc2UgVGFibGVTZWN0aW9uLkhFQUQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8dGggY2xhc3NOYW1lPXtjbGFzc2VzfSBzY29wZT1cImNvbFwiIHsuLi5yZXN0fT5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvdGg+XG4gICAgICApO1xuXG4gICAgY2FzZSBUYWJsZVNlY3Rpb24uQk9EWTpcbiAgICBjYXNlIFRhYmxlU2VjdGlvbi5OT05FOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8dGRcbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXN9XG4gICAgICAgICAgcm9sZT17X3Jlc3BvbnNpdmUgPyAnY2VsbCcgOiB1bmRlZmluZWR9XG4gICAgICAgICAgey4uLnJlc3R9XG4gICAgICAgID5cbiAgICAgICAgICB7X3Jlc3BvbnNpdmUgJiYgKFxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmhzdWstdGFibGUtcmVzcG9uc2l2ZV9faGVhZGluZ1wiPntfcmVzcG9uc2l2ZUhlYWRpbmd9PC9zcGFuPlxuICAgICAgICAgICl9XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L3RkPlxuICAgICAgKTtcbiAgfVxufTtcblxuVGFibGVDZWxsLmRpc3BsYXlOYW1lID0gJ1RhYmxlLkNlbGwnO1xuVGFibGVDZWxsLmRlZmF1bHRQcm9wcyA9IHtcbiAgX3Jlc3BvbnNpdmU6IGZhbHNlLFxuICBfcmVzcG9uc2l2ZUhlYWRpbmc6ICcnLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGFibGVDZWxsO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsV0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsY0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUksb0JBQUEsR0FBQUYsdUJBQUEsQ0FBQUYsT0FBQTtBQUEyRSxJQUFBSyxTQUFBO0FBQUEsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFMLHdCQUFBUyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsYUFBQUUsT0FBQSxDQUFBRixHQUFBLHlCQUFBQSxHQUFBLHVDQUFBQSxHQUFBLFVBQUFHLEtBQUEsR0FB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