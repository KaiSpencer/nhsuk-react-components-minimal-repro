"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _HeadingLevel = _interopRequireDefault(require("../../util/HeadingLevel"));
var _FieldsetContext = _interopRequireDefault(require("./FieldsetContext"));
var _excluded = ["className", "children", "isPageHeading", "headingLevel", "size"],
  _excluded2 = ["className", "disableErrorLine"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Legend = function Legend(_ref) {
  var className = _ref.className,
    children = _ref.children,
    isPageHeading = _ref.isPageHeading,
    headingLevel = _ref.headingLevel,
    size = _ref.size,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("legend", _extends({
    className: (0, _classnames["default"])('nhsuk-fieldset__legend', {
      'nhsuk-fieldset__legend--xl': isPageHeading && !size
    }, _defineProperty({}, "nhsuk-fieldset__legend--".concat(size), size), className)
  }, rest), isPageHeading ? /*#__PURE__*/_react["default"].createElement(_HeadingLevel["default"], {
    className: "nhsuk-fieldset__heading",
    headingLevel: headingLevel
  }, children) : children);
};
Legend.defaultProps = {
  headingLevel: 'h1'
};
var Fieldset = /*#__PURE__*/function (_PureComponent) {
  _inherits(Fieldset, _PureComponent);
  var _super = _createSuper(Fieldset);
  function Fieldset(props) {
    var _this;
    _classCallCheck(this, Fieldset);
    _this = _super.call(this, props);
    _this.passError = function (componentId, error) {
      _this.setState(function (state) {
        var existingError = state.erroredComponents.includes(componentId);
        if (existingError && !error) {
          return _objectSpread(_objectSpread({}, state), {}, {
            erroredComponents: state.erroredComponents.filter(function (id) {
              return id !== componentId;
            })
          });
        }
        if (!existingError && error) {
          return _objectSpread(_objectSpread({}, state), {}, {
            erroredComponents: [].concat(_toConsumableArray(state.erroredComponents), [componentId])
          });
        }
        return state;
      });
    };
    _this.registerComponent = function (componentId) {
      var deregister = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _this.setState(function (state) {
        if (deregister) {
          return _objectSpread(_objectSpread({}, state), {}, {
            registeredComponents: state.registeredComponents.filter(function (id) {
              return id !== componentId;
            })
          });
        }
        if (!state.registeredComponents.includes(componentId)) {
          return _objectSpread(_objectSpread({}, state), {}, {
            registeredComponents: [].concat(_toConsumableArray(state.registeredComponents), [componentId])
          });
        }
        return state;
      });
    };
    _this.state = {
      registeredComponents: [],
      erroredComponents: []
    };
    return _this;
  }
  _createClass(Fieldset, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        className = _this$props.className,
        disableErrorLine = _this$props.disableErrorLine,
        rest = _objectWithoutProperties(_this$props, _excluded2);
      var contextValue = {
        isFieldset: true,
        registerComponent: this.registerComponent,
        passError: this.passError
      };
      var containsFormElements = this.state.registeredComponents.length > 0;
      var containsError = this.state.erroredComponents.length > 0;
      return /*#__PURE__*/_react["default"].createElement(_FieldsetContext["default"].Provider, {
        value: contextValue
      }, containsFormElements ? /*#__PURE__*/_react["default"].createElement("div", {
        className: (0, _classnames["default"])('nhsuk-form-group', {
          'nhsuk-form-group--error': disableErrorLine ? false : containsError
        })
      }, /*#__PURE__*/_react["default"].createElement("fieldset", _extends({
        className: (0, _classnames["default"])('nhsuk-fieldset', className)
      }, rest))) : /*#__PURE__*/_react["default"].createElement("fieldset", _extends({
        className: (0, _classnames["default"])('nhsuk-fieldset', className)
      }, rest)));
    }
  }]);
  return Fieldset;
}(_react.PureComponent);
Fieldset.Legend = Legend;
Fieldset.Legend = Legend;
var _default = Fieldset;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,