"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className", "current"],
  _excluded2 = ["className", "children", "visuallyHiddenText"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var ContentsListItem = function ContentsListItem(_ref) {
  var className = _ref.className,
    current = _ref.current,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("li", {
    className: (0, _classnames["default"])('nhsuk-contents-list__item', className)
  }, current ? /*#__PURE__*/_react["default"].createElement("span", _extends({
    className: "nhsuk-contents-list__current"
  }, rest)) : /*#__PURE__*/_react["default"].createElement("a", _extends({
    className: "nhsuk-contents-list__link"
  }, rest)));
};
var ContentsList = function ContentsList(_ref2) {
  var className = _ref2.className,
    children = _ref2.children,
    visuallyHiddenText = _ref2.visuallyHiddenText,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/_react["default"].createElement("nav", _extends({
    className: (0, _classnames["default"])('nhsuk-contents-list', className)
  }, rest), visuallyHiddenText !== false ? /*#__PURE__*/_react["default"].createElement("h2", {
    className: "nhsuk-u-visually-hidden"
  }, visuallyHiddenText) : null, /*#__PURE__*/_react["default"].createElement("ol", {
    className: "nhsuk-contents-list__list"
  }, children));
};
ContentsList.defaultProps = {
  role: 'navigation',
  visuallyHiddenText: 'Contents'
};
ContentsList.Item = ContentsListItem;
var _default = ContentsList;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiQ29udGVudHNMaXN0SXRlbSIsIl9yZWYiLCJjbGFzc05hbWUiLCJjdXJyZW50IiwicmVzdCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWVzIiwiQ29udGVudHNMaXN0IiwiX3JlZjIiLCJjaGlsZHJlbiIsInZpc3VhbGx5SGlkZGVuVGV4dCIsImRlZmF1bHRQcm9wcyIsInJvbGUiLCJJdGVtIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvY29udGVudHMtbGlzdC9Db250ZW50c0xpc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBIVE1MUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcblxuaW50ZXJmYWNlIENvbnRlbnRzTGlzdEl0ZW1Qcm9wcyBleHRlbmRzIEhUTUxQcm9wczxIVE1MQW5jaG9yRWxlbWVudD4ge1xuICBjdXJyZW50PzogYm9vbGVhbjtcbn1cblxuY29uc3QgQ29udGVudHNMaXN0SXRlbTogUmVhY3QuRkM8Q29udGVudHNMaXN0SXRlbVByb3BzPiA9ICh7IGNsYXNzTmFtZSwgY3VycmVudCwgLi4ucmVzdCB9KSA9PiAoXG4gIDxsaSBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ25oc3VrLWNvbnRlbnRzLWxpc3RfX2l0ZW0nLCBjbGFzc05hbWUpfT5cbiAgICB7Y3VycmVudCA/IChcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIm5oc3VrLWNvbnRlbnRzLWxpc3RfX2N1cnJlbnRcIiB7Li4ucmVzdH0gLz5cbiAgICApIDogKFxuICAgICAgPGEgY2xhc3NOYW1lPVwibmhzdWstY29udGVudHMtbGlzdF9fbGlua1wiIHsuLi5yZXN0fSAvPlxuICAgICl9XG4gIDwvbGk+XG4pO1xuXG5pbnRlcmZhY2UgQ29udGVudHNMaXN0UHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+IHtcbiAgdmlzdWFsbHlIaWRkZW5UZXh0PzogZmFsc2UgfCBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBDb250ZW50c0xpc3QgZXh0ZW5kcyBSZWFjdC5GQzxDb250ZW50c0xpc3RQcm9wcz4ge1xuICBJdGVtOiBSZWFjdC5GQzxDb250ZW50c0xpc3RJdGVtUHJvcHM+O1xufVxuXG5jb25zdCBDb250ZW50c0xpc3Q6IENvbnRlbnRzTGlzdCA9ICh7XG4gIGNsYXNzTmFtZSwgY2hpbGRyZW4sIHZpc3VhbGx5SGlkZGVuVGV4dCwgLi4ucmVzdFxufSkgPT4gKFxuICA8bmF2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbmhzdWstY29udGVudHMtbGlzdCcsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fT5cbiAgICB7dmlzdWFsbHlIaWRkZW5UZXh0ICE9PSBmYWxzZSA/IChcbiAgICAgIDxoMiBjbGFzc05hbWU9XCJuaHN1ay11LXZpc3VhbGx5LWhpZGRlblwiPnt2aXN1YWxseUhpZGRlblRleHR9PC9oMj5cbiAgICApIDogbnVsbH1cbiAgICA8b2wgY2xhc3NOYW1lPVwibmhzdWstY29udGVudHMtbGlzdF9fbGlzdFwiPntjaGlsZHJlbn08L29sPlxuICA8L25hdj5cbik7XG5cbkNvbnRlbnRzTGlzdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHJvbGU6ICduYXZpZ2F0aW9uJyxcbiAgdmlzdWFsbHlIaWRkZW5UZXh0OiAnQ29udGVudHMnLFxufTtcblxuQ29udGVudHNMaXN0Lkl0ZW0gPSBDb250ZW50c0xpc3RJdGVtO1xuXG5leHBvcnQgZGVmYXVsdCBDb250ZW50c0xpc3Q7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFvQyxJQUFBRSxTQUFBO0VBQUFDLFVBQUE7QUFBQSxTQUFBSix1QkFBQUssR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLEdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxZQUFBSSxHQUFBLElBQUFELE1BQUEsUUFBQVAsTUFBQSxDQUFBUyxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsS0FBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxnQkFBQUwsTUFBQSxZQUFBSixRQUFBLENBQUFhLEtBQUEsT0FBQVAsU0FBQTtBQUFBLFNBQUFRLHlCQUFBTixNQUFBLEVBQUFPLFFBQUEsUUFBQVAsTUFBQSx5QkFBQUosTUFBQSxHQUFBWSw2QkFBQSxDQUFBUixNQUFBLEVBQUFPLFFBQUEsT0FBQU4sR0FBQSxFQUFBSixDQUFBLE1BQUFKLE1BQUEsQ0FBQWdCLHFCQUFBLFFBQUFDLGdCQUFBLEdBQUFqQixNQUFBLENBQUFnQixxQkFBQSxDQUFBVCxNQUFBLFFBQUFILENBQUEsTUFBQUEsQ0FBQSxHQUFBYSxnQkFBQSxDQUFBWCxNQUFBLEVBQUFGLENBQUEsTUFBQUksR0FBQSxHQUFBUyxnQkFBQSxDQUFBYixDQUFBLE9BQUFVLFFBQUEsQ0FBQUksT0FBQSxDQUFBVixHQUFBLHVCQUFBUixNQUFBLENBQUFTLFNBQUEsQ0FBQVUsb0JBQUEsQ0FBQVIsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsYUFBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxjQUFBTCxNQUFBO0FBQUEsU0FBQVksOEJBQUFSLE1BQUEsRUFBQU8sUUFBQSxRQUFBUCxNQUFBLHlCQUFBSixNQUFBLFdBQUFpQixVQUFBLEdBQUFwQixNQUFBLENBQUFxQixJQUFBLENBQUFkLE1BQUEsT0FBQUMsR0FBQSxFQUFBSixDQUFBLE9BQUFBLENBQUEsTUFBQUEsQ0FBQSxHQUFBZ0IsVUFBQSxDQUFBZCxNQUFBLEVBQUFGLENBQUEsTUFBQUksR0FBQSxHQUFBWSxVQUFBLENBQUFoQixDQUFBLE9BQUFVLFFBQUEsQ0FBQUksT0FBQSxDQUFBVixHQUFBLGtCQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLFlBQUFMLE1BQUE7QUFNcEMsSUFBTW1CLGdCQUFpRCxHQUFHLFNBQXBEQSxnQkFBaURBLENBQUFDLElBQUE7RUFBQSxJQUFNQyxTQUFTLEdBQUFELElBQUEsQ0FBVEMsU0FBUztJQUFFQyxPQUFPLEdBQUFGLElBQUEsQ0FBUEUsT0FBTztJQUFLQyxJQUFJLEdBQUFiLHdCQUFBLENBQUFVLElBQUEsRUFBQTVCLFNBQUE7RUFBQSxvQkFDdEZKLE1BQUEsWUFBQW9DLGFBQUE7SUFBSUgsU0FBUyxFQUFFLElBQUFJLHNCQUFVLEVBQUMsMkJBQTJCLEVBQUVKLFNBQVM7RUFBRSxHQUMvREMsT0FBTyxnQkFDTmxDLE1BQUEsWUFBQW9DLGFBQUEsU0FBQTVCLFFBQUE7SUFBTXlCLFNBQVMsRUFBQztFQUE4QixHQUFLRSxJQUFJLEVBQUksZ0JBRTNEbkMsTUFBQSxZQUFBb0MsYUFBQSxNQUFBNUIsUUFBQTtJQUFHeUIsU0FBUyxFQUFDO0VBQTJCLEdBQUtFLElBQUksRUFDbEQsQ0FDRTtBQUFBLENBQ047QUFVRCxJQUFNRyxZQUEwQixHQUFHLFNBQTdCQSxZQUEwQkEsQ0FBQUMsS0FBQTtFQUFBLElBQzlCTixTQUFTLEdBQUFNLEtBQUEsQ0FBVE4sU0FBUztJQUFFTyxRQUFRLEdBQUFELEtBQUEsQ0FBUkMsUUFBUTtJQUFFQyxrQkFBa0IsR0FBQUYsS0FBQSxDQUFsQkUsa0JBQWtCO0lBQUtOLElBQUksR0FBQWIsd0JBQUEsQ0FBQWlCLEtBQUEsRUFBQWxDLFVBQUE7RUFBQSxvQkFFaERMLE1BQUEsWUFBQW9DLGFBQUEsUUFBQTVCLFFBQUE7SUFBS3lCLFNBQVMsRUFBRSxJQUFBSSxzQkFBVSxFQUFDLHFCQUFxQixFQUFFSixTQUFTO0VBQUUsR0FBS0UsSUFBSSxHQUNuRU0sa0JBQWtCLEtBQUssS0FBSyxnQkFDM0J6QyxNQUFBLFlBQUFvQyxhQUFBO0lBQUlILFNBQVMsRUFBQztFQUF5QixHQUFFUSxrQkFBa0IsQ0FBTSxHQUMvRCxJQUFJLGVBQ1J6QyxNQUFBLFlBQUFvQyxhQUFBO0lBQUlILFNBQVMsRUFBQztFQUEyQixHQUFFTyxRQUFRLENBQU0sQ0FDckQ7QUFBQSxDQUNQO0FBRURGLFlBQVksQ0FBQ0ksWUFBWSxHQUFHO0VBQzFCQyxJQUFJLEVBQUUsWUFBWTtFQUNsQkYsa0JBQWtCLEVBQUU7QUFDdEIsQ0FBQztBQUVESCxZQUFZLENBQUNNLElBQUksR0FBR2IsZ0JBQWdCO0FBQUMsSUFBQWMsUUFBQSxHQUV0QlAsWUFBWTtBQUFBUSxPQUFBLGNBQUFELFFBQUEifQ==