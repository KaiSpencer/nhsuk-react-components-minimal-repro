"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _layout = require("../layout");
var _excluded = ["className", "children", "asElement"],
  _excluded2 = ["className", "asElement"],
  _excluded3 = ["className", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Item = function Item(_ref) {
  var className = _ref.className,
    children = _ref.children,
    _ref$asElement = _ref.asElement,
    Component = _ref$asElement === void 0 ? 'a' : _ref$asElement,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("li", {
    className: "nhsuk-breadcrumb__item"
  }, /*#__PURE__*/_react["default"].createElement(Component, _extends({
    className: (0, _classnames["default"])('nhsuk-breadcrumb__link', className)
  }, rest), children));
};
var Back = function Back(_ref2) {
  var className = _ref2.className,
    _ref2$asElement = _ref2.asElement,
    Component = _ref2$asElement === void 0 ? 'a' : _ref2$asElement,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/_react["default"].createElement("p", {
    className: (0, _classnames["default"])('nhsuk-breadcrumb__back', className)
  }, /*#__PURE__*/_react["default"].createElement(Component, _extends({
    className: "nhsuk-breadcrumb__backlink"
  }, rest)));
};
var Breadcrumb = function Breadcrumb(_ref3) {
  var className = _ref3.className,
    children = _ref3.children,
    rest = _objectWithoutProperties(_ref3, _excluded3);
  // Split off any "Item" components
  var _React$Children$toArr = _react["default"].Children.toArray(children).reduce(function (prev, child) {
      if (child && _typeof(child) === 'object' && 'type' in child && child.type === Item) {
        prev.ItemChildren.push(child);
      } else {
        prev.OtherChildren.push(child);
      }
      return prev;
    }, {
      ItemChildren: [],
      OtherChildren: []
    }),
    ItemChildren = _React$Children$toArr.ItemChildren,
    OtherChildren = _React$Children$toArr.OtherChildren;
  return /*#__PURE__*/_react["default"].createElement("nav", _extends({
    className: (0, _classnames["default"])('nhsuk-breadcrumb', className)
  }, rest), /*#__PURE__*/_react["default"].createElement(_layout.Container, null, /*#__PURE__*/_react["default"].createElement("ol", {
    className: "nhsuk-breadcrumb__list"
  }, ItemChildren), OtherChildren));
};
Breadcrumb.Item = Item;
Breadcrumb.Back = Back;
Breadcrumb.defaultProps = {
  'aria-label': 'Breadcrumb'
};
var _default = Breadcrumb;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,