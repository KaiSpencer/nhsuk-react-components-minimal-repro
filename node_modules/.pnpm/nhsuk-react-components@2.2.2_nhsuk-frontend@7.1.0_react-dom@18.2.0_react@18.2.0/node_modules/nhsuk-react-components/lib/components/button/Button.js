"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.ButtonLink = exports.Button = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className", "disabled", "secondary", "reverse"],
  _excluded2 = ["className", "role", "draggable", "children", "disabled", "secondary", "reverse"],
  _excluded3 = ["href", "as"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Button = function Button(_ref) {
  var className = _ref.className,
    disabled = _ref.disabled,
    secondary = _ref.secondary,
    reverse = _ref.reverse,
    rest = _objectWithoutProperties(_ref, _excluded);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/button-has-type
    _react["default"].createElement("button", _extends({
      className: (0, _classnames["default"])('nhsuk-button', {
        'nhsuk-button--disabled': disabled
      }, {
        'nhsuk-button--secondary': secondary
      }, {
        'nhsuk-button--reverse': reverse
      }, className),
      disabled: disabled,
      "aria-disabled": disabled ? 'true' : 'false'
    }, rest))
  );
};
exports.Button = Button;
Button.defaultProps = {
  type: 'submit'
};
var ButtonLink = function ButtonLink(_ref2) {
  var className = _ref2.className,
    role = _ref2.role,
    draggable = _ref2.draggable,
    children = _ref2.children,
    disabled = _ref2.disabled,
    secondary = _ref2.secondary,
    reverse = _ref2.reverse,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/_react["default"].createElement("a", _extends({
    className: (0, _classnames["default"])('nhsuk-button', {
      'nhsuk-button--disabled': disabled
    }, {
      'nhsuk-button--secondary': secondary
    }, {
      'nhsuk-button--reverse': reverse
    }, className),
    role: role,
    "aria-disabled": disabled ? 'true' : 'false',
    draggable: draggable
  }, rest), children);
};
exports.ButtonLink = ButtonLink;
ButtonLink.defaultProps = {
  role: 'button',
  draggable: false
};
var ButtonWrapper = function ButtonWrapper(_ref3) {
  var href = _ref3.href,
    as = _ref3.as,
    rest = _objectWithoutProperties(_ref3, _excluded3);
  if (as === 'a') {
    return /*#__PURE__*/_react["default"].createElement(ButtonLink, _extends({
      href: href
    }, rest));
  }
  if (as === 'button') {
    return /*#__PURE__*/_react["default"].createElement(Button, rest);
  }
  if (href) {
    return /*#__PURE__*/_react["default"].createElement(ButtonLink, _extends({
      href: href
    }, rest));
  }
  return /*#__PURE__*/_react["default"].createElement(Button, rest);
};
var _default = ButtonWrapper;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIl9leGNsdWRlZDMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsIkJ1dHRvbiIsIl9yZWYiLCJjbGFzc05hbWUiLCJkaXNhYmxlZCIsInNlY29uZGFyeSIsInJldmVyc2UiLCJyZXN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZXMiLCJleHBvcnRzIiwiZGVmYXVsdFByb3BzIiwidHlwZSIsIkJ1dHRvbkxpbmsiLCJfcmVmMiIsInJvbGUiLCJkcmFnZ2FibGUiLCJjaGlsZHJlbiIsIkJ1dHRvbldyYXBwZXIiLCJfcmVmMyIsImhyZWYiLCJhcyIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvYnV0dG9uL0J1dHRvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEhUTUxQcm9wcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuXG5pbnRlcmZhY2UgQnV0dG9uUHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTEJ1dHRvbkVsZW1lbnQ+IHtcbiAgdHlwZT86ICdidXR0b24nIHwgJ3N1Ym1pdCcgfCAncmVzZXQnO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIHNlY29uZGFyeT86IGJvb2xlYW47XG4gIHJldmVyc2U/OiBib29sZWFuO1xuICBhcz86ICdidXR0b24nO1xufVxuXG5pbnRlcmZhY2UgQnV0dG9uTGlua1Byb3BzIGV4dGVuZHMgSFRNTFByb3BzPEhUTUxBbmNob3JFbGVtZW50PiB7XG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgc2Vjb25kYXJ5PzogYm9vbGVhbjtcbiAgcmV2ZXJzZT86IGJvb2xlYW47XG4gIGFzPzogJ2EnO1xufVxuXG5leHBvcnQgY29uc3QgQnV0dG9uOiBSZWFjdC5GQzxCdXR0b25Qcm9wcz4gPSAoe1xuICBjbGFzc05hbWUsXG4gIGRpc2FibGVkLFxuICBzZWNvbmRhcnksXG4gIHJldmVyc2UsXG4gIC4uLnJlc3Rcbn0pID0+IChcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2J1dHRvbi1oYXMtdHlwZVxuICA8YnV0dG9uXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgJ25oc3VrLWJ1dHRvbicsXG4gICAgICB7ICduaHN1ay1idXR0b24tLWRpc2FibGVkJzogZGlzYWJsZWQgfSxcbiAgICAgIHsgJ25oc3VrLWJ1dHRvbi0tc2Vjb25kYXJ5Jzogc2Vjb25kYXJ5IH0sXG4gICAgICB7ICduaHN1ay1idXR0b24tLXJldmVyc2UnOiByZXZlcnNlIH0sXG4gICAgICBjbGFzc05hbWUsXG4gICAgKX1cbiAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgYXJpYS1kaXNhYmxlZD17ZGlzYWJsZWQgPyAndHJ1ZScgOiAnZmFsc2UnfVxuICAgIHsuLi5yZXN0fVxuICAvPlxuKTtcblxuQnV0dG9uLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogJ3N1Ym1pdCcsXG59O1xuXG5leHBvcnQgY29uc3QgQnV0dG9uTGluazogUmVhY3QuRkM8QnV0dG9uTGlua1Byb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgcm9sZSxcbiAgZHJhZ2dhYmxlLFxuICBjaGlsZHJlbixcbiAgZGlzYWJsZWQsXG4gIHNlY29uZGFyeSxcbiAgcmV2ZXJzZSxcbiAgLi4ucmVzdFxufSkgPT4gKFxuICA8YVxuICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhcbiAgICAgICduaHN1ay1idXR0b24nLFxuICAgICAgeyAnbmhzdWstYnV0dG9uLS1kaXNhYmxlZCc6IGRpc2FibGVkIH0sXG4gICAgICB7ICduaHN1ay1idXR0b24tLXNlY29uZGFyeSc6IHNlY29uZGFyeSB9LFxuICAgICAgeyAnbmhzdWstYnV0dG9uLS1yZXZlcnNlJzogcmV2ZXJzZSB9LFxuICAgICAgY2xhc3NOYW1lLFxuICAgICl9XG4gICAgcm9sZT17cm9sZX1cbiAgICBhcmlhLWRpc2FibGVkPXtkaXNhYmxlZCA/ICd0cnVlJyA6ICdmYWxzZSd9XG4gICAgZHJhZ2dhYmxlPXtkcmFnZ2FibGV9XG4gICAgey4uLnJlc3R9XG4gID5cbiAgICB7Y2hpbGRyZW59XG4gIDwvYT5cbik7XG5cbkJ1dHRvbkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICByb2xlOiAnYnV0dG9uJyxcbiAgZHJhZ2dhYmxlOiBmYWxzZSxcbn07XG5cbmNvbnN0IEJ1dHRvbldyYXBwZXI6IFJlYWN0LkZDPEJ1dHRvbkxpbmtQcm9wcyB8IEJ1dHRvblByb3BzPiA9ICh7IGhyZWYsIGFzLCAuLi5yZXN0IH0pID0+IHtcbiAgaWYgKGFzID09PSAnYScpIHtcbiAgICByZXR1cm4gPEJ1dHRvbkxpbmsgaHJlZj17aHJlZn0gey4uLihyZXN0IGFzIEJ1dHRvbkxpbmtQcm9wcyl9IC8+O1xuICB9XG4gIGlmIChhcyA9PT0gJ2J1dHRvbicpIHtcbiAgICByZXR1cm4gPEJ1dHRvbiB7Li4uKHJlc3QgYXMgQnV0dG9uUHJvcHMpfSAvPjtcbiAgfVxuICBpZiAoaHJlZikge1xuICAgIHJldHVybiA8QnV0dG9uTGluayBocmVmPXtocmVmfSB7Li4uKHJlc3QgYXMgQnV0dG9uTGlua1Byb3BzKX0gLz47XG4gIH1cbiAgcmV0dXJuIDxCdXR0b24gey4uLihyZXN0IGFzIEJ1dHRvblByb3BzKX0gLz47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBCdXR0b25XcmFwcGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxXQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBb0MsSUFBQUUsU0FBQTtFQUFBQyxVQUFBO0VBQUFDLFVBQUE7QUFBQSxTQUFBTCx1QkFBQU0sR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLEdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxZQUFBSSxHQUFBLElBQUFELE1BQUEsUUFBQVAsTUFBQSxDQUFBUyxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsS0FBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxnQkFBQUwsTUFBQSxZQUFBSixRQUFBLENBQUFhLEtBQUEsT0FBQVAsU0FBQTtBQUFBLFNBQUFRLHlCQUFBTixNQUFBLEVBQUFPLFFBQUEsUUFBQVAsTUFBQSx5QkFBQUosTUFBQSxHQUFBWSw2QkFBQSxDQUFBUixNQUFBLEVBQUFPLFFBQUEsT0FBQU4sR0FBQSxFQUFBSixDQUFBLE1BQUFKLE1BQUEsQ0FBQWdCLHFCQUFBLFFBQUFDLGdCQUFBLEdBQUFqQixNQUFBLENBQUFnQixxQkFBQSxDQUFBVCxNQUFBLFFBQUFILENBQUEsTUFBQUEsQ0FBQSxHQUFBYSxnQkFBQSxDQUFBWCxNQUFBLEVBQUFGLENBQUEsTUFBQUks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