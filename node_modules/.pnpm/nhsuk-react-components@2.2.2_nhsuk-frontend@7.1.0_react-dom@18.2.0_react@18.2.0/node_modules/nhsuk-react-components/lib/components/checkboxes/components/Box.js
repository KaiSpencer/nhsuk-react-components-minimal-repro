"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _CheckboxContext = _interopRequireDefault(require("../CheckboxContext"));
var _Label = _interopRequireDefault(require("../../label/Label"));
var _Hint = _interopRequireDefault(require("../../hint/Hint"));
var _excluded = ["id", "labelProps", "children", "hint", "hintProps", "conditional", "defaultChecked", "checked", "onChange", "inputRef", "forceShowConditional", "conditionalWrapperProps"],
  _excluded2 = ["className"],
  _excluded3 = ["className"],
  _excluded4 = ["className"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Box = function Box(_ref) {
  var id = _ref.id,
    labelProps = _ref.labelProps,
    children = _ref.children,
    hint = _ref.hint,
    hintProps = _ref.hintProps,
    conditional = _ref.conditional,
    defaultChecked = _ref.defaultChecked,
    checked = _ref.checked,
    _onChange = _ref.onChange,
    inputRef = _ref.inputRef,
    forceShowConditional = _ref.forceShowConditional,
    conditionalWrapperProps = _ref.conditionalWrapperProps,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useContext = (0, _react.useContext)(_CheckboxContext["default"]),
    getBoxId = _useContext.getBoxId,
    name = _useContext.name,
    setConditional = _useContext.setConditional,
    unleaseReference = _useContext.unleaseReference,
    leaseReference = _useContext.leaseReference;
  var _useState = (0, _react.useState)(leaseReference()),
    _useState2 = _slicedToArray(_useState, 1),
    boxReference = _useState2[0];
  var _useState3 = (0, _react.useState)(!!(checked || defaultChecked)),
    _useState4 = _slicedToArray(_useState3, 2),
    showConditional = _useState4[0],
    setShowConditional = _useState4[1];
  var inputID = id || getBoxId(boxReference);
  var _ref2 = labelProps || {},
    labelClassName = _ref2.className,
    restLabelProps = _objectWithoutProperties(_ref2, _excluded2);
  var _ref3 = hintProps || {},
    hintClassName = _ref3.className,
    restHintProps = _objectWithoutProperties(_ref3, _excluded3);
  var _ref4 = conditionalWrapperProps || {},
    conditionalClassName = _ref4.className,
    restConditionalProps = _objectWithoutProperties(_ref4, _excluded4);
  (0, _react.useEffect)(function () {
    return function () {
      return unleaseReference(boxReference);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (checked !== undefined) {
      setShowConditional(checked);
    }
  }, [checked]);
  (0, _react.useEffect)(function () {
    setConditional(boxReference, Boolean(conditional));
    return function () {
      return setConditional(boxReference, false);
    };
  }, [conditional]);
  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "nhsuk-checkboxes__item"
  }, /*#__PURE__*/_react["default"].createElement("input", _extends({
    className: "nhsuk-checkboxes__input",
    onChange: function onChange(e) {
      if (checked === undefined) setShowConditional(e.target.checked);
      if (_onChange) _onChange(e);
    },
    name: name,
    id: inputID,
    checked: checked,
    defaultChecked: defaultChecked,
    ref: inputRef
  }, rest)), children ? /*#__PURE__*/_react["default"].createElement(_Label["default"], _extends({
    className: (0, _classnames["default"])('nhsuk-checkboxes__label', labelClassName),
    id: "".concat(inputID, "--label"),
    htmlFor: inputID
  }, restLabelProps), children) : null, hint ? /*#__PURE__*/_react["default"].createElement(_Hint["default"], _extends({
    className: (0, _classnames["default"])('nhsuk-checkboxes__hint', hintClassName)
  }, restHintProps), hint) : null), conditional && (showConditional || forceShowConditional) ? /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-radios__conditional', conditionalClassName),
    id: "".concat(inputID, "--conditional")
  }, restConditionalProps), conditional) : null);
};
Box.defaultProps = {
  type: 'checkbox'
};
var _default = Box;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,