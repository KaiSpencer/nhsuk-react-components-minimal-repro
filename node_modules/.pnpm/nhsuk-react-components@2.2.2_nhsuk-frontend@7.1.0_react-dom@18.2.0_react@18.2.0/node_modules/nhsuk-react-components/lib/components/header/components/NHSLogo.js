"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _HeaderContext = _interopRequireDefault(require("../HeaderContext"));
var _excluded = ["className", "alt", "asElement"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var SVGImageWithSrc = function SVGImageWithSrc(props) {
  return /*#__PURE__*/_react["default"].createElement("image", props);
};
var NHSLogo = function NHSLogo(_ref) {
  var className = _ref.className,
    alt = _ref.alt,
    _ref$asElement = _ref.asElement,
    Component = _ref$asElement === void 0 ? 'a' : _ref$asElement,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useContext = (0, _react.useContext)(_HeaderContext["default"]),
    serviceName = _useContext.serviceName,
    hasMenuToggle = _useContext.hasMenuToggle,
    hasSearch = _useContext.hasSearch;
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('nhsuk-header__logo', {
      'nhsuk-header__logo--only': !hasMenuToggle && !hasSearch
    })
  }, /*#__PURE__*/_react["default"].createElement(Component, _extends({
    className: (0, _classnames["default"])('nhsuk-header__link', {
      'nhsuk-header__link--service': serviceName
    }, className)
  }, rest), /*#__PURE__*/_react["default"].createElement("svg", {
    className: "nhsuk-logo",
    xmlns: "http://www.w3.org/2000/svg",
    xmlnsXlink: "http://www.w3.org/1999/xlink",
    role: "img",
    focusable: "false",
    viewBox: "0 0 40 16",
    "aria-labelledby": "nhsuk-logo_title"
  }, /*#__PURE__*/_react["default"].createElement("title", {
    id: "nhsuk-logo_title"
  }, alt), /*#__PURE__*/_react["default"].createElement("path", {
    className: "nhsuk-logo__background",
    d: "M0 0h40v16H0z"
  }), /*#__PURE__*/_react["default"].createElement("path", {
    className: "nhsuk-logo__text",
    d: "M3.9 1.5h4.4l2.6 9h.1l1.8-9h3.3l-2.8 13H9l-2.7-9h-.1l-1.8 9H1.1M17.3 1.5h3.6l-1 4.9h4L25 1.5h3.5l-2.7 13h-3.5l1.1-5.6h-4.1l-1.2 5.6h-3.4M37.7 4.4c-.7-.3-1.6-.6-2.9-.6-1.4 0-2.5.2-2.5 1.3 0 1.8 5.1 1.2 5.1 5.1 0 3.6-3.3 4.5-6.4 4.5-1.3 0-2.9-.3-4-.7l.8-2.7c.7.4 2.1.7 3.2.7s2.8-.2 2.8-1.5c0-2.1-5.1-1.3-5.1-5 0-3.4 2.9-4.4 5.8-4.4 1.6 0 3.1.2 4 .6"
  }), /*#__PURE__*/_react["default"].createElement(SVGImageWithSrc, {
    src: "https://assets.nhs.uk/images/nhs-logo.png",
    xlinkHref: ""
  })), serviceName ? /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-header__service-name"
  }, serviceName) : null));
};
NHSLogo.defaultProps = {
  'aria-label': 'NHS homepage',
  alt: 'NHS Logo'
};
var _default = NHSLogo;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,