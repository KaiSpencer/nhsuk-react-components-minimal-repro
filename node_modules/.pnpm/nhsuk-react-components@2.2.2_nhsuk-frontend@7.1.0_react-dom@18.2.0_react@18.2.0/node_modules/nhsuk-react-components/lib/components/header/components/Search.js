"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _icons = require("../../icons");
var _HeaderContext = _interopRequireDefault(require("../HeaderContext"));
var _excluded = ["action", "method", "id", "visuallyHiddenText"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Search = function Search(_ref) {
  var action = _ref.action,
    method = _ref.method,
    id = _ref.id,
    visuallyHiddenText = _ref.visuallyHiddenText,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useContext = (0, _react.useContext)(_HeaderContext["default"]),
    setSearch = _useContext.setSearch,
    toggleSearch = _useContext.toggleSearch,
    searchOpen = _useContext.searchOpen;
  (0, _react.useEffect)(function () {
    setSearch(true);
    return function () {
      return setSearch(false);
    };
  }, []);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: "nhsuk-header__search"
  }, /*#__PURE__*/_react["default"].createElement("button", {
    className: (0, _classnames["default"])('nhsuk-header__search-toggle', {
      'is-active': searchOpen
    }),
    "aria-label": "Open search",
    "aria-expanded": searchOpen ? 'true' : 'false',
    onClick: toggleSearch
  }, /*#__PURE__*/_react["default"].createElement(_icons.Search, null), /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-u-visually-hidden"
  }, "Search")), /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('nhsuk-header__search-wrap', {
      'js-show': searchOpen
    })
  }, /*#__PURE__*/_react["default"].createElement("form", {
    className: "nhsuk-header__search-form",
    action: action,
    method: method,
    role: "search"
  }, /*#__PURE__*/_react["default"].createElement("label", {
    className: "nhsuk-u-visually-hidden",
    htmlFor: id
  }, visuallyHiddenText), /*#__PURE__*/_react["default"].createElement("input", _extends({
    className: "nhsuk-search__input",
    id: id
  }, rest)), /*#__PURE__*/_react["default"].createElement("button", {
    className: "nhsuk-search__submit",
    type: "submit"
  }, /*#__PURE__*/_react["default"].createElement(_icons.Search, null), /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-u-visually-hidden"
  }, "Search")), /*#__PURE__*/_react["default"].createElement("button", {
    className: "nhsuk-search__close"
  }, /*#__PURE__*/_react["default"].createElement(_icons.Close, null), /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-u-visually-hidden"
  }, "Close search")))));
};
Search.defaultProps = {
  method: 'get',
  role: 'search',
  id: 'search-field',
  visuallyHiddenText: 'Search the NHS website',
  type: 'search',
  autoComplete: 'off',
  placeholder: 'Search'
};
var _default = Search;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,