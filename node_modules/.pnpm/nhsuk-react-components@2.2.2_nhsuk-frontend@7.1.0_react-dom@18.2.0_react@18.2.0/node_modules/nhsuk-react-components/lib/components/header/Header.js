"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _NHSLogo = _interopRequireDefault(require("./components/NHSLogo"));
var _OrganisationalLogo = _interopRequireDefault(require("./components/OrganisationalLogo"));
var _HeaderContext = _interopRequireDefault(require("./HeaderContext"));
var _Search = _interopRequireDefault(require("./components/Search"));
var _Nav = _interopRequireDefault(require("./components/Nav"));
var _NavItem = _interopRequireDefault(require("./components/NavItem"));
var _NavItemList = _interopRequireDefault(require("./components/NavItemList"));
var _NavMenuClose = _interopRequireDefault(require("./components/NavMenuClose"));
var _layout = require("../layout");
var _Content = _interopRequireDefault(require("./components/Content"));
var _MenuToggle = _interopRequireDefault(require("./components/MenuToggle"));
var _TransactionalServiceName = _interopRequireDefault(require("./components/TransactionalServiceName"));
var _NavTitle = _interopRequireDefault(require("./components/NavTitle"));
var _NavContainer = _interopRequireDefault(require("./components/NavContainer"));
var _excluded = ["className"],
  _excluded2 = ["className", "children", "transactional", "orgName", "orgSplit", "orgDescriptor", "serviceName", "white"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var BaseHeaderLogo = function BaseHeaderLogo(props) {
  var _useContext = (0, _react.useContext)(_HeaderContext["default"]),
    orgName = _useContext.orgName;
  if (orgName) {
    return /*#__PURE__*/_react["default"].createElement(_OrganisationalLogo["default"], props);
  }
  return /*#__PURE__*/_react["default"].createElement(_NHSLogo["default"], props);
};
var HeaderContainer = function HeaderContainer(_ref) {
  var className = _ref.className,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement(_layout.Container, _extends({
    className: (0, _classnames["default"])('nhsuk-header__container', className)
  }, rest));
};
var Header = /*#__PURE__*/function (_PureComponent) {
  _inherits(Header, _PureComponent);
  var _super = _createSuper(Header);
  function Header(props) {
    var _this;
    _classCallCheck(this, Header);
    _this = _super.call(this, props);
    _this.setMenuToggle = function (toggle) {
      _this.setState({
        hasMenuToggle: toggle
      });
    };
    _this.setSearch = function (toggle) {
      _this.setState({
        hasSearch: toggle
      });
    };
    _this.toggleMenu = function () {
      _this.setState(function (state) {
        return {
          menuOpen: !state.menuOpen
        };
      });
    };
    _this.toggleSearch = function () {
      _this.setState(function (state) {
        return {
          searchOpen: !state.searchOpen
        };
      });
    };
    _this.state = {
      hasMenuToggle: false,
      hasSearch: false,
      menuOpen: false,
      searchOpen: false
    };
    return _this;
  }
  _createClass(Header, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
        className = _this$props.className,
        children = _this$props.children,
        transactional = _this$props.transactional,
        orgName = _this$props.orgName,
        orgSplit = _this$props.orgSplit,
        orgDescriptor = _this$props.orgDescriptor,
        serviceName = _this$props.serviceName,
        white = _this$props.white,
        rest = _objectWithoutProperties(_this$props, _excluded2);
      var _this$state = this.state,
        hasSearch = _this$state.hasSearch,
        hasMenuToggle = _this$state.hasMenuToggle,
        menuOpen = _this$state.menuOpen,
        searchOpen = _this$state.searchOpen;
      var contextValue = {
        orgName: orgName,
        orgSplit: orgSplit,
        orgDescriptor: orgDescriptor,
        serviceName: serviceName,
        hasSearch: hasSearch,
        hasMenuToggle: hasMenuToggle,
        setMenuToggle: this.setMenuToggle,
        setSearch: this.setSearch,
        toggleMenu: this.toggleMenu,
        toggleSearch: this.toggleSearch,
        menuOpen: menuOpen,
        searchOpen: searchOpen
      };
      return /*#__PURE__*/_react["default"].createElement("header", _extends({
        className: (0, _classnames["default"])('nhsuk-header', {
          'nhsuk-header--transactional': transactional
        }, {
          'nhsuk-header--organisation': orgName
        }, {
          'nhsuk-header--white': white
        }, className)
      }, rest), /*#__PURE__*/_react["default"].createElement(_HeaderContext["default"].Provider, {
        value: contextValue
      }, children));
    }
  }]);
  return Header;
}(_react.PureComponent);
Header.Logo = BaseHeaderLogo;
Header.Search = _Search["default"];
Header.Nav = _Nav["default"];
Header.NavTitle = _NavTitle["default"];
Header.NavContainer = _NavContainer["default"];
Header.NavItemList = _NavItemList["default"];
Header.NavItem = _NavItem["default"];
Header.NavMenuClose = _NavMenuClose["default"];
Header.Container = HeaderContainer;
Header.Content = _Content["default"];
Header.MenuToggle = _MenuToggle["default"];
Header.ServiceName = _TransactionalServiceName["default"];
Header.defaultProps = {
  role: 'banner'
};
var _default = Header;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,