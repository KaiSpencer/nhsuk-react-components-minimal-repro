"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _icons = require("../icons");
var _excluded = ["className", "children", "previous", "next"],
  _excluded2 = ["className", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var PaginationLink = function PaginationLink(_ref) {
  var className = _ref.className,
    children = _ref.children,
    previous = _ref.previous,
    next = _ref.next,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("li", {
    className: (0, _classnames["default"])({
      'nhsuk-pagination-item--previous': previous
    }, {
      'nhsuk-pagination-item--next': next
    })
  }, /*#__PURE__*/_react["default"].createElement("a", _extends({
    className: (0, _classnames["default"])('nhsuk-pagination__link', {
      'nhsuk-pagination__link--prev': previous
    }, {
      'nhsuk-pagination__link--next': next
    }, className)
  }, rest), /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-pagination__title"
  }, previous ? 'Previous' : null, next ? 'Next' : null), /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-u-visually-hidden"
  }, ":"), /*#__PURE__*/_react["default"].createElement("span", {
    className: "nhsuk-pagination__page"
  }, children), previous ? /*#__PURE__*/_react["default"].createElement(_icons.ArrowLeft, null) : null, next ? /*#__PURE__*/_react["default"].createElement(_icons.ArrowRight, null) : null));
};
var Pagination = function Pagination(_ref2) {
  var className = _ref2.className,
    children = _ref2.children,
    rest = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/_react["default"].createElement("nav", _extends({
    className: (0, _classnames["default"])('nhsuk-pagination', className)
  }, rest), /*#__PURE__*/_react["default"].createElement("ul", {
    className: "nhsuk-list nhsuk-pagination__list"
  }, children));
};
Pagination.defaultProps = {
  role: 'navigation',
  'aria-label': 'Pagination'
};
Pagination.Link = PaginationLink;
var _default = Pagination;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2ljb25zIiwiX2V4Y2x1ZGVkIiwiX2V4Y2x1ZGVkMiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsIk9iamVjdCIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiUGFnaW5hdGlvbkxpbmsiLCJfcmVmIiwiY2xhc3NOYW1lIiwiY2hpbGRyZW4iLCJwcmV2aW91cyIsIm5leHQiLCJyZXN0IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZXMiLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwiUGFnaW5hdGlvbiIsIl9yZWYyIiwiZGVmYXVsdFByb3BzIiwicm9sZSIsIkxpbmsiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9wYWdpbmF0aW9uL1BhZ2luYXRpb24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBIVE1MUHJvcHMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCB7IEFycm93TGVmdCwgQXJyb3dSaWdodCB9IGZyb20gJy4uL2ljb25zJztcblxuaW50ZXJmYWNlIFBhZ2luYXRpb25MaW5rUHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTEFuY2hvckVsZW1lbnQ+IHtcbiAgcHJldmlvdXM/OiBib29sZWFuO1xuICBuZXh0PzogYm9vbGVhbjtcbn1cblxuY29uc3QgUGFnaW5hdGlvbkxpbms6IFJlYWN0LkZDPFBhZ2luYXRpb25MaW5rUHJvcHM+ID0gKHtcbiAgY2xhc3NOYW1lLFxuICBjaGlsZHJlbixcbiAgcHJldmlvdXMsXG4gIG5leHQsXG4gIC4uLnJlc3Rcbn0pID0+IChcbiAgPGxpXG4gICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKFxuICAgICAgeyAnbmhzdWstcGFnaW5hdGlvbi1pdGVtLS1wcmV2aW91cyc6IHByZXZpb3VzIH0sXG4gICAgICB7ICduaHN1ay1wYWdpbmF0aW9uLWl0ZW0tLW5leHQnOiBuZXh0IH0sXG4gICAgKX1cbiAgPlxuICAgIDxhXG4gICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZXMoXG4gICAgICAgICduaHN1ay1wYWdpbmF0aW9uX19saW5rJyxcbiAgICAgICAgeyAnbmhzdWstcGFnaW5hdGlvbl9fbGluay0tcHJldic6IHByZXZpb3VzIH0sXG4gICAgICAgIHsgJ25oc3VrLXBhZ2luYXRpb25fX2xpbmstLW5leHQnOiBuZXh0IH0sXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICl9XG4gICAgICB7Li4ucmVzdH1cbiAgICA+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJuaHN1ay1wYWdpbmF0aW9uX190aXRsZVwiPlxuICAgICAgICB7cHJldmlvdXMgPyAnUHJldmlvdXMnIDogbnVsbH1cbiAgICAgICAge25leHQgPyAnTmV4dCcgOiBudWxsfVxuICAgICAgPC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmhzdWstdS12aXN1YWxseS1oaWRkZW5cIj46PC9zcGFuPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmhzdWstcGFnaW5hdGlvbl9fcGFnZVwiPntjaGlsZHJlbn08L3NwYW4+XG4gICAgICB7cHJldmlvdXMgPyA8QXJyb3dMZWZ0IC8+IDogbnVsbH1cbiAgICAgIHtuZXh0ID8gPEFycm93UmlnaHQgLz4gOiBudWxsfVxuICAgIDwvYT5cbiAgPC9saT5cbik7XG5cbmludGVyZmFjZSBQYWdpbmF0aW9uIGV4dGVuZHMgUmVhY3QuRkM8SFRNTFByb3BzPEhUTUxEaXZFbGVtZW50Pj4ge1xuICBMaW5rOiBSZWFjdC5GQzxQYWdpbmF0aW9uTGlua1Byb3BzPjtcbn1cblxuY29uc3QgUGFnaW5hdGlvbjogUGFnaW5hdGlvbiA9ICh7IGNsYXNzTmFtZSwgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4gKFxuICA8bmF2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbmhzdWstcGFnaW5hdGlvbicsIGNsYXNzTmFtZSl9IHsuLi5yZXN0fT5cbiAgICA8dWwgY2xhc3NOYW1lPVwibmhzdWstbGlzdCBuaHN1ay1wYWdpbmF0aW9uX19saXN0XCI+e2NoaWxkcmVufTwvdWw+XG4gIDwvbmF2PlxuKTtcblxuUGFnaW5hdGlvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIHJvbGU6ICduYXZpZ2F0aW9uJyxcbiAgJ2FyaWEtbGFiZWwnOiAnUGFnaW5hdGlvbicsXG59O1xuXG5QYWdpbmF0aW9uLkxpbmsgPSBQYWdpbmF0aW9uTGluaztcblxuZXhwb3J0IGRlZmF1bHQgUGFnaW5hdGlvbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQWlELElBQUFHLFNBQUE7RUFBQUMsVUFBQTtBQUFBLFNBQUFMLHVCQUFBTSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsZ0JBQUFBLEdBQUE7QUFBQSxTQUFBRSxTQUFBLElBQUFBLFFBQUEsR0FBQUMsTUFBQSxDQUFBQyxNQUFBLEdBQUFELE1BQUEsQ0FBQUMsTUFBQSxDQUFBQyxJQUFBLGVBQUFDLE1BQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFDLFNB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