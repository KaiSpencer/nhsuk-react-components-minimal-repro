"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var ReadingWidth = function ReadingWidth(_ref) {
  var className = _ref.className,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-u-reading-width', className)
  }, rest));
};
var _default = ReadingWidth;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX2V4Y2x1ZGVkIiwib2JqIiwiX19lc01vZHVsZSIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic291cmNlS2V5cyIsImtleXMiLCJSZWFkaW5nV2lkdGgiLCJfcmVmIiwiY2xhc3NOYW1lIiwicmVzdCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWVzIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvdXRpbHMvUmVhZGluZ1dpZHRoLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgSFRNTFByb3BzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmNvbnN0IFJlYWRpbmdXaWR0aDogUmVhY3QuRkM8SFRNTFByb3BzPEhUTUxEaXZFbGVtZW50Pj4gPSAoeyBjbGFzc05hbWUsIC4uLnJlc3QgfSkgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcygnbmhzdWstdS1yZWFkaW5nLXdpZHRoJywgY2xhc3NOYW1lKX0gey4uLnJlc3R9IC8+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBSZWFkaW5nV2lkdGg7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFvQyxJQUFBRSxTQUFBO0FBQUEsU0FBQUgsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQUFBLFNBQUFFLFNBQUEsSUFBQUEsUUFBQSxHQUFBQyxNQUFBLENBQUFDLE1BQUEsR0FBQUQsTUFBQSxDQUFBQyxNQUFBLENBQUFDLElBQUEsZUFBQUMsTUFBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQUFGLENBQUEsVUFBQUcsTUFBQSxHQUFBRixTQUFBLENBQUFELENBQUEsWUFBQUksR0FBQSxJQUFBRCxNQUFBLFFBQUFQLE1BQUEsQ0FBQVMsU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQUosTUFBQSxFQUFBQyxHQUFBLEtBQUFMLE1BQUEsQ0FBQUssR0FBQSxJQUFBRCxNQUFBLENBQUFDLEdBQUEsZ0JBQUFMLE1BQUEsWUFBQUosUUFBQSxDQUFBYSxLQUFBLE9BQUFQLFNBQUE7QUFBQSxTQUFBUSx5QkFBQU4sTUFBQSxFQUFBTyxRQUFBLFFBQUFQLE1BQUEseUJBQUFKLE1BQUEsR0FBQVksNkJBQUEsQ0FBQVIsTUFBQSxFQUFBTyxRQUFBLE9BQUFOLEdBQUEsRUFBQUosQ0FBQSxNQUFBSixNQUFBLENBQUFnQixxQkFBQSxRQUFBQyxnQkFBQSxHQUFBakIsTUFBQSxDQUFBZ0IscUJBQUEsQ0FBQVQsTUFBQSxRQUFBSCxDQUFBLE1BQUFBLENBQUEsR0FBQWEsZ0JBQUEsQ0FBQVgsTUFBQSxFQUFBRixDQUFBLE1BQUFJLEdBQUEsR0FBQVMsZ0JBQUEsQ0FBQWIsQ0FBQSxPQUFBVSxRQUFBLENBQUFJLE9BQUEsQ0FBQVYsR0FBQSx1QkFBQVIsTUFBQSxDQUFBUyxTQUFBLENBQUFVLG9CQUFBLENBQUFSLElBQUEsQ0FBQUosTUFBQSxFQUFBQyxHQUFBLGFBQUFMLE1BQUEsQ0FBQUssR0FBQSxJQUFBRCxNQUFBLENBQUFDLEdBQUEsY0FBQUwsTUFBQTtBQUFBLFNBQUFZLDhCQUFBUixNQUFBLEVBQUFPLFFBQUEsUUFBQVAsTUFBQSx5QkFBQUosTUFBQSxXQUFBaUIsVUFBQSxHQUFBcEIsTUFBQSxDQUFBcUIsSUFBQSxDQUFBZCxNQUFBLE9BQUFDLEdBQUEsRUFBQUosQ0FBQSxPQUFBQSxDQUFBLE1BQUFBLENBQUEsR0FBQWdCLFVBQUEsQ0FBQWQsTUFBQSxFQUFBRixDQUFBLE1BQUFJLEdBQUEsR0FBQVksVUFBQSxDQUFBaEIsQ0FBQSxPQUFBVSxRQUFBLENBQUFJLE9BQUEsQ0FBQVYsR0FBQSxrQkFBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxZQUFBTCxNQUFBO0FBRXBDLElBQU1tQixZQUFpRCxHQUFHLFNBQXBEQSxZQUFpREEsQ0FBQUMsSUFBQTtFQUFBLElBQU1DLFNBQVMsR0FBQUQsSUFBQSxDQUFUQyxTQUFTO0lBQUtDLElBQUksR0FBQVosd0JBQUEsQ0FBQVUsSUFBQSxFQUFBM0IsU0FBQTtFQUFBLG9CQUM3RUosTUFBQSxZQUFBa0MsYUFBQSxRQUFBM0IsUUFBQTtJQUFLeUIsU0FBUyxFQUFFLElBQUFHLHNCQUFVLEVBQUMsdUJBQXVCLEVBQUVILFNBQVM7RUFBRSxHQUFLQyxJQUFJLEVBQUk7QUFBQSxDQUM3RTtBQUFDLElBQUFHLFFBQUEsR0FFYU4sWUFBWTtBQUFBTyxPQUFBLGNBQUFELFFBQUEifQ==