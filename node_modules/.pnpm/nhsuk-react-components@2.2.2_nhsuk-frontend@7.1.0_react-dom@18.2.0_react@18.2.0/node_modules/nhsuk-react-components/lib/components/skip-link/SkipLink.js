"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _excluded = ["className", "focusTargetRef", "disableDefaultBehaviour", "href"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var SkipLink = /*#__PURE__*/function (_React$Component) {
  _inherits(SkipLink, _React$Component);
  var _super = _createSuper(SkipLink);
  function SkipLink(props) {
    var _this;
    _classCallCheck(this, SkipLink);
    _this = _super.call(this, props);
    _this.handleHeadingBlur = function (event) {
      event.preventDefault();
      if (_this.firstHeadingElement) {
        _this.unfocusElement(_this.firstHeadingElement);
      }
    };
    _this.getFirstHeadingElement = function () {
      var allHeadings = document.getElementsByTagName('h1');
      if (allHeadings.length > 0) {
        return allHeadings[0];
      }
      return null;
    };
    _this.focusElement = function (element) {
      // Sometimes custom focus code can cause a loop of focus events
      // (especially in IE11), so check for attributes before performing
      // focus actions and DOM manipulation.
      if (!element.hasAttribute('tabIndex')) {
        element.setAttribute('tabIndex', '-1');
      }
      if (document.activeElement !== element) {
        element.focus();
      }
    };
    _this.unfocusElement = function (element) {
      if (element.hasAttribute('tabIndex')) element.removeAttribute('tabIndex');
    };
    _this.onClick = function (event) {
      var _this$props = _this.props,
        onClick = _this$props.onClick,
        focusTargetRef = _this$props.focusTargetRef,
        disableDefaultBehaviour = _this$props.disableDefaultBehaviour;
      if (disableDefaultBehaviour) event.preventDefault();
      if (focusTargetRef && focusTargetRef.current) {
        _this.focusElement(focusTargetRef.current);
      } else if (!disableDefaultBehaviour) {
        // Follow the default NHSUK Frontend behaviour, but go about it in a safer way.
        // https://github.com/nhsuk/nhsuk-frontend/blob/master/packages/components/skip-link/skip-link.js
        if (_this.firstHeadingElement) _this.focusElement(_this.firstHeadingElement);
      }
      if (onClick) {
        event.persist();
        onClick(event);
      }
    };
    _this.firstHeadingElement = null;
    return _this;
  }
  _createClass(SkipLink, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // The standard NHSUK Frontend behaviour is to listen on the
      // blur event on the first heading element.
      this.firstHeadingElement = this.getFirstHeadingElement();
      if (this.firstHeadingElement) {
        this.firstHeadingElement.addEventListener('blur', this.handleHeadingBlur);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.firstHeadingElement) {
        this.firstHeadingElement.removeEventListener('blur', this.handleHeadingBlur);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
        className = _this$props2.className,
        focusTargetRef = _this$props2.focusTargetRef,
        disableDefaultBehaviour = _this$props2.disableDefaultBehaviour,
        href = _this$props2.href,
        rest = _objectWithoutProperties(_this$props2, _excluded);
      return /*#__PURE__*/_react["default"].createElement("a", _extends({
        className: (0, _classnames["default"])('nhsuk-skip-link', className),
        onClick: this.onClick,
        href: disableDefaultBehaviour ? undefined : href
      }, rest));
    }
  }]);
  return SkipLink;
}(_react["default"].Component);
SkipLink.defaultProps = {
  children: 'Skip to main content',
  href: '#maincontent',
  tabIndex: 0
};
var _default = SkipLink;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,