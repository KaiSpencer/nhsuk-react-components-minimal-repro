"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _FormGroup = _interopRequireDefault(require("../../util/FormGroup"));
var _excluded = ["children"],
  _excluded2 = ["className", "error", "selectRef"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var Select = function Select(_ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement(_FormGroup["default"], _extends({
    inputType: "select"
  }, rest), function (_ref2) {
    var className = _ref2.className,
      error = _ref2.error,
      selectRef = _ref2.selectRef,
      restRenderProps = _objectWithoutProperties(_ref2, _excluded2);
    return /*#__PURE__*/_react["default"].createElement("select", _extends({
      className: (0, _classnames["default"])('nhsuk-select', {
        'nhsuk-select--error': error
      }, className),
      ref: selectRef
    }, restRenderProps), children);
  });
};
var Option = function Option(props) {
  return /*#__PURE__*/_react["default"].createElement("option", props);
};
Select.Option = Option;
var _default = Select;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc25hbWVzIiwiX0Zvcm1Hcm91cCIsIl9leGNsdWRlZCIsIl9leGNsdWRlZDIiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsIlNlbGVjdCIsIl9yZWYiLCJjaGlsZHJlbiIsInJlc3QiLCJjcmVhdGVFbGVtZW50IiwiaW5wdXRUeXBlIiwiX3JlZjIiLCJjbGFzc05hbWUiLCJlcnJvciIsInNlbGVjdFJlZiIsInJlc3RSZW5kZXJQcm9wcyIsImNsYXNzTmFtZXMiLCJyZWYiLCJPcHRpb24iLCJwcm9wcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NlbGVjdC9TZWxlY3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBIVE1MUHJvcHMsIE11dGFibGVSZWZPYmplY3QgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgRm9ybUVsZW1lbnRQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWwvdHlwZXMvRm9ybVR5cGVzJztcbmltcG9ydCBGb3JtR3JvdXAgZnJvbSAnLi4vLi4vdXRpbC9Gb3JtR3JvdXAnO1xuXG4vLyAgU2VsZWN0UHJvcHMgPSBIVE1MUHJvcHM8SFRNTFNlbGVjdEVsZW1lbnQ+ICYgRm9ybUVsZW1lbnRQcm9wcztcbmludGVyZmFjZSBJU2VsZWN0UHJvcHMgZXh0ZW5kcyBIVE1MUHJvcHM8SFRNTFNlbGVjdEVsZW1lbnQ+LCBGb3JtRWxlbWVudFByb3BzIHtcbiAgc2VsZWN0UmVmPzogTXV0YWJsZVJlZk9iamVjdDxIVE1MU2VsZWN0RWxlbWVudCB8IG51bGw+O1xufVxuXG5pbnRlcmZhY2UgSVNlbGVjdCBleHRlbmRzIFJlYWN0LkZDPElTZWxlY3RQcm9wcz4ge1xuICBPcHRpb246IFJlYWN0LkZDPEhUTUxQcm9wczxIVE1MT3B0aW9uRWxlbWVudD4+O1xufVxuXG5jb25zdCBTZWxlY3Q6IElTZWxlY3QgPSAoeyBjaGlsZHJlbiwgLi4ucmVzdCB9KSA9PiAoXG4gIDxGb3JtR3JvdXA8SVNlbGVjdFByb3BzPiBpbnB1dFR5cGU9XCJzZWxlY3RcIiB7Li4ucmVzdH0+XG4gICAgeyh7XG4gICAgICBjbGFzc05hbWUsIGVycm9yLCBzZWxlY3RSZWYsIC4uLnJlc3RSZW5kZXJQcm9wc1xuICAgIH0pID0+IChcbiAgICAgIDxzZWxlY3RcbiAgICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWVzKCduaHN1ay1zZWxlY3QnLCB7ICduaHN1ay1zZWxlY3QtLWVycm9yJzogZXJyb3IgfSwgY2xhc3NOYW1lKX1cbiAgICAgICAgcmVmPXtzZWxlY3RSZWZ9XG4gICAgICAgIHsuLi5yZXN0UmVuZGVyUHJvcHN9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvc2VsZWN0PlxuICAgICl9XG4gIDwvRm9ybUdyb3VwPlxuKTtcblxuY29uc3QgT3B0aW9uOiBSZWFjdC5GQzxIVE1MUHJvcHM8SFRNTE9wdGlvbkVsZW1lbnQ+PiA9IChwcm9wcykgPT4gPG9wdGlvbiB7Li4ucHJvcHN9IC8+O1xuXG5TZWxlY3QuT3B0aW9uID0gT3B0aW9uO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFDLFdBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFFLFVBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUE2QyxJQUFBRyxTQUFBO0VBQUFDLFVBQUE7QUFBQSxTQUFBTCx1QkFBQU0sR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsU0FBQSxJQUFBQSxRQUFBLEdBQUFDLE1BQUEsQ0FBQUMsTUFBQSxHQUFBRCxNQUFBLENBQUFDLE1BQUEsQ0FBQUMsSUFBQSxlQUFBQyxNQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUYsQ0FBQSxVQUFBRyxNQUFBLEdBQUFGLFNBQUEsQ0FBQUQsQ0FBQSxZQUFBSSxHQUFBLElBQUFELE1BQUEsUUFBQVAsTUFBQSxDQUFBUyxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsS0FBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxnQkFBQUwsTUFBQSxZQUFBSixRQUFBLENBQUFhLEtBQUEsT0FBQVAsU0FBQTtBQUFBLFNBQUFRLHlCQUFBTixNQUFBLEVBQUFPLFFBQUEsUUFBQVAsTUFBQSx5QkFBQUosTUFBQSxHQUFBWSw2QkFBQSxDQUFBUixNQUFBLEVBQUFPLFFBQUEsT0FBQU4sR0FBQSxFQUFBSixDQUFBLE1BQUFKLE1BQUEsQ0FBQWdCLHFCQUFBLFFBQUFDLGdCQUFBLEdBQUFqQixNQUFBLENBQUFnQixxQkFBQSxDQUFBVCxNQUFBLFFBQUFILENBQUEsTUFBQUEsQ0FBQSxHQUFBYSxnQkFBQSxDQUFBWCxNQUFBLEVBQUFGLENBQUEsTUFBQUksR0FBQSxHQUFBUyxnQkFBQSxDQUFBYixDQUFBLE9BQUFVLFFBQUEsQ0FBQUksT0FBQSxDQUFBVixHQUFBLHVCQUFBUixNQUFBLENBQUFTLFNBQUEsQ0FBQVUsb0JBQUEsQ0FBQVIsSUFBQSxDQUFBSixNQUFBLEVBQUFDLEdBQUEsYUFBQUwsTUFBQSxDQUFBSyxHQUFBLElBQUFELE1BQUEsQ0FBQUMsR0FBQSxjQUFBTCxNQUFBO0FBQUEsU0FBQVksOEJBQUFSLE1BQUEsRUFBQU8sUUFBQSxRQUFBUCxNQUFBLHlCQUFBSixNQUFBLFdBQUFpQixVQUFBLEdBQUFwQixNQUFBLENBQUFxQixJQUFBLENBQUFkLE1BQUEsT0FBQUMsR0FBQSxFQUFBSixDQUFBLE9BQUFBLENBQUEsTUFBQUEsQ0FBQSxHQUFBZ0IsVUFBQSxDQUFBZCxNQUFBLEVBQUFGLENBQUEsTUFBQUksR0FBQSxHQUFBWSxVQUFBLENBQUFoQixDQUFBLE9BQUFVLFFBQUEsQ0FBQUksT0FBQSxDQUFBVixHQUFBLGtCQUFBTCxNQUFBLENBQUFLLEdBQUEsSUFBQUQsTUFBQSxDQUFBQyxHQUFBLFlBQUFMLE1BQUE7QUFXN0MsSUFBTW1CLE1BQWUsR0FBRyxTQUFsQkEsTUFBZUEsQ0FBQUMsSUFBQTtFQUFBLElBQU1DLFFBQVEsR0FBQUQsSUFBQSxDQUFSQyxRQUFRO0lBQUtDLElBQUksR0FBQVosd0JBQUEsQ0FBQVUsSUFBQSxFQUFBNUIsU0FBQTtFQUFBLG9CQUMxQ0wsTUFBQSxZQUFBb0MsYUFBQSxDQUFDaEMsVUFBQSxXQUFTLEVBQUFLLFFBQUE7SUFBZTRCLFNBQVMsRUFBQztFQUFRLEdBQUtGLElBQUksR0FDakQsVUFBQUcsS0FBQTtJQUFBLElBQ0NDLFNBQVMsR0FBQUQsS0FBQSxDQUFUQyxTQUFTO01BQUVDLEtBQUssR0FBQUYsS0FBQSxDQUFMRSxLQUFLO01BQUVDLFNBQVMsR0FBQUgsS0FBQSxDQUFURyxTQUFTO01BQUtDLGVBQWUsR0FBQW5CLHdCQUFBLENBQUFlLEtBQUEsRUFBQWhDLFVBQUE7SUFBQSxvQkFFL0NOLE1BQUEsWUFBQW9DLGFBQUEsV0FBQTNCLFFBQUE7TUFDRThCLFNBQVMsRUFBRSxJQUFBSSxzQkFBVSxFQUFDLGNBQWMsRUFBRTtRQUFFLHFCQUFxQixFQUFFSDtNQUFNLENBQUMsRUFBRUQsU0FBUyxDQUFFO01BQ25GSyxHQUFHLEVBQUVIO0lBQVUsR0FDWEMsZUFBZSxHQUVsQlIsUUFBUSxDQUNGO0VBQUEsQ0FDVixDQUNTO0FBQUEsQ0FDYjtBQUVELElBQU1XLE1BQThDLEdBQUcsU0FBakRBLE1BQThDQSxDQUFJQyxLQUFLO0VBQUEsb0JBQUs5QyxNQUFBLFlBQUFvQyxhQUFBLFdBQVlVLEtBQUssQ0FBSTtBQUFBO0FBRXZGZCxNQUFNLENBQUNhLE1BQU0sR0FBR0EsTUFBTTtBQUFDLElBQUFFLFFBQUEsR0FFUmYsTUFBTTtBQUFBZ0IsT0FBQSxjQUFBRCxRQUFBIn0=