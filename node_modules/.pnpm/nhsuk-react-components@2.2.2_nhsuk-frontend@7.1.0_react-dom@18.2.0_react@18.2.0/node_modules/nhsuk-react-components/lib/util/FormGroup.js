"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _Hint = _interopRequireDefault(require("../components/hint/Hint"));
var _ErrorMessage = _interopRequireDefault(require("../components/error-message/ErrorMessage"));
var _RandomID = require("./RandomID");
var _Label = _interopRequireDefault(require("../components/label/Label"));
var _FieldsetContext = _interopRequireDefault(require("../components/fieldset/FieldsetContext"));
var _form = require("../components/form");
var _excluded = ["children", "hint", "label", "id", "labelProps", "error", "hintProps", "errorProps", "formGroupProps", "inputType", "disableErrorLine", "name"],
  _excluded2 = ["className"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var FormGroup = function FormGroup(props) {
  var children = props.children,
    hint = props.hint,
    label = props.label,
    id = props.id,
    labelProps = props.labelProps,
    error = props.error,
    hintProps = props.hintProps,
    errorProps = props.errorProps,
    formGroupProps = props.formGroupProps,
    inputType = props.inputType,
    disableErrorLine = props.disableErrorLine,
    name = props.name,
    rest = _objectWithoutProperties(props, _excluded);
  var _useState = (0, _react.useState)((0, _RandomID.generateRandomID)(inputType)),
    _useState2 = _slicedToArray(_useState, 1),
    generatedID = _useState2[0];
  var _useContext = (0, _react.useContext)(_FieldsetContext["default"]),
    isFieldset = _useContext.isFieldset,
    registerComponent = _useContext.registerComponent,
    passError = _useContext.passError;
  var _useFormContext = (0, _form.useFormContext)(),
    disableErrorFromComponents = _useFormContext.disableErrorFromComponents;
  var elementID = id || generatedID;
  var labelID = "".concat(elementID, "--label");
  var errorID = "".concat(elementID, "--error-message");
  var hintID = "".concat(elementID, "--hint");
  var childProps = _objectSpread({
    'aria-describedby': hint ? hintID : undefined,
    'aria-labelledby': label ? labelID : undefined,
    error: error,
    name: name || elementID,
    id: elementID
  }, rest);
  (0, _react.useEffect)(function () {
    if (!isFieldset) return;
    passError(elementID, disableErrorFromComponents ? false : Boolean(error));
    return function () {
      return passError(elementID, false);
    };
  }, [elementID, error, isFieldset]);
  (0, _react.useEffect)(function () {
    registerComponent(elementID);
    return function () {
      return registerComponent(elementID, true);
    };
  }, []);
  var _ref = formGroupProps || {},
    formGroupClassName = _ref.className,
    formGroupRestProps = _objectWithoutProperties(_ref, _excluded2);
  return /*#__PURE__*/_react["default"].createElement("div", _extends({
    className: (0, _classnames["default"])('nhsuk-form-group', {
      'nhsuk-form-group--error': !disableErrorFromComponents && !disableErrorLine && error
    }, formGroupClassName)
  }, formGroupRestProps), label ? /*#__PURE__*/_react["default"].createElement(_Label["default"], _extends({
    id: labelID,
    htmlFor: elementID
  }, labelProps), label) : null, hint ? /*#__PURE__*/_react["default"].createElement(_Hint["default"], _extends({
    id: hintID
  }, hintProps), hint) : null, error && typeof error === 'string' ? /*#__PURE__*/_react["default"].createElement(_ErrorMessage["default"], _extends({
    id: errorID
  }, errorProps), error) : null, children(childProps));
};
var _default = FormGroup;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,