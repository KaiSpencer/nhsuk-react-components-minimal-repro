"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _PromoContext = _interopRequireDefault(require("./PromoContext"));
var _layout = require("../../../components/layout");
var _UseDevWarning = _interopRequireDefault(require("../../../util/hooks/UseDevWarning"));
var _warnings = require("../../warnings");
var _HeadingLevel = _interopRequireDefault(require("../../../util/HeadingLevel"));
var _excluded = ["className", "children", "imageSrc", "imageProps", "small", "asElement"],
  _excluded2 = ["className"],
  _excluded3 = ["className"],
  _excluded4 = ["className"],
  _excluded5 = ["className", "children"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var BasePromo = function BasePromo(_ref) {
  var className = _ref.className,
    children = _ref.children,
    imageSrc = _ref.imageSrc,
    imageProps = _ref.imageProps,
    small = _ref.small,
    _ref$asElement = _ref.asElement,
    Component = _ref$asElement === void 0 ? 'a' : _ref$asElement,
    rest = _objectWithoutProperties(_ref, _excluded);
  (0, _UseDevWarning["default"])(_warnings.PromoDeprecationWarning);
  var _ref2 = imageProps || {},
    imageClassName = _ref2.className,
    restImageProps = _objectWithoutProperties(_ref2, _excluded2);
  return /*#__PURE__*/_react["default"].createElement("div", {
    className: (0, _classnames["default"])('nhsuk-promo', {
      'nhsuk-promo--small': small
    }, className)
  }, /*#__PURE__*/_react["default"].createElement(Component, _extends({
    className: "nhsuk-promo__link-wrapper"
  }, rest), imageSrc ? /*#__PURE__*/_react["default"].createElement("img", _extends({
    className: (0, _classnames["default"])('nhsuk-promo__img', imageClassName),
    src: imageSrc
  }, restImageProps)) : null, /*#__PURE__*/_react["default"].createElement("div", {
    className: "nhsuk-promo__content"
  }, children)));
};
BasePromo.defaultProps = {
  imageProps: {}
};
var PromoHeading = function PromoHeading(_ref3) {
  var className = _ref3.className,
    rest = _objectWithoutProperties(_ref3, _excluded3);
  return /*#__PURE__*/_react["default"].createElement(_HeadingLevel["default"], _extends({
    className: (0, _classnames["default"])('nhsuk-promo__heading', className)
  }, rest));
};
PromoHeading.defaultProps = {
  headingLevel: 'h3'
};
var PromoDescription = function PromoDescription(_ref4) {
  var className = _ref4.className,
    rest = _objectWithoutProperties(_ref4, _excluded4);
  return /*#__PURE__*/_react["default"].createElement("p", _extends({
    className: (0, _classnames["default"])('nhsuk-promo__description', className)
  }, rest));
};
var PromoGroup = function PromoGroup(_ref5) {
  var className = _ref5.className,
    children = _ref5.children,
    rest = _objectWithoutProperties(_ref5, _excluded5);
  var promoCount = 0;
  _react["default"].Children.forEach(children, function (child) {
    if (child && /*#__PURE__*/(0, _react.isValidElement)(child) && child.type === Promo) {
      promoCount += 1;
    }
  });
  return /*#__PURE__*/_react["default"].createElement(_layout.Row, _extends({
    className: (0, _classnames["default"])('nhsuk-promo-group', className)
  }, rest), /*#__PURE__*/_react["default"].createElement(_PromoContext["default"].Provider, {
    value: {
      promoCount: promoCount,
      isGroup: true
    }
  }, children));
};
var Promo = function Promo(props) {
  var _useContext = (0, _react.useContext)(_PromoContext["default"]),
    isGroup = _useContext.isGroup,
    promoCount = _useContext.promoCount;
  var promoWidth;
  if (isGroup) {
    switch (promoCount) {
      case 2:
        promoWidth = 'one-half';
        break;
      case 3:
        promoWidth = 'one-third';
        break;
      case 4:
        promoWidth = 'one-quarter';
        break;
      default:
        promoWidth = 'full';
        break;
    }
    return /*#__PURE__*/_react["default"].createElement(_layout.Col, {
      className: "nhsuk-promo-group__item",
      width: promoWidth
    }, /*#__PURE__*/_react["default"].createElement(BasePromo, props));
  }
  return /*#__PURE__*/_react["default"].createElement(BasePromo, props);
};
Promo.Group = PromoGroup;
Promo.Description = PromoDescription;
Promo.Heading = PromoHeading;
var _default = Promo;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,