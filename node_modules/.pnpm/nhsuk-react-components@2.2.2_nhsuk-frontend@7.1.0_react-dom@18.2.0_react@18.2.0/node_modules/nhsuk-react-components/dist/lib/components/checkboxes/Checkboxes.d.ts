import React, { HTMLProps, PureComponent } from 'react';
import { FormElementProps } from '../../util/types/FormTypes';
interface CheckboxesProps extends HTMLProps<HTMLDivElement>, FormElementProps {
    idPrefix?: string;
}
declare type CheckboxesState = {
    conditionalBoxes: Array<string>;
};
declare class Checkboxes extends PureComponent<CheckboxesProps, CheckboxesState> {
    private boxCount;
    private boxReferences;
    private boxIds;
    constructor(props: CheckboxesProps);
    leaseReference: () => string;
    unleaseReference: (reference: string) => void;
    setConditional: (boxReference: string, hasConditional: boolean) => void;
    getBoxId: (id: string, reference: string) => string;
    resetBoxIds: () => void;
    static Box: React.FC<Omit<React.HTMLProps<HTMLInputElement>, "label"> & {
        labelProps?: import("../label/Label").LabelProps | undefined;
        hint?: string | undefined;
        hintProps?: import("../hint/Hint").HintProps | undefined;
        conditional?: React.ReactNode;
        forceShowConditional?: boolean | undefined;
        conditionalWrapperProps?: React.HTMLProps<HTMLDivElement> | undefined;
        inputRef?: React.MutableRefObject<HTMLInputElement | null> | undefined;
    }>;
    render(): JSX.Element;
}
export default Checkboxes;
