'use strict';

var React = require('react');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var classnames = {exports: {}};

/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

(function (module) {
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames() {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					if (arg.length) {
						var inner = classNames.apply(null, arg);
						if (inner) {
							classes.push(inner);
						}
					}
				} else if (argType === 'object') {
					if (arg.toString === Object.prototype.toString) {
						for (var key in arg) {
							if (hasOwn.call(arg, key) && arg[key]) {
								classes.push(key);
							}
						}
					} else {
						classes.push(arg.toString());
					}
				}
			}

			return classes.join(' ');
		}

		if (module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}()); 
} (classnames));

var classnamesExports = classnames.exports;
var classNames = /*@__PURE__*/getDefaultExportFromCjs(classnamesExports);

const BaseIconSVG = (_a) => {
    var { className, children, height, width, iconType } = _a, rest = __rest(_a, ["className", "children", "height", "width", "iconType"]);
    return (React.createElement("svg", Object.assign({ className: classNames('nhsuk-icon', iconType, className), xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", "aria-hidden": "true", height: height, width: width }, rest), children));
};
BaseIconSVG.defaultProps = {
    height: 32,
    width: 32,
};
const ArrowLeft = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__arrow-left" }, props),
    React.createElement("path", { d: "M4.1 12.3l2.7 3c.2.2.5.2.7 0 .1-.1.1-.2.1-.3v-2h11c.6 0 1-.4 1-1s-.4-1-1-1h-11V9c0-.2-.1-.4-.3-.5h-.2c-.1 0-.3.1-.4.2l-2.7 3c0 .2 0 .4.1.6z" })));
const ArrowRight = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__arrow-right" }, props),
    React.createElement("path", { d: "M19.6 11.66l-2.73-3A.51.51 0 0 0 16 9v2H5a1 1 0 0 0 0 2h11v2a.5.5 0 0 0 .32.46.39.39 0 0 0 .18 0 .52.52 0 0 0 .37-.16l2.73-3a.5.5 0 0 0 0-.64z" })));
const ArrowRightCircle = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__arrow-right-circle" }, props),
    React.createElement("path", { d: "M0 0h24v24H0z", fill: "none" }),
    React.createElement("path", { d: "M12 2a10 10 0 0 0-9.95 9h11.64L9.74 7.05a1 1 0 0 1 1.41-1.41l5.66 5.65a1 1 0 0 1 0 1.42l-5.66 5.65a1 1 0 0 1-1.41 0 1 1 0 0 1 0-1.41L13.69 13H2.05A10 10 0 1 0 12 2z" })));
const ChevronLeft = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__chevron-left" }, props),
    React.createElement("path", { d: "M8.5 12c0-.3.1-.5.3-.7l5-5c.4-.4 1-.4 1.4 0s.4 1 0 1.4L10.9 12l4.3 4.3c.4.4.4 1 0 1.4s-1 .4-1.4 0l-5-5c-.2-.2-.3-.4-.3-.7z" })));
const ChevronRight = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__chevron-right" }, props),
    React.createElement("path", { d: "M15.5 12a1 1 0 0 1-.29.71l-5 5a1 1 0 0 1-1.42-1.42l4.3-4.29-4.3-4.29a1 1 0 0 1 1.42-1.42l5 5a1 1 0 0 1 .29.71z" })));
const Close = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__close" }, props),
    React.createElement("path", { d: "M13.41 12l5.3-5.29a1 1 0 1 0-1.42-1.42L12 10.59l-5.29-5.3a1 1 0 0 0-1.42 1.42l5.3 5.29-5.3 5.29a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0l5.29-5.3 5.29 5.3a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42z" })));
const Cross = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__cross" }, props),
    React.createElement("path", { d: "M17 18.5c-.4 0-.8-.1-1.1-.4l-10-10c-.6-.6-.6-1.6 0-2.1.6-.6 1.5-.6 2.1 0l10 10c.6.6.6 1.5 0 2.1-.3.3-.6.4-1 .4z" }),
    React.createElement("path", { d: "M7 18.5c-.4 0-.8-.1-1.1-.4-.6-.6-.6-1.5 0-2.1l10-10c.6-.6 1.5-.6 2.1 0 .6.6.6 1.5 0 2.1l-10 10c-.3.3-.6.4-1 .4z" })));
const SmallEmdash = (_a) => {
    var { height, width } = _a, rest = __rest(_a, ["height", "width"]);
    return (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__emdash", height: height || 1, width: width || 16 }, rest),
        React.createElement("path", { d: "M0 0h16v1H0z" })));
};
const Emdash = (_a) => {
    var { height, width } = _a, rest = __rest(_a, ["height", "width"]);
    return (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__emdash", height: height || 1, width: width || 19 }, rest),
        React.createElement("path", { d: "M0 0h19v1H0z" })));
};
const Minus = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__minus" }, props),
    React.createElement("circle", { cx: "12", cy: "12", r: "10" }),
    React.createElement("path", { fill: "none", stroke: "#fff", strokeLinecap: "round", strokeMiterlimit: "10", strokeWidth: "2", d: "M8 12h8" })));
const Plus = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__minus" }, props),
    React.createElement("circle", { cx: "12", cy: "12", r: "10" }),
    React.createElement("path", { fill: "none", stroke: "#fff", strokeLinecap: "round", strokeMiterlimit: "10", strokeWidth: "2", d: "M12 8v8M8 12h8" })));
const Search$1 = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__search" }, props),
    React.createElement("path", { d: "M19.71 18.29l-4.11-4.1a7 7 0 1 0-1.41 1.41l4.1 4.11a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42zM5 10a5 5 0 1 1 5 5 5 5 0 0 1-5-5z" })));
const Tick = (props) => (React.createElement(BaseIconSVG, Object.assign({ iconType: "nhsuk-icon__tick" }, props),
    React.createElement("path", { strokeWidth: "4", strokeLinecap: "round", stroke: "#007f3b", fill: "none", d: "M18.4 7.8l-8.5 8.4L5.6 12" })));

var Icons = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ArrowLeft: ArrowLeft,
    ArrowRight: ArrowRight,
    ArrowRightCircle: ArrowRightCircle,
    BaseIconSVG: BaseIconSVG,
    ChevronLeft: ChevronLeft,
    ChevronRight: ChevronRight,
    Close: Close,
    Cross: Cross,
    Emdash: Emdash,
    Minus: Minus,
    Plus: Plus,
    Search: Search$1,
    SmallEmdash: SmallEmdash,
    Tick: Tick
});

const ActionLink = (_a) => {
    var { children, asElement: Component = 'a', className } = _a, rest = __rest(_a, ["children", "asElement", "className"]);
    return (React.createElement("div", { className: "nhsuk-action-link" },
        React.createElement(Component, Object.assign({ className: classNames('nhsuk-action-link__link', className) }, rest),
            React.createElement(ArrowRightCircle, null),
            React.createElement("span", { className: "nhsuk-action-link__text" }, children))));
};

const BackLink = (_a) => {
    var { children, className, asElement: Component = 'a' } = _a, rest = __rest(_a, ["children", "className", "asElement"]);
    return (React.createElement("div", { className: "nhsuk-back-link" },
        React.createElement(Component, Object.assign({ className: classNames('nhsuk-back-link__link', className) }, rest),
            React.createElement(ChevronLeft, null),
            children)));
};

const Container = (_a) => {
    var { className, fluid } = _a, rest = __rest(_a, ["className", "fluid"]);
    return (React.createElement("div", Object.assign({ className: classNames({ 'nhsuk-width-container': !fluid }, { 'nhsuk-width-container-fluid': fluid }, className) }, rest)));
};

const Col = (_a) => {
    var { className, width } = _a, rest = __rest(_a, ["className", "width"]);
    return (React.createElement("div", Object.assign({ className: classNames(`nhsuk-grid-column-${width}`, className) }, rest)));
};

const Row = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-grid-row', className) }, rest)));
};

const Item = (_a) => {
    var { className, children, asElement: Component = 'a' } = _a, rest = __rest(_a, ["className", "children", "asElement"]);
    return (React.createElement("li", { className: "nhsuk-breadcrumb__item" },
        React.createElement(Component, Object.assign({ className: classNames('nhsuk-breadcrumb__link', className) }, rest), children)));
};
const Back = (_a) => {
    var { className, asElement: Component = 'a' } = _a, rest = __rest(_a, ["className", "asElement"]);
    return (React.createElement("p", { className: classNames('nhsuk-breadcrumb__back', className) },
        React.createElement(Component, Object.assign({ className: "nhsuk-breadcrumb__backlink" }, rest))));
};
const Breadcrumb = (_a) => {
    var { className, children } = _a, rest = __rest(_a, ["className", "children"]);
    // Split off any "Item" components
    const { ItemChildren, OtherChildren } = React.Children.toArray(children).reduce((prev, child) => {
        if (child && typeof child === 'object' && 'type' in child && child.type === Item) {
            prev.ItemChildren.push(child);
        }
        else {
            prev.OtherChildren.push(child);
        }
        return prev;
    }, {
        ItemChildren: [],
        OtherChildren: [],
    });
    return (React.createElement("nav", Object.assign({ className: classNames('nhsuk-breadcrumb', className) }, rest),
        React.createElement(Container, null,
            React.createElement("ol", { className: "nhsuk-breadcrumb__list" }, ItemChildren),
            OtherChildren)));
};
Breadcrumb.Item = Item;
Breadcrumb.Back = Back;
Breadcrumb.defaultProps = {
    'aria-label': 'Breadcrumb',
};

const Button = (_a) => {
    var { className, disabled, secondary, reverse } = _a, rest = __rest(_a, ["className", "disabled", "secondary", "reverse"]);
    return (
    // eslint-disable-next-line react/button-has-type
    React.createElement("button", Object.assign({ className: classNames('nhsuk-button', { 'nhsuk-button--disabled': disabled }, { 'nhsuk-button--secondary': secondary }, { 'nhsuk-button--reverse': reverse }, className), disabled: disabled, "aria-disabled": disabled ? 'true' : 'false' }, rest)));
};
Button.defaultProps = {
    type: 'submit',
};
const ButtonLink = (_a) => {
    var { className, role, draggable, children, disabled, secondary, reverse } = _a, rest = __rest(_a, ["className", "role", "draggable", "children", "disabled", "secondary", "reverse"]);
    return (React.createElement("a", Object.assign({ className: classNames('nhsuk-button', { 'nhsuk-button--disabled': disabled }, { 'nhsuk-button--secondary': secondary }, { 'nhsuk-button--reverse': reverse }, className), role: role, "aria-disabled": disabled ? 'true' : 'false', draggable: draggable }, rest), children));
};
ButtonLink.defaultProps = {
    role: 'button',
    draggable: false,
};
const ButtonWrapper = (_a) => {
    var { href, as } = _a, rest = __rest(_a, ["href", "as"]);
    if (as === 'a') {
        return React.createElement(ButtonLink, Object.assign({ href: href }, rest));
    }
    if (as === 'button') {
        return React.createElement(Button, Object.assign({}, rest));
    }
    if (href) {
        return React.createElement(ButtonLink, Object.assign({ href: href }, rest));
    }
    return React.createElement(Button, Object.assign({}, rest));
};

const CardContext = React.createContext({
    feature: false,
});

const CardContent = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    const { feature } = React.useContext(CardContext);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-card__content', { 'nhsuk-card__content--feature': feature }, className) }, rest)));
};

const CardDescription = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("p", Object.assign({ className: classNames('nhsuk-card__description', className) }, rest)));
};

const CardImage = (_a) => {
    var { className, alt } = _a, rest = __rest(_a, ["className", "alt"]);
    return (React.createElement("img", Object.assign({ className: classNames('nhsuk-card__img', className), alt: alt }, rest)));
};

const CardLink = (_a) => {
    var { className, asElement: Component = 'a' } = _a, rest = __rest(_a, ["className", "asElement"]);
    return (React.createElement(Component, Object.assign({ className: classNames('nhsuk-card__link', className) }, rest)));
};

const HeadingLevel = (_a) => {
    var { headingLevel = 'h3' } = _a, rest = __rest(_a, ["headingLevel"]);
    switch (headingLevel.toLowerCase()) {
        case 'h1':
            return React.createElement("h1", Object.assign({}, rest));
        case 'h2':
            return React.createElement("h2", Object.assign({}, rest));
        case 'h3':
            return React.createElement("h3", Object.assign({}, rest));
        case 'h4':
            return React.createElement("h4", Object.assign({}, rest));
        case 'h5':
            return React.createElement("h5", Object.assign({}, rest));
        case 'h6':
            return React.createElement("h6", Object.assign({}, rest));
        default:
            console.error(`HeadingLevel: Invalid headingLevel prop: ${headingLevel}`);
            return React.createElement("h3", Object.assign({}, rest));
    }
};

const CardHeading = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    const { feature } = React.useContext(CardContext);
    return (React.createElement(HeadingLevel, Object.assign({ className: classNames('nhsuk-card__heading', { 'nhsuk-card__heading--feature': feature }, className) }, rest)));
};
CardHeading.defaultProps = {
    headingLevel: 'h2',
};

const CardGroup = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement(Row, Object.assign({ className: classNames('nhsuk-card-group', className) }, rest)));
};

const CardGroupItem = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement(Col, Object.assign({ className: classNames('nhsuk-card-group__item', className) }, rest)));
};

const Card = (_a) => {
    var { className, clickable, children, feature } = _a, rest = __rest(_a, ["className", "clickable", "children", "feature"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-card', { 'nhsuk-card--clickable': clickable }, { 'nhsuk-card--feature': feature }, className) }, rest),
        React.createElement(CardContext.Provider, { value: { feature: Boolean(feature) } }, children)));
};
Card.defaultProps = {
    feature: false,
};
Card.Heading = CardHeading;
Card.Description = CardDescription;
Card.Image = CardImage;
Card.Link = CardLink;
Card.Content = CardContent;
Card.Group = CardGroup;
Card.GroupItem = CardGroupItem;

const CareCardContext = React.createContext('non-urgent');
const genHiddenText = (cardType) => {
    switch (cardType) {
        case 'non-urgent':
            return 'Non-urgent advice: ';
        case 'urgent':
            return 'Urgent advice: ';
        case 'immediate':
            return 'Immediate action required: ';
        default:
            return '';
    }
};
const CareCardContent = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-care-card__content', className) }, rest)));
};
const CareCardHeading = (_a) => {
    var { className, children, visuallyHiddenText, headingLevel, role } = _a, rest = __rest(_a, ["className", "children", "visuallyHiddenText", "headingLevel", "role"]);
    const cardType = React.useContext(CareCardContext);
    return (React.createElement("div", { className: "nhsuk-care-card__heading-container" },
        React.createElement(HeadingLevel, Object.assign({ className: classNames('nhsuk-care-card__heading', className), headingLevel: headingLevel }, rest),
            React.createElement("span", { role: role },
                visuallyHiddenText !== false ? (React.createElement("span", { className: "nhsuk-u-visually-hidden" }, visuallyHiddenText || genHiddenText(cardType))) : null,
                children)),
        React.createElement("span", { className: "nhsuk-care-card__arrow", "aria-hidden": "true" })));
};
CareCardHeading.defaultProps = {
    role: 'text',
};
const CareCard = (_a) => {
    var { className, type, children } = _a, rest = __rest(_a, ["className", "type", "children"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-care-card', `nhsuk-care-card--${type}`, className) }, rest),
        React.createElement(CareCardContext.Provider, { value: type }, children)));
};
CareCard.Content = CareCardContent;
CareCard.Heading = CareCardHeading;

const Hint = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-hint', className) }, rest)));
};

const ErrorMessage = (_a) => {
    var { className, visuallyHiddenText, children } = _a, rest = __rest(_a, ["className", "visuallyHiddenText", "children"]);
    return (React.createElement("span", Object.assign({ className: classNames('nhsuk-error-message', className) }, rest),
        visuallyHiddenText !== false ? (React.createElement("span", { className: "nhsuk-u-visually-hidden" }, visuallyHiddenText)) : null,
        children));
};
ErrorMessage.defaultProps = {
    visuallyHiddenText: 'Error: ',
    role: 'alert',
};

const getRandomString = (length = 5) => {
    const randomNumber = Math.random() + 1;
    return randomNumber.toString(36).substring(2, length + 2);
};
const generateRandomName = (prefix) => {
    const randomString = getRandomString();
    return prefix ? `${prefix}_${randomString}` : randomString;
};
const generateRandomID = generateRandomName;

const BaseLabel = (_a) => {
    var { className, bold, size, isPageHeading } = _a, rest = __rest(_a, ["className", "bold", "size", "isPageHeading"]);
    return (
    // eslint-disable-next-line jsx-a11y/label-has-associated-control
    React.createElement("label", Object.assign({ className: classNames('nhsuk-label', { 'nhsuk-label--s': bold && !size }, { 'nhsuk-label--xl': isPageHeading && !size }, { [`nhsuk-label--${size}`]: size }, className) }, rest)));
};
const Label = (_a) => {
    var { isPageHeading } = _a, rest = __rest(_a, ["isPageHeading"]);
    if (isPageHeading) {
        return (React.createElement("h1", { className: "nhsuk-label-wrapper" },
            React.createElement(BaseLabel, Object.assign({ isPageHeading: true }, rest))));
    }
    return React.createElement(BaseLabel, Object.assign({}, rest));
};

const FieldsetContext = React.createContext({
    /* eslint-disable @typescript-eslint/no-empty-function */
    isFieldset: false,
    passError: () => { },
    registerComponent: () => { },
});

const FormContext = React.createContext({
    disableErrorFromComponents: false,
});
const useFormContext = () => React.useContext(FormContext);

const Form = (_a) => {
    var { disableErrorFromComponents } = _a, rest = __rest(_a, ["disableErrorFromComponents"]);
    return (React.createElement(FormContext.Provider, { value: { disableErrorFromComponents: Boolean(disableErrorFromComponents) } },
        React.createElement("form", Object.assign({}, rest))));
};

const FormGroup = (props) => {
    const { children, hint, label, id, labelProps, error, hintProps, errorProps, formGroupProps, inputType, disableErrorLine, name } = props, rest = __rest(props, ["children", "hint", "label", "id", "labelProps", "error", "hintProps", "errorProps", "formGroupProps", "inputType", "disableErrorLine", "name"]);
    const [generatedID] = React.useState(generateRandomID(inputType));
    const { isFieldset, registerComponent, passError } = React.useContext(FieldsetContext);
    const { disableErrorFromComponents } = useFormContext();
    const elementID = id || generatedID;
    const labelID = `${elementID}--label`;
    const errorID = `${elementID}--error-message`;
    const hintID = `${elementID}--hint`;
    const childProps = Object.assign({ 'aria-describedby': hint ? hintID : undefined, 'aria-labelledby': label ? labelID : undefined, error, name: name || elementID, id: elementID }, rest);
    React.useEffect(() => {
        if (!isFieldset)
            return;
        passError(elementID, disableErrorFromComponents ? false : Boolean(error));
        return () => passError(elementID, false);
    }, [elementID, error, isFieldset]);
    React.useEffect(() => {
        registerComponent(elementID);
        return () => registerComponent(elementID, true);
    }, []);
    const _a = formGroupProps || {}, { className: formGroupClassName } = _a, formGroupRestProps = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-form-group', {
            'nhsuk-form-group--error': !disableErrorFromComponents && !disableErrorLine && error,
        }, formGroupClassName) }, formGroupRestProps),
        label ? (React.createElement(Label, Object.assign({ id: labelID, htmlFor: elementID }, labelProps), label)) : null,
        hint ? (React.createElement(Hint, Object.assign({ id: hintID }, hintProps), hint)) : null,
        error && typeof error === 'string' ? (React.createElement(ErrorMessage, Object.assign({ id: errorID }, errorProps), error)) : null,
        children(childProps)));
};

var CheckboxContext = React.createContext({
    /* eslint-disable @typescript-eslint/no-empty-function */
    name: '',
    getBoxId: () => undefined,
    setConditional: () => { },
    leaseReference: () => '',
    unleaseReference: () => { },
});

const Box = (_a) => {
    var { id, labelProps, children, hint, hintProps, conditional, defaultChecked, checked, onChange, inputRef, forceShowConditional, conditionalWrapperProps } = _a, rest = __rest(_a, ["id", "labelProps", "children", "hint", "hintProps", "conditional", "defaultChecked", "checked", "onChange", "inputRef", "forceShowConditional", "conditionalWrapperProps"]);
    const { getBoxId, name, setConditional, unleaseReference, leaseReference } = React.useContext(CheckboxContext);
    const [boxReference] = React.useState(leaseReference());
    const [showConditional, setShowConditional] = React.useState(!!(checked || defaultChecked));
    const inputID = id || getBoxId(boxReference);
    const _b = labelProps || {}, { className: labelClassName } = _b, restLabelProps = __rest(_b, ["className"]);
    const _c = hintProps || {}, { className: hintClassName } = _c, restHintProps = __rest(_c, ["className"]);
    const _d = conditionalWrapperProps || {}, { className: conditionalClassName } = _d, restConditionalProps = __rest(_d, ["className"]);
    React.useEffect(() => () => unleaseReference(boxReference), []);
    React.useEffect(() => {
        if (checked !== undefined) {
            setShowConditional(checked);
        }
    }, [checked]);
    React.useEffect(() => {
        setConditional(boxReference, Boolean(conditional));
        return () => setConditional(boxReference, false);
    }, [conditional]);
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: "nhsuk-checkboxes__item" },
            React.createElement("input", Object.assign({ className: "nhsuk-checkboxes__input", onChange: (e) => {
                    if (checked === undefined)
                        setShowConditional(e.target.checked);
                    if (onChange)
                        onChange(e);
                }, name: name, id: inputID, checked: checked, defaultChecked: defaultChecked, ref: inputRef }, rest)),
            children ? (React.createElement(Label, Object.assign({ className: classNames('nhsuk-checkboxes__label', labelClassName), id: `${inputID}--label`, htmlFor: inputID }, restLabelProps), children)) : null,
            hint ? (React.createElement(Hint, Object.assign({ className: classNames('nhsuk-checkboxes__hint', hintClassName) }, restHintProps), hint)) : null),
        conditional && (showConditional || forceShowConditional) ? (React.createElement("div", Object.assign({ className: classNames('nhsuk-radios__conditional', conditionalClassName), id: `${inputID}--conditional` }, restConditionalProps), conditional)) : null));
};
Box.defaultProps = {
    type: 'checkbox',
};

class Checkboxes extends React.PureComponent {
    constructor(props) {
        super(props);
        this.boxCount = 0;
        this.boxReferences = [];
        this.boxIds = {};
        this.leaseReference = () => {
            const reference = generateRandomName();
            if (this.boxReferences.includes(reference)) {
                return this.leaseReference();
            }
            this.boxReferences.push(reference);
            return reference;
        };
        this.unleaseReference = (reference) => {
            this.boxReferences = this.boxReferences.filter((ref) => ref !== reference);
        };
        this.setConditional = (boxReference, hasConditional) => {
            this.setState((state) => {
                const currentHasConditional = state.conditionalBoxes.includes(boxReference);
                if (currentHasConditional && hasConditional === false) {
                    return Object.assign(Object.assign({}, state), { conditionalBoxes: state.conditionalBoxes.filter((ref) => ref !== boxReference) });
                }
                if (!currentHasConditional && hasConditional === true) {
                    return Object.assign(Object.assign({}, state), { conditionalBoxes: [...state.conditionalBoxes, boxReference] });
                }
                return state;
            });
        };
        this.getBoxId = (id, reference) => {
            const { idPrefix } = this.props;
            if (reference in this.boxIds) {
                return this.boxIds[reference];
            }
            this.boxCount += 1;
            this.boxIds[reference] = `${idPrefix || id}-${this.boxCount}`;
            return this.boxIds[reference];
        };
        this.resetBoxIds = () => {
            this.boxCount = 0;
            this.boxIds = {};
        };
        this.state = {
            conditionalBoxes: [],
        };
    }
    render() {
        const _a = this.props, { children } = _a, rest = __rest(_a, ["children"]);
        return (React.createElement(FormGroup, Object.assign({ inputType: "checkboxes" }, rest), (_a) => {
            var { className, name, id, idPrefix, error } = _a, restRenderProps = __rest(_a, ["className", "name", "id", "idPrefix", "error"]);
            this.resetBoxIds();
            const containsConditional = this.state.conditionalBoxes.length > 0;
            const contextValue = {
                name,
                getBoxId: (reference) => this.getBoxId(id, reference),
                setConditional: this.setConditional,
                leaseReference: this.leaseReference,
                unleaseReference: this.unleaseReference,
            };
            return (React.createElement("div", Object.assign({ className: classNames('nhsuk-checkboxes', { 'nhsuk-checkboxes--conditional': containsConditional }, className), id: id }, restRenderProps),
                React.createElement(CheckboxContext.Provider, { value: contextValue }, children)));
        }));
    }
}
Checkboxes.Box = Box;

const ContentsListItem = (_a) => {
    var { className, current } = _a, rest = __rest(_a, ["className", "current"]);
    return (React.createElement("li", { className: classNames('nhsuk-contents-list__item', className) }, current ? (React.createElement("span", Object.assign({ className: "nhsuk-contents-list__current" }, rest))) : (React.createElement("a", Object.assign({ className: "nhsuk-contents-list__link" }, rest)))));
};
const ContentsList = (_a) => {
    var { className, children, visuallyHiddenText } = _a, rest = __rest(_a, ["className", "children", "visuallyHiddenText"]);
    return (React.createElement("nav", Object.assign({ className: classNames('nhsuk-contents-list', className) }, rest),
        visuallyHiddenText !== false ? (React.createElement("h2", { className: "nhsuk-u-visually-hidden" }, visuallyHiddenText)) : null,
        React.createElement("ol", { className: "nhsuk-contents-list__list" }, children)));
};
ContentsList.defaultProps = {
    role: 'navigation',
    visuallyHiddenText: 'Contents',
};
ContentsList.Item = ContentsListItem;

const DateInputContext = React.createContext({
    /* eslint-disable @typescript-eslint/no-empty-function */
    id: '',
    name: '',
    registerRef: () => { },
    handleChange: () => { },
    error: undefined,
});

const labels = {
    day: 'Day',
    month: 'Month',
    year: 'Year',
};
const IndividualDateInput = (_a) => {
    var { label, labelProps, inputType, className, id, name, onChange, inputRef, error, value, defaultValue } = _a, rest = __rest(_a, ["label", "labelProps", "inputType", "className", "id", "name", "onChange", "inputRef", "error", "value", "defaultValue"]);
    const { id: ctxId, name: ctxName, error: ctxError, value: ctxValue, defaultValue: ctxDefaultValue, handleChange: ctxHandleChange, registerRef, } = React.useContext(DateInputContext);
    const _b = labelProps || {}, { className: labelClassName } = _b, restLabelProps = __rest(_b, ["className"]);
    const inputID = id || `${ctxId}-${inputType}`;
    const inputName = name || `${ctxName}-${inputType}`;
    const inputValue = value !== undefined ? value : ctxValue === null || ctxValue === void 0 ? void 0 : ctxValue[inputType];
    const inputDefaultValue = defaultValue !== undefined ? defaultValue : ctxDefaultValue === null || ctxDefaultValue === void 0 ? void 0 : ctxDefaultValue[inputType];
    const handleChange = (e) => {
        e.persist();
        if (onChange)
            onChange(e);
        if (!e.isPropagationStopped()) {
            ctxHandleChange(inputType, e);
        }
    };
    const refCallback = (ref) => {
        registerRef(inputType, ref);
        if (inputRef)
            inputRef(ref);
    };
    return (React.createElement("div", { className: "nhsuk-date-input__item" },
        React.createElement("div", { className: "nhsuk-form-group" },
            React.createElement(Label, Object.assign({ className: classNames('nhsuk-date-input__label', labelClassName), id: `${inputID}--label`, htmlFor: inputID }, restLabelProps), label || labels[inputType]),
            React.createElement("input", Object.assign({ className: classNames('nhsuk-input nhsuk-date-input__input', { 'nhsuk-input--width-2': inputType === 'day' || inputType === 'month' }, { 'nhsuk-input--width-4': inputType === 'year' }, { 'nhsuk-input--error': error === undefined ? ctxError : error }, className), value: inputValue, defaultValue: inputDefaultValue, id: inputID, "aria-labelledby": restLabelProps.id || `${inputID}--label`, name: inputName, onChange: handleChange, ref: refCallback }, rest)))));
};
IndividualDateInput.defaultProps = {
    pattern: '[0-9]*',
    inputMode: 'numeric',
    type: 'text',
};
const DayInput = (props) => (React.createElement(IndividualDateInput, Object.assign({ inputType: "day" }, props)));
const MonthInput = (props) => (React.createElement(IndividualDateInput, Object.assign({ inputType: "month" }, props)));
const YearInput = (props) => (React.createElement(IndividualDateInput, Object.assign({ inputType: "year" }, props)));

class DateInput extends React.PureComponent {
    constructor(props) {
        var _a, _b, _c;
        super(props);
        this.handleSelectNext = (inputType, value) => {
            if (!this.props.autoSelectNext)
                return;
            if (inputType === 'day' && value.length === 2 && this.monthRef) {
                this.monthRef.focus();
            }
            else if (inputType === 'month' && value.length === 2 && this.yearRef) {
                this.yearRef.focus();
            }
        };
        this.handleChange = (inputType, event) => {
            this.handleSelectNext(inputType, event.target.value);
            event.stopPropagation();
            this.setState((state) => {
                const newEventValue = Object.assign(Object.assign({}, state.values), { [inputType]: event.target.value });
                if (this.props.onChange) {
                    const newEvent = Object.assign(Object.assign({}, event), { target: Object.assign(Object.assign({}, event.target), { value: newEventValue }), currentTarget: Object.assign(Object.assign({}, event.currentTarget), { value: newEventValue }) });
                    this.props.onChange(newEvent);
                }
                return { values: newEventValue };
            });
        };
        this.registerRef = (inputType, ref) => {
            if (inputType === 'month')
                this.monthRef = ref;
            if (inputType === 'year')
                this.yearRef = ref;
        };
        this.state = {
            values: {
                day: ((_a = props.value) === null || _a === void 0 ? void 0 : _a.day) || '',
                month: ((_b = props.value) === null || _b === void 0 ? void 0 : _b.month) || '',
                year: ((_c = props.value) === null || _c === void 0 ? void 0 : _c.year) || '',
            },
        };
        this.monthRef = null;
        this.yearRef = null;
    }
    componentDidUpdate(prevProps) {
        if (this.props.value && prevProps.value !== this.props.value) {
            // This is the only way that we can update our internal state
            // when the value updates. We check if the value has changed first,
            // preventing an infinite loop.
            //
            // eslint-disable-next-line react/no-did-update-set-state
            this.setState((state) => {
                if (!this.props.value)
                    return state;
                const newState = Object.assign({}, state);
                const { day, month, year } = this.props.value;
                if (day && day !== state.values.day)
                    newState.values.day = day;
                if (month && month !== state.values.month)
                    newState.values.month = month;
                if (year && year !== state.values.year)
                    newState.values.year = year;
                return newState;
            });
        }
    }
    render() {
        const _a = this.props, { children, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        onChange, value, defaultValue } = _a, rest = __rest(_a, ["children", "onChange", "value", "defaultValue"]);
        return (React.createElement(FormGroup, Object.assign({ inputType: "dateinput" }, rest), (_a) => {
            var { className, name, id, error, autoSelectNext } = _a, restRenderProps = __rest(_a, ["className", "name", "id", "error", "autoSelectNext"]);
            const contextValue = {
                id,
                name,
                error,
                value,
                defaultValue,
                handleChange: this.handleChange,
                registerRef: this.registerRef,
            };
            return (React.createElement("div", Object.assign({ className: classNames('nhsuk-date-input', className) }, restRenderProps, { id: id }),
                React.createElement(DateInputContext.Provider, { value: contextValue }, children || (React.createElement(React.Fragment, null,
                    React.createElement(DateInput.Day, null),
                    React.createElement(DateInput.Month, null),
                    React.createElement(DateInput.Year, null))))));
        }));
    }
}
DateInput.Day = DayInput;
DateInput.Month = MonthInput;
DateInput.Year = YearInput;

// TODO: Check if standard NHS.UK polyfill "details.polyfill.js" is required
const Details = (_a) => {
    var { className, expander } = _a, rest = __rest(_a, ["className", "expander"]);
    return (React.createElement("details", Object.assign({ className: classNames('nhsuk-details', { 'nhsuk-expander': expander }, className) }, rest)));
};
const DetailsSummary = (_a) => {
    var { className, children } = _a, rest = __rest(_a, ["className", "children"]);
    return (React.createElement("summary", Object.assign({ className: classNames('nhsuk-details__summary', className) }, rest),
        React.createElement("span", { className: "nhsuk-details__summary-text" }, children)));
};
const DetailsText = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-details__text', className) }, rest)));
};
const ExpanderGroup = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-expander-group', className) }, rest)));
};
Details.Summary = DetailsSummary;
Details.Text = DetailsText;
Details.ExpanderGroup = ExpanderGroup;

const development = !process.env.NODE_ENV
    || process.env.NODE_ENV === 'development'
    || process.env.NODE_ENV === 'test';
function isDev() {
    return development;
}

const useDevWarning = (warning, condition = () => true) => {
    React.useEffect(() => {
        if (isDev() && condition()) {
            // eslint-disable-next-line no-console
            console.warn(warning);
        }
    }, [warning]);
};

const NHSUKFrontendV5UpgradeWarnings = {
    FooterColumns: 'The footer columns prop is deprecated and will be removed in the next major release, as this has been removed from the NHS.UK frontend library v5.',
    DoDontListPrefix: "Items with a `type` of `dont` will automatically have a 'do not' prefix text added in the next major release to align with the NHS.UK frontend library v5.",
    TransactionalServiceNameLongVariantRemoved: 'The `long` variant of the `TransactionalServiceName` component will be removed in the next major release to align with the NHS.UK frontend library v5.',
    ReviewDateMovedToPattern: 'The `ReviewDate` component will be removed in the next major release to align with the NHS.UK frontend library v5. ' +
        'The `ReviewDate` component will exist as a `pattern`. ' +
        'If you use the default import the path will change from `/lib/components/ReviewDate` to `/lib/patterns/ReviewDate`.',
};

const DoDontListContext = React.createContext('do');
const DoDontList = (_a) => {
    var { className, listType, children, heading, headingLevel } = _a, rest = __rest(_a, ["className", "listType", "children", "heading", "headingLevel"]);
    useDevWarning(NHSUKFrontendV5UpgradeWarnings.DoDontListPrefix, () => listType === 'dont');
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-do-dont-list', className) }, rest),
        React.createElement(HeadingLevel, { className: "nhsuk-do-dont-list__label", headingLevel: headingLevel }, heading || (listType === 'do' ? 'Do' : "Don't")),
        React.createElement("ul", { className: classNames('nhsuk-list', { 'nhsuk-list--tick': listType === 'do' }, { 'nhsuk-list--cross': listType === 'dont' }) },
            React.createElement(DoDontListContext.Provider, { value: listType }, children))));
};
const DoDontItem = (_a) => {
    var { children, listItemType } = _a, rest = __rest(_a, ["children", "listItemType"]);
    const listItem = React.useContext(DoDontListContext);
    return (React.createElement("li", Object.assign({}, rest),
        (listItemType || listItem) === 'do' ? React.createElement(Tick, null) : React.createElement(Cross, null),
        children));
};
DoDontList.Item = DoDontItem;

const ErrorSummaryTitle = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("h2", Object.assign({ className: classNames('nhsuk-error-summary__title', className) }, rest)));
};
const ErrorSummaryBody = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-error-summary__body', className) }, rest)));
};
const ErrorSummaryList = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("ul", Object.assign({ className: classNames('nhsuk-list', 'nhsuk-error-summary__list', className) }, rest)));
};
const ErrorSummaryListItem = (props) => (React.createElement("li", null,
    React.createElement("a", Object.assign({}, props))));
const ErrorSummaryDiv = React.forwardRef((_a, ref) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return React.createElement("div", Object.assign({ className: classNames('nhsuk-error-summary', className), ref: ref }, rest));
});
ErrorSummaryDiv.displayName = "ErrorSummary";
const ErrorSummary = Object.assign(ErrorSummaryDiv, {
    Title: ErrorSummaryTitle,
    Body: ErrorSummaryBody,
    List: ErrorSummaryList,
    Item: ErrorSummaryListItem,
});

const Legend = (_a) => {
    var { className, children, isPageHeading, headingLevel, size } = _a, rest = __rest(_a, ["className", "children", "isPageHeading", "headingLevel", "size"]);
    return (React.createElement("legend", Object.assign({ className: classNames('nhsuk-fieldset__legend', {
            'nhsuk-fieldset__legend--xl': isPageHeading && !size,
        }, { [`nhsuk-fieldset__legend--${size}`]: size }, className) }, rest), isPageHeading ? (React.createElement(HeadingLevel, { className: "nhsuk-fieldset__heading", headingLevel: headingLevel }, children)) : (children)));
};
Legend.defaultProps = {
    headingLevel: 'h1',
};
class Fieldset extends React.PureComponent {
    constructor(props) {
        super(props);
        this.passError = (componentId, error) => {
            this.setState((state) => {
                const existingError = state.erroredComponents.includes(componentId);
                if (existingError && !error) {
                    return Object.assign(Object.assign({}, state), { erroredComponents: state.erroredComponents.filter((id) => id !== componentId) });
                }
                if (!existingError && error) {
                    return Object.assign(Object.assign({}, state), { erroredComponents: [...state.erroredComponents, componentId] });
                }
                return state;
            });
        };
        this.registerComponent = (componentId, deregister = false) => {
            this.setState((state) => {
                if (deregister) {
                    return Object.assign(Object.assign({}, state), { registeredComponents: state.registeredComponents.filter((id) => id !== componentId) });
                }
                if (!state.registeredComponents.includes(componentId)) {
                    return Object.assign(Object.assign({}, state), { registeredComponents: [...state.registeredComponents, componentId] });
                }
                return state;
            });
        };
        this.state = {
            registeredComponents: [],
            erroredComponents: [],
        };
    }
    render() {
        const _a = this.props, { className, disableErrorLine } = _a, rest = __rest(_a, ["className", "disableErrorLine"]);
        const contextValue = {
            isFieldset: true,
            registerComponent: this.registerComponent,
            passError: this.passError,
        };
        const containsFormElements = this.state.registeredComponents.length > 0;
        const containsError = this.state.erroredComponents.length > 0;
        return (React.createElement(FieldsetContext.Provider, { value: contextValue }, containsFormElements ? (React.createElement("div", { className: classNames('nhsuk-form-group', {
                'nhsuk-form-group--error': disableErrorLine ? false : containsError,
            }) },
            React.createElement("fieldset", Object.assign({ className: classNames('nhsuk-fieldset', className) }, rest)))) : (React.createElement("fieldset", Object.assign({ className: classNames('nhsuk-fieldset', className) }, rest)))));
    }
}
Fieldset.Legend = Legend;
Fieldset.Legend = Legend;

const FooterList = (_a) => {
    var { className, columns } = _a, rest = __rest(_a, ["className", "columns"]);
    useDevWarning(NHSUKFrontendV5UpgradeWarnings.FooterColumns, () => columns);
    return (React.createElement("ul", Object.assign({ className: classNames('nhsuk-footer__list', { 'nhsuk-footer__list--three-columns': columns }, className) }, rest)));
};
const FooterListItem = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("li", { className: "nhsuk-footer__list-item" },
        React.createElement("a", Object.assign({ className: classNames('nhsuk-footer__list-item-link', className) }, rest))));
};
const FooterCopyright = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("p", Object.assign({ className: classNames('nhsuk-footer__copyright', className) }, rest)));
};
const Footer = (_a) => {
    var { className, children, visuallyHiddenText } = _a, rest = __rest(_a, ["className", "children", "visuallyHiddenText"]);
    return (React.createElement("footer", Object.assign({}, rest),
        React.createElement("div", { className: classNames('nhsuk-footer', className) },
            React.createElement(Container, null,
                visuallyHiddenText ? (React.createElement("h2", { className: "nhsuk-u-visually-hidden" }, visuallyHiddenText)) : null,
                children))));
};
Footer.defaultProps = {
    visuallyHiddenText: 'Support links',
};
Footer.List = FooterList;
Footer.ListItem = FooterListItem;
Footer.Copyright = FooterCopyright;

var HeaderContext = React.createContext({
    /* eslint-disable @typescript-eslint/no-empty-function */
    orgName: undefined,
    serviceName: undefined,
    orgSplit: undefined,
    orgDescriptor: undefined,
    setSearch: () => { },
    setMenuToggle: () => { },
    hasSearch: false,
    hasMenuToggle: false,
    toggleMenu: () => { },
    toggleSearch: () => { },
    menuOpen: false,
    searchOpen: false,
});

const SVGImageWithSrc = (props) => React.createElement("image", Object.assign({}, props));
const NHSLogo = (_a) => {
    var { className, alt, asElement: Component = 'a' } = _a, rest = __rest(_a, ["className", "alt", "asElement"]);
    const { serviceName, hasMenuToggle, hasSearch } = React.useContext(HeaderContext);
    return (React.createElement("div", { className: classNames('nhsuk-header__logo', {
            'nhsuk-header__logo--only': !hasMenuToggle && !hasSearch,
        }) },
        React.createElement(Component, Object.assign({ className: classNames('nhsuk-header__link', { 'nhsuk-header__link--service': serviceName }, className) }, rest),
            React.createElement("svg", { className: "nhsuk-logo", xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", role: "img", focusable: "false", viewBox: "0 0 40 16", "aria-labelledby": "nhsuk-logo_title" },
                React.createElement("title", { id: "nhsuk-logo_title" }, alt),
                React.createElement("path", { className: "nhsuk-logo__background", d: "M0 0h40v16H0z" }),
                React.createElement("path", { className: "nhsuk-logo__text", d: "M3.9 1.5h4.4l2.6 9h.1l1.8-9h3.3l-2.8 13H9l-2.7-9h-.1l-1.8 9H1.1M17.3 1.5h3.6l-1 4.9h4L25 1.5h3.5l-2.7 13h-3.5l1.1-5.6h-4.1l-1.2 5.6h-3.4M37.7 4.4c-.7-.3-1.6-.6-2.9-.6-1.4 0-2.5.2-2.5 1.3 0 1.8 5.1 1.2 5.1 5.1 0 3.6-3.3 4.5-6.4 4.5-1.3 0-2.9-.3-4-.7l.8-2.7c.7.4 2.1.7 3.2.7s2.8-.2 2.8-1.5c0-2.1-5.1-1.3-5.1-5 0-3.4 2.9-4.4 5.8-4.4 1.6 0 3.1.2 4 .6" }),
                React.createElement(SVGImageWithSrc, { src: "https://assets.nhs.uk/images/nhs-logo.png", xlinkHref: "" })),
            serviceName ? React.createElement("span", { className: "nhsuk-header__service-name" }, serviceName) : null)));
};
NHSLogo.defaultProps = {
    'aria-label': 'NHS homepage',
    alt: 'NHS Logo',
};

const OrganisationalLogo = (_a) => {
    var { logoUrl, alt, asElement: Component = 'a' } = _a, rest = __rest(_a, ["logoUrl", "alt", "asElement"]);
    const { orgName, orgSplit, orgDescriptor } = React.useContext(HeaderContext);
    return (React.createElement("div", { className: "nhsuk-header__logo" },
        React.createElement(Component, Object.assign({ className: "nhsuk-header__link" }, rest), logoUrl ? (React.createElement("img", { className: "nhsuk-org-logo", src: logoUrl, alt: alt })) : (React.createElement(React.Fragment, null,
            React.createElement("svg", { className: "nhsuk-logo", xmlns: "http://www.w3.org/2000/svg", role: "img", focusable: "false", viewBox: "0 0 40 16", "aria-labelledby": "nhsuk-logo_title" },
                React.createElement("title", { id: "nhsuk-logo_title" }, alt),
                React.createElement("path", { className: "nhsuk-logo__background", d: "M0 0h40v16H0z" }),
                React.createElement("path", { className: "nhsuk-logo__text", d: "M3.9 1.5h4.4l2.6 9h.1l1.8-9h3.3l-2.8 13H9l-2.7-9h-.1l-1.8 9H1.1M17.3 1.5h3.6l-1 4.9h4L25 1.5h3.5l-2.7 13h-3.5l1.1-5.6h-4.1l-1.2 5.6h-3.4M37.7 4.4c-.7-.3-1.6-.6-2.9-.6-1.4 0-2.5.2-2.5 1.3 0 1.8 5.1 1.2 5.1 5.1 0 3.6-3.3 4.5-6.4 4.5-1.3 0-2.9-.3-4-.7l.8-2.7c.7.4 2.1.7 3.2.7s2.8-.2 2.8-1.5c0-2.1-5.1-1.3-5.1-5 0-3.4 2.9-4.4 5.8-4.4 1.6 0 3.1.2 4 .6" }),
                React.createElement("img", { src: "https://assets.nhs.uk/images/nhs-logo.png" })),
            React.createElement("span", { className: "nhsuk-organisation-name" },
                orgName,
                orgSplit ? (React.createElement(React.Fragment, null,
                    ' ',
                    React.createElement("span", { className: "nhsuk-organisation-name-split" }, orgSplit))) : null),
            orgDescriptor ? (React.createElement("span", { className: "nhsuk-organisation-descriptor" }, orgDescriptor)) : null)))));
};

const Search = (_a) => {
    var { action, method, id, visuallyHiddenText } = _a, rest = __rest(_a, ["action", "method", "id", "visuallyHiddenText"]);
    const { setSearch, toggleSearch, searchOpen } = React.useContext(HeaderContext);
    React.useEffect(() => {
        setSearch(true);
        return () => setSearch(false);
    }, []);
    return (React.createElement("div", { className: "nhsuk-header__search" },
        React.createElement("button", { className: classNames('nhsuk-header__search-toggle', { 'is-active': searchOpen }), "aria-label": "Open search", "aria-expanded": searchOpen ? 'true' : 'false', onClick: toggleSearch },
            React.createElement(Search$1, null),
            React.createElement("span", { className: "nhsuk-u-visually-hidden" }, "Search")),
        React.createElement("div", { className: classNames('nhsuk-header__search-wrap', { 'js-show': searchOpen }) },
            React.createElement("form", { className: "nhsuk-header__search-form", action: action, method: method, role: "search" },
                React.createElement("label", { className: "nhsuk-u-visually-hidden", htmlFor: id }, visuallyHiddenText),
                React.createElement("input", Object.assign({ className: "nhsuk-search__input", id: id }, rest)),
                React.createElement("button", { className: "nhsuk-search__submit", type: "submit" },
                    React.createElement(Search$1, null),
                    React.createElement("span", { className: "nhsuk-u-visually-hidden" }, "Search")),
                React.createElement("button", { className: "nhsuk-search__close" },
                    React.createElement(Close, null),
                    React.createElement("span", { className: "nhsuk-u-visually-hidden" }, "Close search"))))));
};
Search.defaultProps = {
    method: 'get',
    role: 'search',
    id: 'search-field',
    visuallyHiddenText: 'Search the NHS website',
    type: 'search',
    autoComplete: 'off',
    placeholder: 'Search',
};

const Nav = (_a) => {
    var { className, children, open } = _a, rest = __rest(_a, ["className", "children", "open"]);
    const { menuOpen, toggleMenu } = React.useContext(HeaderContext);
    return (React.createElement("nav", Object.assign({ className: classNames('nhsuk-header__navigation', { 'js-show': open !== undefined ? open : menuOpen }, className) }, rest),
        React.createElement(Container, null,
            React.createElement("p", { className: "nhsuk-header__navigation-title" },
                React.createElement("span", null, "Menu"),
                React.createElement("button", { className: "nhsuk-header__navigation-close", type: "button", onClick: toggleMenu },
                    React.createElement(Close, null),
                    React.createElement("span", { className: "nhsuk-u-visually-hidden" }, "Close menu"))),
            React.createElement("ul", { className: "nhsuk-header__navigation-list" }, children))));
};

const NavItem = (_a) => {
    var { mobileOnly, className, children, asElement: Component = 'a' } = _a, rest = __rest(_a, ["mobileOnly", "className", "children", "asElement"]);
    return (React.createElement("li", { className: classNames('nhsuk-header__navigation-item', { 'nhsuk-header__navigation-item--for-mobile': mobileOnly }, className) },
        React.createElement(Component, Object.assign({ className: "nhsuk-header__navigation-link" }, rest),
            children,
            React.createElement(ChevronRight, null))));
};

const NavItemList = (_a) => {
    var { children, className } = _a, rest = __rest(_a, ["children", "className"]);
    return (React.createElement("ul", Object.assign({ className: classNames('nhsuk-header__navigation-list', className) }, rest), children));
};

const NavMenuClose = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    const { toggleMenu } = React.useContext(HeaderContext);
    return (React.createElement("button", Object.assign({ className: classNames('nhsuk-header__navigation-close', className) }, rest, { type: "button", onClick: toggleMenu }),
        React.createElement(Close, null),
        React.createElement("span", { className: "nhsuk-u-visually-hidden" }, "Close menu")));
};

const Content = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    const { searchOpen } = React.useContext(HeaderContext);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-header__content', { 'js-show': searchOpen }, className) }, rest)));
};

const MenuToggle = (_a) => {
    var { onClick } = _a, rest = __rest(_a, ["onClick"]);
    const { setMenuToggle, toggleMenu, menuOpen } = React.useContext(HeaderContext);
    const onToggleClick = (e) => {
        toggleMenu();
        if (onClick) {
            onClick(e);
        }
    };
    React.useEffect(() => {
        setMenuToggle(true);
        return () => setMenuToggle(false);
    }, []);
    return (React.createElement("div", { className: "nhsuk-header__menu" },
        React.createElement("button", Object.assign({ className: classNames('nhsuk-header__menu-toggle', { 'is-active': menuOpen }), "aria-label": "Open menu", "aria-expanded": menuOpen ? 'true' : 'false', onClick: onToggleClick }, rest), "Menu")));
};

const TransactionalServiceName = (_a) => {
    var { className, long } = _a, rest = __rest(_a, ["className", "long"]);
    useDevWarning(NHSUKFrontendV5UpgradeWarnings.TransactionalServiceNameLongVariantRemoved, () => long);
    return (React.createElement("div", { className: classNames('nhsuk-header__transactional-service-name', { 'nhsuk-header__transactional-service-name--long': long }, className) },
        React.createElement("a", Object.assign({ className: "nhsuk-header__transactional-service-name--link" }, rest))));
};

const NavTitle = (_a) => {
    var { children, className } = _a, rest = __rest(_a, ["children", "className"]);
    return (React.createElement("p", Object.assign({ className: classNames('nhsuk-header__navigation-title', className) }, rest), children));
};

const NavContainer = (_a) => {
    var { className, children, open } = _a, rest = __rest(_a, ["className", "children", "open"]);
    const { menuOpen } = React.useContext(HeaderContext);
    return (React.createElement("nav", Object.assign({ className: classNames('nhsuk-header__navigation', { 'js-show': open !== undefined ? open : menuOpen }, className) }, rest),
        React.createElement(Container, null, children)));
};

const BaseHeaderLogo = (props) => {
    const { orgName } = React.useContext(HeaderContext);
    if (orgName) {
        return React.createElement(OrganisationalLogo, Object.assign({}, props));
    }
    return React.createElement(NHSLogo, Object.assign({}, props));
};
const HeaderContainer = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement(Container, Object.assign({ className: classNames('nhsuk-header__container', className) }, rest)));
};
class Header extends React.PureComponent {
    constructor(props) {
        super(props);
        this.setMenuToggle = (toggle) => {
            this.setState({ hasMenuToggle: toggle });
        };
        this.setSearch = (toggle) => {
            this.setState({ hasSearch: toggle });
        };
        this.toggleMenu = () => {
            this.setState((state) => ({ menuOpen: !state.menuOpen }));
        };
        this.toggleSearch = () => {
            this.setState((state) => ({ searchOpen: !state.searchOpen }));
        };
        this.state = {
            hasMenuToggle: false,
            hasSearch: false,
            menuOpen: false,
            searchOpen: false,
        };
    }
    render() {
        const _a = this.props, { className, children, transactional, orgName, orgSplit, orgDescriptor, serviceName, white } = _a, rest = __rest(_a, ["className", "children", "transactional", "orgName", "orgSplit", "orgDescriptor", "serviceName", "white"]);
        const { hasSearch, hasMenuToggle, menuOpen, searchOpen, } = this.state;
        const contextValue = {
            orgName,
            orgSplit,
            orgDescriptor,
            serviceName,
            hasSearch,
            hasMenuToggle,
            setMenuToggle: this.setMenuToggle,
            setSearch: this.setSearch,
            toggleMenu: this.toggleMenu,
            toggleSearch: this.toggleSearch,
            menuOpen,
            searchOpen,
        };
        return (React.createElement("header", Object.assign({ className: classNames('nhsuk-header', { 'nhsuk-header--transactional': transactional }, { 'nhsuk-header--organisation': orgName }, { 'nhsuk-header--white': white }, className) }, rest),
            React.createElement(HeaderContext.Provider, { value: contextValue }, children)));
    }
}
Header.Logo = BaseHeaderLogo;
Header.Search = Search;
Header.Nav = Nav;
Header.NavTitle = NavTitle;
Header.NavContainer = NavContainer;
Header.NavItemList = NavItemList;
Header.NavItem = NavItem;
Header.NavMenuClose = NavMenuClose;
Header.Container = HeaderContainer;
Header.Content = Content;
Header.MenuToggle = MenuToggle;
Header.ServiceName = TransactionalServiceName;
Header.defaultProps = {
    role: 'banner',
};

const HeroContent = ({ children, hasImage }) => {
    if (!children) {
        return null;
    }
    return (React.createElement(Container, { className: classNames({ 'nhsuk-hero--border': hasImage }) },
        React.createElement(Row, null,
            React.createElement(Col, { width: "two-thirds" }, hasImage ? (React.createElement("div", { className: "nhsuk-hero-content" },
                children,
                React.createElement("span", { className: "nhsuk-hero__arrow", "aria-hidden": "true" }))) : (React.createElement("div", { className: "nhsuk-hero__wrapper" }, children))))));
};
const HeroHeading = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement(HeadingLevel, Object.assign({ className: classNames('nhsuk-u-margin-bottom-3', className) }, rest)));
};
HeroHeading.defaultProps = {
    headingLevel: 'h1',
};
const HeroText = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("p", Object.assign({ className: classNames('nhsuk-body-l nhsuk-u-margin-bottom-0', className) }, rest)));
};
const Hero = (_a) => {
    var { className, children, imageSrc } = _a, rest = __rest(_a, ["className", "children", "imageSrc"]);
    return (React.createElement("section", Object.assign({ className: classNames('nhsuk-hero', { 'nhsuk-hero--image': imageSrc }, { 'nhsuk-hero--image-description': imageSrc && children }, className), style: imageSrc ? { backgroundImage: `url('${imageSrc}')` } : undefined }, rest), imageSrc ? (React.createElement("div", { className: "nhsuk-hero__overlay" },
        React.createElement(HeroContent, { hasImage: Boolean(imageSrc) }, children))) : (React.createElement(HeroContent, { hasImage: Boolean(imageSrc) }, children))));
};
Hero.Heading = HeroHeading;
Hero.Text = HeroText;

const Images = (_a) => {
    var { className, caption } = _a, rest = __rest(_a, ["className", "caption"]);
    return (React.createElement("figure", { className: "nhsuk-image" },
        React.createElement("img", Object.assign({ className: classNames('nhsuk-image__img', className) }, rest)),
        caption ? React.createElement("figcaption", { className: "nhsuk-image__caption" }, caption) : null));
};

const Input = (props) => (React.createElement(FormGroup, Object.assign({}, props, { inputType: "input" }), (_a) => {
    var { width, className, error, inputRef } = _a, rest = __rest(_a, ["width", "className", "error", "inputRef"]);
    return (React.createElement("input", Object.assign({ className: classNames('nhsuk-input', { [`nhsuk-input--width-${width}`]: width }, { 'nhsuk-input--error': error }, className), ref: inputRef }, rest)));
}));
Input.defaultProps = {
    type: 'text',
};

const InsetText = (_a) => {
    var { className, children, visuallyHiddenText } = _a, rest = __rest(_a, ["className", "children", "visuallyHiddenText"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-inset-text', className) }, rest),
        visuallyHiddenText ? (React.createElement("span", { className: "nhsuk-u-visually-hidden" }, visuallyHiddenText)) : null,
        children));
};
InsetText.defaultProps = {
    visuallyHiddenText: 'Information: ',
};

const Panel = (_a) => {
    var { className, children, noResults, label, labelProps, backToTop, backToTopLink, backToTopButtonText } = _a, rest = __rest(_a, ["className", "children", "noResults", "label", "labelProps", "backToTop", "backToTopLink", "backToTopButtonText"]);
    return (React.createElement("li", null,
        React.createElement("div", Object.assign({ className: classNames('nhsuk-list-panel', className) }, rest),
            label ? (React.createElement("h2", Object.assign({ className: "nhsuk-list-panel__label" }, labelProps), label)) : null,
            noResults ? (React.createElement("div", { className: classNames('nhsuk-list-panel__box', {
                    'nhsuk-list-panel__box--with-label': label,
                }) },
                React.createElement("p", { className: "nhsuk-list-panel--results-items__no-results" }, children))) : (React.createElement("ul", { className: classNames('nhsuk-list-panel__list', {
                    'nhsuk-list-panel__list--with-label': label,
                }) }, children)),
            backToTop ? (React.createElement("div", { className: "nhsuk-back-to-top" },
                React.createElement("a", { className: "nhsuk-back-to-top__link", href: backToTopLink },
                    React.createElement("svg", { className: "nhsuk-icon nhsuk-icon__arrow-right", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", "aria-hidden": "true" },
                        React.createElement("path", { d: "M19.6 11.66l-2.73-3A.51.51 0 0 0 16 9v2H5a1 1 0 0 0 0 2h11v2a.5.5 0 0 0 .32.46.39.39 0 0 0 .18 0 .52.52 0 0 0 .37-.16l2.73-3a.5.5 0 0 0 0-.64z" })),
                    backToTopButtonText || 'Back to top'))) : null)));
};
const PanelItem = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("li", Object.assign({ className: classNames('nhsuk-list-panel__item', className) }, rest)));
};
const PanelLinkItem = (_a) => {
    var { className, asElement: Component = 'a' } = _a, rest = __rest(_a, ["className", "asElement"]);
    return (React.createElement(PanelItem, null,
        React.createElement(Component, Object.assign({ className: classNames('nhsuk-list-panel__link', className) }, rest))));
};
const ListPanel = (_a) => {
    var { className, children } = _a, rest = __rest(_a, ["className", "children"]);
    return (React.createElement("ol", Object.assign({ className: classNames('nhsuk-list', className) }, rest), children));
};
ListPanel.LinkItem = PanelLinkItem;
ListPanel.Item = PanelItem;
ListPanel.Panel = Panel;

const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
const processLetters = (children, fullAlphabet, removedLetters, disabledLetters, letters) => {
    const letterMap = (letter) => {
        if (removedLetters && removedLetters.includes(letter)) {
            return null;
        }
        if (disabledLetters && disabledLetters.includes(letter)) {
            return React.createElement(DisabledItem, { key: letter }, letter);
        }
        return (React.createElement(LinkItem, { key: letter, href: `#${letter}` }, letter));
    };
    if (children) {
        return children;
    }
    if (fullAlphabet) {
        return alphabet.split('').map(letterMap);
    }
    if (letters) {
        return letters.map(letterMap);
    }
    return null;
};
const NavAZ = (_a) => {
    var { className, children, fullAlphabet, removedLetters, disabledLetters, letters } = _a, rest = __rest(_a, ["className", "children", "fullAlphabet", "removedLetters", "disabledLetters", "letters"]);
    return (React.createElement("nav", Object.assign({ className: classNames('nhsuk-nav-a-z', className) }, rest),
        React.createElement("ol", { className: "nhsuk-nav-a-z__list" }, processLetters(children, fullAlphabet, removedLetters, disabledLetters, letters))));
};
const LinkItem = (_a) => {
    var { className, asElement: Component = 'a' } = _a, rest = __rest(_a, ["className", "asElement"]);
    return (React.createElement("li", { className: "nhsuk-nav-a-z__item" },
        React.createElement(Component, Object.assign({ className: classNames('nhsuk-nav-a-z__link', className) }, rest))));
};
const DisabledItem = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("li", { className: "nhsuk-nav-a-z__item" },
        React.createElement("span", Object.assign({ className: classNames('nhsuk-nav-a-z__link--disabled', className) }, rest))));
};
NavAZ.LinkItem = LinkItem;
NavAZ.DisabledItem = DisabledItem;

const PaginationLink = (_a) => {
    var { className, children, previous, next } = _a, rest = __rest(_a, ["className", "children", "previous", "next"]);
    return (React.createElement("li", { className: classNames({ 'nhsuk-pagination-item--previous': previous }, { 'nhsuk-pagination-item--next': next }) },
        React.createElement("a", Object.assign({ className: classNames('nhsuk-pagination__link', { 'nhsuk-pagination__link--prev': previous }, { 'nhsuk-pagination__link--next': next }, className) }, rest),
            React.createElement("span", { className: "nhsuk-pagination__title" },
                previous ? 'Previous' : null,
                next ? 'Next' : null),
            React.createElement("span", { className: "nhsuk-u-visually-hidden" }, ":"),
            React.createElement("span", { className: "nhsuk-pagination__page" }, children),
            previous ? React.createElement(ArrowLeft, null) : null,
            next ? React.createElement(ArrowRight, null) : null)));
};
const Pagination = (_a) => {
    var { className, children } = _a, rest = __rest(_a, ["className", "children"]);
    return (React.createElement("nav", Object.assign({ className: classNames('nhsuk-pagination', className) }, rest),
        React.createElement("ul", { className: "nhsuk-list nhsuk-pagination__list" }, children)));
};
Pagination.defaultProps = {
    role: 'navigation',
    'aria-label': 'Pagination',
};
Pagination.Link = PaginationLink;

const RadiosContext = React.createContext({
    /* eslint-disable @typescript-eslint/no-empty-function */
    name: '',
    selectedRadio: '',
    getRadioId: () => '',
    setConditional: () => { },
    setSelected: () => { },
    leaseReference: () => '',
    unleaseReference: () => { },
});

const Divider = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-radios__divider', className) }, rest)));
};

const Radio = (_a) => {
    var { className, children, id, hint, hintProps, labelProps, conditional, forceShowConditional, conditionalWrapperProps, checked, defaultChecked, onChange, inputRef } = _a, rest = __rest(_a, ["className", "children", "id", "hint", "hintProps", "labelProps", "conditional", "forceShowConditional", "conditionalWrapperProps", "checked", "defaultChecked", "onChange", "inputRef"]);
    const { name, getRadioId, setConditional, setSelected, selectedRadio, leaseReference, unleaseReference, } = React.useContext(RadiosContext);
    const [radioReference] = React.useState(leaseReference());
    const inputID = id || getRadioId(radioReference);
    const shouldShowConditional = selectedRadio === radioReference && checked !== false;
    React.useEffect(() => () => unleaseReference(radioReference));
    React.useEffect(() => {
        if (defaultChecked)
            setSelected(radioReference);
    }, []);
    React.useEffect(() => {
        if (checked)
            setSelected(radioReference);
    }, [checked]);
    React.useEffect(() => {
        setConditional(radioReference, Boolean(conditional));
        return () => setConditional(radioReference, false);
    }, [conditional]);
    return (React.createElement(React.Fragment, null,
        React.createElement("div", { className: "nhsuk-radios__item" },
            React.createElement("input", Object.assign({ onChange: (e) => {
                    setSelected(radioReference);
                    if (onChange)
                        onChange(e);
                }, className: classNames('nhsuk-radios__input', className), id: inputID, name: name, "aria-labelledby": children ? `${inputID}--label` : undefined, "aria-describedby": hint ? `${inputID}--hint` : undefined, checked: checked, defaultChecked: defaultChecked, ref: inputRef }, rest)),
            children ? (React.createElement(Label, Object.assign({ className: "nhsuk-radios__label", id: `${inputID}--label`, htmlFor: inputID }, labelProps), children)) : null,
            hint ? (React.createElement(Hint, Object.assign({ className: "nhsuk-radios__hint", id: `${inputID}--hint` }, hintProps), hint)) : null),
        conditional && (shouldShowConditional || forceShowConditional) ? (React.createElement("div", Object.assign({ className: "nhsuk-radios__conditional", id: `${inputID}--conditional` }, conditionalWrapperProps), conditional)) : null));
};
Radio.defaultProps = {
    type: 'radio',
};

class Radios extends React.PureComponent {
    constructor(props) {
        super(props);
        this.radioCount = 0;
        this.radioReferences = [];
        this.radioIds = {};
        this.getRadioId = (id, reference) => {
            const { idPrefix } = this.props;
            if (reference in this.radioIds) {
                return this.radioIds[reference];
            }
            this.radioCount += 1;
            this.radioIds[reference] = `${idPrefix || id}-${this.radioCount}`;
            return this.radioIds[reference];
        };
        this.leaseReference = () => {
            const reference = generateRandomName();
            if (this.radioReferences.includes(reference)) {
                return this.leaseReference();
            }
            this.radioReferences.push(reference);
            return reference;
        };
        this.unleaseReference = (reference) => {
            this.radioReferences = this.radioReferences.filter((ref) => ref !== reference);
        };
        this.setConditional = (radioReference, hasConditional) => {
            this.setState((state) => {
                const currentHasConditional = state.conditionalRadios.includes(radioReference);
                if (currentHasConditional && hasConditional === false) {
                    return Object.assign(Object.assign({}, state), { conditionalRadios: state.conditionalRadios.filter((ref) => ref !== radioReference) });
                }
                if (!currentHasConditional && hasConditional === true) {
                    return Object.assign(Object.assign({}, state), { conditionalRadios: [...state.conditionalRadios, radioReference] });
                }
                return state;
            });
        };
        this.setSelected = (radioReference) => {
            this.setState({
                selectedRadio: radioReference,
            });
        };
        this.resetRadioIds = () => {
            this.radioCount = 0;
            this.radioIds = {};
        };
        this.state = {
            conditionalRadios: [],
            selectedRadio: '',
        };
    }
    render() {
        const _a = this.props, { children } = _a, rest = __rest(_a, ["children"]);
        return (React.createElement(FormGroup, Object.assign({ inputType: "radios" }, rest), (_a) => {
            var { className, inline, name, id, error } = _a, restRenderProps = __rest(_a, ["className", "inline", "name", "id", "error"]);
            this.resetRadioIds();
            const contextValue = {
                getRadioId: (reference) => this.getRadioId(id, reference),
                selectedRadio: this.state.selectedRadio,
                setConditional: this.setConditional,
                setSelected: this.setSelected,
                leaseReference: this.leaseReference,
                unleaseReference: this.unleaseReference,
                name,
            };
            const containsConditional = this.state.conditionalRadios.length > 0;
            return (React.createElement("div", Object.assign({ className: classNames('nhsuk-radios', { 'nhsuk-radios--inline': inline }, { 'nhsuk-radios--conditional': containsConditional }, className), id: id }, restRenderProps),
                React.createElement(RadiosContext.Provider, { value: contextValue }, children)));
        }));
    }
}
Radios.Divider = Divider;
Radios.Radio = Radio;

const ReviewDate = (_a) => {
    var { className, lastReviewed, nextReview } = _a, rest = __rest(_a, ["className", "lastReviewed", "nextReview"]);
    useDevWarning(NHSUKFrontendV5UpgradeWarnings.ReviewDateMovedToPattern);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-review-date', className) }, rest),
        React.createElement("p", { className: "nhsuk-body-s" },
            lastReviewed ? `Page last reviewed: ${lastReviewed}` : null,
            lastReviewed && nextReview ? React.createElement("br", null) : null,
            nextReview ? `Next review due: ${nextReview}` : null)));
};

const Select = (_a) => {
    var { children } = _a, rest = __rest(_a, ["children"]);
    return (React.createElement(FormGroup, Object.assign({ inputType: "select" }, rest), (_a) => {
        var { className, error, selectRef } = _a, restRenderProps = __rest(_a, ["className", "error", "selectRef"]);
        return (React.createElement("select", Object.assign({ className: classNames('nhsuk-select', { 'nhsuk-select--error': error }, className), ref: selectRef }, restRenderProps), children));
    }));
};
const Option = (props) => React.createElement("option", Object.assign({}, props));
Select.Option = Option;

class SkipLink extends React.Component {
    constructor(props) {
        super(props);
        this.handleHeadingBlur = (event) => {
            event.preventDefault();
            if (this.firstHeadingElement) {
                this.unfocusElement(this.firstHeadingElement);
            }
        };
        this.getFirstHeadingElement = () => {
            const allHeadings = document.getElementsByTagName('h1');
            if (allHeadings.length > 0) {
                return allHeadings[0];
            }
            return null;
        };
        this.focusElement = (element) => {
            // Sometimes custom focus code can cause a loop of focus events
            // (especially in IE11), so check for attributes before performing
            // focus actions and DOM manipulation.
            if (!element.hasAttribute('tabIndex')) {
                element.setAttribute('tabIndex', '-1');
            }
            if (document.activeElement !== element) {
                element.focus();
            }
        };
        this.unfocusElement = (element) => {
            if (element.hasAttribute('tabIndex'))
                element.removeAttribute('tabIndex');
        };
        this.onClick = (event) => {
            const { onClick, focusTargetRef, disableDefaultBehaviour } = this.props;
            if (disableDefaultBehaviour)
                event.preventDefault();
            if (focusTargetRef && focusTargetRef.current) {
                this.focusElement(focusTargetRef.current);
            }
            else if (!disableDefaultBehaviour) {
                // Follow the default NHSUK Frontend behaviour, but go about it in a safer way.
                // https://github.com/nhsuk/nhsuk-frontend/blob/master/packages/components/skip-link/skip-link.js
                if (this.firstHeadingElement)
                    this.focusElement(this.firstHeadingElement);
            }
            if (onClick) {
                event.persist();
                onClick(event);
            }
        };
        this.firstHeadingElement = null;
    }
    componentDidMount() {
        // The standard NHSUK Frontend behaviour is to listen on the
        // blur event on the first heading element.
        this.firstHeadingElement = this.getFirstHeadingElement();
        if (this.firstHeadingElement) {
            this.firstHeadingElement.addEventListener('blur', this.handleHeadingBlur);
        }
    }
    componentWillUnmount() {
        if (this.firstHeadingElement) {
            this.firstHeadingElement.removeEventListener('blur', this.handleHeadingBlur);
        }
    }
    render() {
        const _a = this.props, { className, 
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        focusTargetRef, disableDefaultBehaviour, href } = _a, rest = __rest(_a, ["className", "focusTargetRef", "disableDefaultBehaviour", "href"]);
        return (React.createElement("a", Object.assign({ className: classNames('nhsuk-skip-link', className), onClick: this.onClick, href: disableDefaultBehaviour ? undefined : href }, rest)));
    }
}
SkipLink.defaultProps = {
    children: 'Skip to main content',
    href: '#maincontent',
    tabIndex: 0,
};

const SummaryListRow = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-summary-list__row', className) }, rest)));
};
const SummaryListKey = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("dt", Object.assign({ className: classNames('nhsuk-summary-list__key', className) }, rest)));
};
const SummaryListValue = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("dd", Object.assign({ className: classNames('nhsuk-summary-list__value', className) }, rest)));
};
const SummaryListActions = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("dd", Object.assign({ className: classNames('nhsuk-summary-list__actions', className) }, rest)));
};
const SummaryList = (_a) => {
    var { className, noBorder } = _a, rest = __rest(_a, ["className", "noBorder"]);
    return (React.createElement("dl", Object.assign({ className: classNames('nhsuk-summary-list', { 'nhsuk-summary-list--no-border': noBorder }, className) }, rest)));
};
SummaryList.Row = SummaryListRow;
SummaryList.Key = SummaryListKey;
SummaryList.Value = SummaryListValue;
SummaryList.Actions = SummaryListActions;

var TableSection;
(function (TableSection) {
    TableSection[TableSection["NONE"] = 0] = "NONE";
    TableSection[TableSection["HEAD"] = 1] = "HEAD";
    TableSection[TableSection["BODY"] = 2] = "BODY";
})(TableSection || (TableSection = {}));
const TableSectionContext = React.createContext(TableSection.NONE);

const TableBody = (_a) => {
    var { className, children } = _a, rest = __rest(_a, ["className", "children"]);
    return (React.createElement("tbody", Object.assign({ className: classNames('nhsuk-table__body', className) }, rest),
        React.createElement(TableSectionContext.Provider, { value: TableSection.BODY }, children)));
};
TableBody.displayName = 'Table.Body';

const TableCaption = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("caption", Object.assign({ className: classNames('nhsuk-table__caption', className) }, rest)));
};
TableCaption.displayName = 'Table.Caption';

const CellOutsideOfSectionWarning = 'Table.Cell used outside of a Table.Head or Table.Body component. Unable to determine section type from context.';
const TableCell = (_a) => {
    var { className, _responsive, _responsiveHeading, isNumeric, children } = _a, rest = __rest(_a, ["className", "_responsive", "_responsiveHeading", "isNumeric", "children"]);
    const section = React.useContext(TableSectionContext);
    useDevWarning(CellOutsideOfSectionWarning, () => section === TableSection.NONE);
    const cellClass = section === TableSection.HEAD ? 'nhsuk-table__header' : 'nhsuk-table__cell';
    const classes = classNames(cellClass, { [`${cellClass}--numeric`]: isNumeric }, className);
    switch (section) {
        case TableSection.HEAD:
            return (React.createElement("th", Object.assign({ className: classes, scope: "col" }, rest), children));
        case TableSection.BODY:
        case TableSection.NONE:
        default:
            return (React.createElement("td", Object.assign({ className: classes, role: _responsive ? 'cell' : undefined }, rest),
                _responsive && (React.createElement("span", { className: "nhsuk-table-responsive__heading" }, _responsiveHeading)),
                children));
    }
};
TableCell.displayName = 'Table.Cell';
TableCell.defaultProps = {
    _responsive: false,
    _responsiveHeading: '',
};

const TableContainer = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-table-container', className) }, rest)));
};
TableContainer.displayName = 'Table.Container';

const TableHead = (_a) => {
    var { className, children } = _a, rest = __rest(_a, ["className", "children"]);
    return (React.createElement("thead", Object.assign({ className: classNames('nhsuk-table__head', className) }, rest),
        React.createElement(TableSectionContext.Provider, { value: TableSection.HEAD }, children)));
};
TableHead.displayName = 'Table.Head';

const TableContext = React.createContext({
    /* eslint-disable @typescript-eslint/no-empty-function */
    isResponsive: false,
    headings: [],
    setHeadings: () => { },
});

const isTableCell = (child) => {
    return React.isValidElement(child) && child.type === TableCell;
};
const getHeadingsFromChildren = (children) => {
    const headings = [];
    React.Children.map(children, (child) => {
        if (isTableCell(child)) {
            headings.push(child.props.children.toString());
        }
    });
    return headings;
};

const TableRow = (_a) => {
    var { className, children } = _a, rest = __rest(_a, ["className", "children"]);
    const section = React.useContext(TableSectionContext);
    const { isResponsive, headings, setHeadings } = React.useContext(TableContext);
    React.useEffect(() => {
        if (isResponsive && section === TableSection.HEAD) {
            setHeadings(getHeadingsFromChildren(children));
        }
    }, [isResponsive, section, children]);
    if (isResponsive && section === TableSection.BODY) {
        const tableCells = React.Children.map(children, (child, index) => {
            if (isTableCell(child)) {
                return React.cloneElement(child, {
                    _responsive: isResponsive,
                    _responsiveHeading: `${headings[index] || ''} `,
                });
            }
            return child;
        });
        return (React.createElement("tr", Object.assign({ className: classNames('nhsuk-table__row', className) }, rest), tableCells));
    }
    return (React.createElement("tr", Object.assign({ className: classNames('nhsuk-table__row', className) }, rest), children));
};
TableRow.displayName = 'Table.Row';

const TablePanel = (_a) => {
    var { className, heading, headingProps, children } = _a, rest = __rest(_a, ["className", "heading", "headingProps", "children"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-table__panel-with-heading-tab', className) }, rest),
        heading && (React.createElement(HeadingLevel, Object.assign({ headingLevel: "h3" }, headingProps, { className: classNames('nhsuk-table__heading-tab', headingProps === null || headingProps === void 0 ? void 0 : headingProps.className) }), heading)),
        children));
};

class Table extends React.PureComponent {
    constructor(props) {
        super(props);
        this.setHeadings = (headings) => {
            const isEqual = headings.reduce((prevValue, heading, index) => prevValue && heading === this.state.headings[index], true);
            if (!isEqual)
                this.setState({ headings });
        };
        this.state = {
            headings: [],
        };
    }
    render() {
        const _a = this.props, { className, responsive, children, caption, captionProps } = _a, rest = __rest(_a, ["className", "responsive", "children", "caption", "captionProps"]);
        const contextValue = {
            isResponsive: Boolean(responsive),
            headings: this.state.headings,
            setHeadings: this.setHeadings,
        };
        return (React.createElement(TableContext.Provider, { value: contextValue },
            React.createElement("table", Object.assign({ className: classNames({ 'nhsuk-table': !responsive }, { 'nhsuk-table-responsive': responsive }, className) }, rest),
                caption && React.createElement(TableCaption, Object.assign({}, captionProps), caption),
                children)));
    }
}
Table.defaultProps = {
    responsive: false,
};
Table.Container = TableContainer;
Table.Head = TableHead;
Table.Row = TableRow;
Table.Cell = TableCell;
Table.Body = TableBody;
Table.Panel = TablePanel;

const Tag = (_a) => {
    var { className, color } = _a, rest = __rest(_a, ["className", "color"]);
    return (React.createElement("strong", Object.assign({ className: classNames('nhsuk-tag', { [`nhsuk-tag--${color}`]: color }, className) }, rest)));
};

const Textarea = (props) => (React.createElement(FormGroup, Object.assign({ inputType: "textarea" }, props), (_a) => {
    var { className, error, textareaRef } = _a, rest = __rest(_a, ["className", "error", "textareaRef"]);
    return (React.createElement("textarea", Object.assign({ className: classNames('nhsuk-textarea', { 'nhsuk-textarea--error': error }, className), ref: textareaRef }, rest)));
}));

const LedeText = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("p", Object.assign({ className: classNames('nhsuk-lede-text', className) }, rest)));
};

const BodyText = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("p", Object.assign({ className: classNames('nhsuk-body', className) }, rest)));
};

const WarningCalloutLabel = (_a) => {
    var { className, visuallyHiddenText, children } = _a, rest = __rest(_a, ["className", "visuallyHiddenText", "children"]);
    return (React.createElement(HeadingLevel, Object.assign({ className: classNames('nhsuk-warning-callout__label', className) }, rest),
        React.createElement("span", { role: "text" },
            visuallyHiddenText && React.createElement("span", { className: "nhsuk-u-visually-hidden" }, visuallyHiddenText),
            children)));
};
WarningCalloutLabel.defaultProps = {
    visuallyHiddenText: 'Important: ',
};
const WarningCallout = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-warning-callout', className) }, rest)));
};
WarningCallout.Label = WarningCalloutLabel;

const Clearfix = (props) => (React.createElement("div", Object.assign({ className: "nhsuk-u-clear" }, props)));

const ReadingWidth = (_a) => {
    var { className } = _a, rest = __rest(_a, ["className"]);
    return (React.createElement("div", Object.assign({ className: classNames('nhsuk-u-reading-width', className) }, rest)));
};

exports.ActionLink = ActionLink;
exports.ArrowLeftIcon = ArrowLeft;
exports.ArrowRightCircleIcon = ArrowRightCircle;
exports.ArrowRightIcon = ArrowRight;
exports.BackLink = BackLink;
exports.BodyText = BodyText;
exports.Breadcrumb = Breadcrumb;
exports.Button = ButtonWrapper;
exports.ButtonLink = ButtonLink;
exports.Card = Card;
exports.CareCard = CareCard;
exports.Checkboxes = Checkboxes;
exports.ChevronLeftIcon = ChevronLeft;
exports.ChevronRightIcon = ChevronRight;
exports.Clearfix = Clearfix;
exports.CloseIcon = Close;
exports.Col = Col;
exports.Container = Container;
exports.ContentsList = ContentsList;
exports.CrossIcon = Cross;
exports.DateInput = DateInput;
exports.DefaultButton = Button;
exports.Details = Details;
exports.DoDontList = DoDontList;
exports.EmdashIcon = Emdash;
exports.ErrorMessage = ErrorMessage;
exports.ErrorSummary = ErrorSummary;
exports.Fieldset = Fieldset;
exports.Footer = Footer;
exports.Form = Form;
exports.Header = Header;
exports.Hero = Hero;
exports.Hint = Hint;
exports.Icons = Icons;
exports.Images = Images;
exports.Input = Input;
exports.InsetText = InsetText;
exports.Label = Label;
exports.LedeText = LedeText;
exports.ListPanel = ListPanel;
exports.MinusIcon = Minus;
exports.NavAZ = NavAZ;
exports.Pagination = Pagination;
exports.PlusIcon = Plus;
exports.Radios = Radios;
exports.ReadingWidth = ReadingWidth;
exports.ReviewDate = ReviewDate;
exports.Row = Row;
exports.SearchIcon = Search$1;
exports.Select = Select;
exports.SkipLink = SkipLink;
exports.SmallEmdashIcon = SmallEmdash;
exports.SummaryList = SummaryList;
exports.Table = Table;
exports.Tag = Tag;
exports.Textarea = Textarea;
exports.TickIcon = Tick;
exports.WarningCallout = WarningCallout;
exports.useFormContext = useFormContext;
//# sourceMappingURL=index.js.map
